{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/external \"big-integer\"","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/exec.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/sqlite.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","BigInt","peg$SyntaxError","message","expected","found","location","this","Error","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","replace","j","descriptions","type","sort","slice","join","describeExpected","describeFound","SyntaxError","parse","input","options","peg$result","peg$FAILED","peg$startRuleFunctions","start","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","tail","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c42","peg$c48","unshift","forEach","tableInfo","table","as","tableAlias","columnList","columns","columnListTableAlias","clear","col","add","refreshColumnList","peg$c70","peg$c72","peg$c74","peg$c76","peg$c78","peg$c83","peg$c87","peg$c102","createBinaryExprChain","peg$c104","peg$c106","peg$c110","nk","peg$c113","peg$c115","peg$c117","peg$c119","peg$c121","peg$c123","peg$c131","peg$c133","peg$c136","peg$c138","peg$c140","peg$c149","reservedMap","peg$c153","peg$c154","peg$c155","peg$classExpectation","peg$c156","chars","peg$c158","peg$c159","peg$c160","peg$c162","peg$c163","peg$c164","peg$c168","peg$c169","peg$c170","peg$c171","peg$c172","peg$c173","peg$c174","peg$c176","peg$c181","peg$c196","peg$c198","peg$c200","peg$c202","peg$c204","peg$c206","peg$c208","peg$c210","peg$c212","peg$c214","peg$c216","peg$c218","peg$c220","peg$c222","peg$c224","peg$c226","peg$c228","peg$c230","peg$c232","peg$c234","peg$c236","peg$c248","peg$c251","ca","toLowerCase","peg$c252","peg$c253","peg$c254","peg$c255","peg$c257","peg$c260","peg$c263","peg$c266","peg$c269","peg$c272","peg$c275","peg$c278","peg$c281","peg$c284","peg$c287","peg$c289","peg$c290","peg$c299","peg$c303","peg$c304","peg$c305","peg$c306","peg$c307","peg$c308","peg$c309","peg$c310","peg$c313","peg$c319","peg$c323","peg$c330","peg$c340","peg$c345","peg$c362","peg$c364","peg$c366","peg$c368","peg$c370","peg$c372","peg$c374","peg$c376","peg$c378","peg$c380","peg$c382","peg$c387","peg$c389","peg$c391","peg$c393","peg$c395","peg$c397","peg$c399","peg$c401","peg$c403","peg$c406","peg$c408","peg$c411","peg$c414","peg$c417","peg$c420","peg$c423","peg$c426","peg$c429","peg$c432","peg$c435","peg$c438","peg$c441","peg$c444","peg$c447","peg$c450","peg$c453","peg$c456","peg$c459","peg$c462","peg$c468","peg$c470","peg$c472","peg$c474","peg$c476","peg$c478","peg$c480","peg$c483","peg$c486","peg$c492","peg$c498","peg$c501","peg$c504","peg$c507","peg$c510","peg$c516","peg$c525","peg$c528","peg$c549","peg$c555","peg$c558","peg$c561","peg$c564","peg$c567","peg$c576","peg$c582","peg$c591","peg$c594","peg$c597","peg$c609","peg$c645","peg$c647","peg$c649","peg$c651","peg$c653","peg$c655","peg$c657","peg$c659","peg$c661","peg$c663","peg$c664","peg$c665","peg$c666","peg$c670","dataType","peg$c672","a","definition","anglebracket","peg$currPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","offset","peg$fail","push","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","ast","tableList","from","peg$c1","peg$parsemultiple_stmt","s9","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","peg$parselimit_clause","cte","with","select","orderby","limit","parentheses","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","substr","peg$parseident_start","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","_next","union","peg$c15","s8","s10","s12","s14","s16","s18","s20","s22","s24","s26","peg$parseKW_SELECT","peg$parse___","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parsetable_base","peg$parsetable_ref","peg$parsetable_ref_list","s11","s15","peg$parseKW_PIVOT","peg$parseLPAREN","peg$parseaggr_func","peg$parsealias_clause","peg$parseCOMMA","el","peg$c178","peg$parseaggr_func_list","peg$parsecolumn_ref","peg$parsein_op_right","peg$parseRPAREN","operator","in_expr","peg$parsepivot_operator","op","peg$parsefrom_clause","peg$parseexpr","keyword","expr","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parseor_and_where_expr","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","isArray","info","db","as_struct_val","distinct","for_sys_time_as_of","where","groupby","having","window","peg$c19","peg$parseselect_stmt_nake","parentheses_symbol","peg$parseKW_WITH","peg$parsecte_definition","peg$parseliteral_string","peg$parseident_name","stmt","peg$parseSTAR","peg$parsecolumns_list","expr_list","star","peg$parsecolumn_list_item","peg$parsecolumn_offset_expr","peg$parseLBRAKE","peg$parseKW_OFFSET","peg$parseKW_ORDINAL","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parseident","peg$parseDOT","tbl","pro","mid","suffix","peg$c38","peg$parseexpr_alias","JSON","stringify","peg$c151","peg$parsequoted_ident","peg$parsealias_ident","peg$parsefrom_unnest_item","peg$parsewith_offset","with_offset","s13","peg$parsejoin_op","peg$parseKW_USING","using","peg$parseon_clause","on","peg$c51","alias","peg$c52","peg$parsetable_join","peg$parsetable_name","peg$c54","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c59","project","dt","obj","peg$c60","peg$c61","peg$parseKW_ON","peg$parseas_window_specification","as_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_AND","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$c81","peg$parsewindow_frame_clause","partitionby","window_frame_clause","peg$parsewindow_specification","window_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","e","peg$c92","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","i1","res","seperator","peg$c93","peg$c94","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseKW_OR","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","array_path","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","map","peg$c96","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$c97","peg$parsearray_expr","result","createBinaryExpr","peg$c101","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","left","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsebetween_or_not_between_op","right","peg$parsebetween_op_right","peg$parseKW_IS","peg$c125","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","peg$parsein_op","peg$parseKW_IN","peg$c129","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","s17","peg$parseKW_CAST","peg$parsedata_type","symbol","target","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c240","scale","peg$c241","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c242","peg$parsecast_expr","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","kw","args","field","cast_type","source","peg$c238","peg$parseextract_func","peg$c194","peg$parseproc_func_name","peg$parseover_partition","bc","over","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parseKW_SESSION_USER","peg$parsescalar_func","peg$c192","peg$parseon_update_current_timestamp","up","peg$c193","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$c144","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","unit","peg$parseinterval_expr","peg$parseKW_WHEN","peg$parseKW_THEN","cond","peg$parseKW_ELSE","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c148","test","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_COUNT","peg$parsestar_expr","or","peg$c189","peg$parsecount_arg","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$c183","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$c250","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c293","exp","peg$c294","peg$c295","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","field_name","field_type","peg$c669","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","tableName","newColumnsList","Set","keys","columnInfo","split","require","PARSER_NAME","DEFAULT_OPT","database","parserOpt","commonOptionConnector","action","opt","connector","str","createValueExpr","escape","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","identifierToSql","isDual","commonTypeValue","toUpper","val","hasVal","literalToSQL","collate","replaceParams","params","replaceParamsInner","filter","onPartitionsToSQL","partitions","partition","dataTypeToSQL","arrayStructTypeToSQL","dataTypeUpper","commentToSQL","comment","triggerEventToSQL","events","event","kwArgs","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","asWindowSpecToSQL","asWindowSpec","windowSpec","windowFrame","orderOrPartitionByToSQL","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","constructArgsList","consider_nulls","argsList","exprToSQL","isConsidernulls","fnName","isConsiderNullsInArgs","overToSQL","upperType","onUpdate","binaryToSQL","rstr","isBetween","castToSQL","expression","symbolChar","arrayDimension","array","arrayDimensionToSymbol","funcToSQL","args_parentheses","collateStr","overStr","separator","composePrefixValSuffix","limitToSQL","fetch","limitOffsetToSQL","withToSQL","withExpr","isRecursive","recursive","withExprStr","setToSQL","sets","clauses","set","setItem","valuesToSQL","values","selectToSQL","partitionToSQL","partitionArr","insertToSQL","onDuplicateUpdate","on_duplicate_update","duplicateSet","tablesToSQL","operatorToSQL","sql","pivotOperatorToSQL","tableToSQL","unnestExpr","withOffset","unnestToSQL","schema","tablesample","schemaStr","valueSQL","valuesExpr","tableSampleSQL","repeatable","tables","baseTable","joinExpr","tableOptionToSQL","tableOption","selectIntoToSQL","into","position","intoType","varToSQL","asStructVal","forSystem","forUpdate","for_update","top","windowInfo","withInfo","distinctToSQL","columnsToSQL","intoSQL","getExprListSQL","showToSQL","showExpr","showEventExpr","inClause","showCharacterSetExpr","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","arrayStructValueToSQL","exprList","arrayPath","brackets","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","within_group_orderby","distinctSQL","withinGroup","window_func","assign","leftVar","rightVal","binary_expr","case","conditions","len","cast","column_ref","datatype","extract","castType","function","insert","unionToSQL","interval","intervalExpr","show","struct","namedWindowExprInfo","members","varName","exprOrigin","Reflect","deleteProperty","expressions","upperPrefix","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexTypeAndOptionToSQL","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","constraintDefinitionToSQL","constraintDefinition","constraint","enforced","index","referenceDefinition","reference_definition","constraintSQL","columnReferenceDefinitionToSQL","array_index","arrow","columnOffsetToSQL","number","columnDataType","reference","match","onDelete","on_delete","on_update","columnOrder","nulls","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","characterSet","character_set","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","columnOption","getDual","columnsStr","has","columnToSQL","createDefinitionToSQL","indexSQL","resource","createDefinition","create_definitions","firstAfter","first_after","ifNotExists","if_not_exists","oldColumn","old_column","commonCmdToSQL","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","execVariablesToSQL","unary_expr","unarExpr","space","typeToSQLFn","analyze","attach","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTableName","createTableToSQL","constraintKw","constraint_kw","deferrable","execute","for_each","when","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","algorithm","definer","sqlSecurity","sql_security","view","withClause","viewName","createViewToSQL","delete","addition","exec","parameters","update","drop","truncate","declare","dec","at","declareInfo","use","rename","renameInfo","storeProcessCall","desc","lock","unlock","fun","_orderby","_limit","unionKeyword","surportedTypes","checkSupported","includes","toSQL","astInfo","multipleToSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","global","NodeSQLParser","util"],"mappings":"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","file":"bigquery.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt };\n        },\n      peg$c19 = function(cte, sv, d, c, f, fs, w, g, h, o, l, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                with: cte,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, t, l) {\n          return {\n            expr: n,\n            offset: `[${t}(${l.value})]`\n          }\n        },\n      peg$c37 = function(tbl) {\n            columnList.add('select::null::(.*)');\n            return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c38 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`)\n            let column = '*'\n            const mid = pro && pro[0]\n            if (typeof mid === 'string') column = `${mid}.*`\n            if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column,\n              },\n              as: null\n            }\n          },\n      peg$c39 = function(c, as) {\n          return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: c\n              },\n              as: as\n            }\n        },\n      peg$c40 = function(i) { return i; },\n      peg$c41 = \"unnest\",\n      peg$c42 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c43 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c44 = function(l, op) {\n          if (l[0]) l[0].operator = op\n          return l\n        },\n      peg$c45 = function(a, c, i, as) {\n          i.operator = '='\n          return {\n            'type': 'pivot',\n            'expr': a,\n            column: c,\n            in_expr: i,\n            as,\n          }\n        },\n      peg$c46 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c47 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c48 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c49 = function(t) { return t; },\n      peg$c50 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c51 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c52 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c53 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c54 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c55 = function() { return 'LEFT JOIN'; },\n      peg$c56 = function() { return 'RIGHT JOIN'; },\n      peg$c57 = function() { return 'FULL JOIN'; },\n      peg$c58 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c59 = function(k) { return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; },\n      peg$c60 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c61 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c62 = function(e) { return e; },\n      peg$c63 = function(e) { return e.value; },\n      peg$c64 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c65 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c66 = function(n) { return n },\n      peg$c67 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c68 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c69 = \"range\",\n      peg$c70 = peg$literalExpectation(\"RANGE\", true),\n      peg$c71 = \"unbounded\",\n      peg$c72 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c73 = \"preceding\",\n      peg$c74 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c75 = \"current\",\n      peg$c76 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c77 = \"ROW\",\n      peg$c78 = peg$literalExpectation(\"ROW\", false),\n      peg$c79 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c80 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c81 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c82 = \"following\",\n      peg$c83 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c84 = function(s) {\n          // => string\n          s.value += ' FOLLOWING'\n          return s\n        },\n      peg$c85 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c86 = \"row\",\n      peg$c87 = peg$literalExpectation(\"ROW\", true),\n      peg$c88 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c89 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c90 = function(bc) { return bc; },\n      peg$c91 = function(l) { return l; },\n      peg$c92 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c93 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c94 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c95 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c96 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c97 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c98 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c99 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c100 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c101 = function(head, tail) {\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < tail.length; i++) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' };\n            el.value = result\n            return el\n          }\n          return result;\n        },\n      peg$c102 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c103 = \"!\",\n      peg$c104 = peg$literalExpectation(\"!\", false),\n      peg$c105 = \"=\",\n      peg$c106 = peg$literalExpectation(\"=\", false),\n      peg$c107 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c108 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c109 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c110 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c111 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c112 = \">=\",\n      peg$c113 = peg$literalExpectation(\">=\", false),\n      peg$c114 = \">\",\n      peg$c115 = peg$literalExpectation(\">\", false),\n      peg$c116 = \"<=\",\n      peg$c117 = peg$literalExpectation(\"<=\", false),\n      peg$c118 = \"<>\",\n      peg$c119 = peg$literalExpectation(\"<>\", false),\n      peg$c120 = \"<\",\n      peg$c121 = peg$literalExpectation(\"<\", false),\n      peg$c122 = \"!=\",\n      peg$c123 = peg$literalExpectation(\"!=\", false),\n      peg$c124 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c125 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c126 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c127 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c128 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c129 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c130 = \"+\",\n      peg$c131 = peg$literalExpectation(\"+\", false),\n      peg$c132 = \"-\",\n      peg$c133 = peg$literalExpectation(\"-\", false),\n      peg$c134 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c135 = \"*\",\n      peg$c136 = peg$literalExpectation(\"*\", false),\n      peg$c137 = \"/\",\n      peg$c138 = peg$literalExpectation(\"/\", false),\n      peg$c139 = \"%\",\n      peg$c140 = peg$literalExpectation(\"%\", false),\n      peg$c141 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c142 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c143 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c144 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c145 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c146 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c147 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c148 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c149 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c150 = function(name) {\n            return name;\n          },\n      peg$c151 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c152 = \"\\\"\",\n      peg$c153 = peg$literalExpectation(\"\\\"\", false),\n      peg$c154 = /^[^\"]/,\n      peg$c155 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c156 = function(chars) { return chars.join(''); },\n      peg$c157 = \"'\",\n      peg$c158 = peg$literalExpectation(\"'\", false),\n      peg$c159 = /^[^']/,\n      peg$c160 = peg$classExpectation([\"'\"], true, false),\n      peg$c161 = \"`\",\n      peg$c162 = peg$literalExpectation(\"`\", false),\n      peg$c163 = /^[^`]/,\n      peg$c164 = peg$classExpectation([\"`\"], true, false),\n      peg$c165 = function(chars) { return `\\`${chars.join('')}\\``; },\n      peg$c166 = function(name) {\n          return name;\n        },\n      peg$c167 = function(name) { return name; },\n      peg$c168 = function(start, parts) { return start + parts.join(''); },\n      peg$c169 = /^[A-Za-z_]/,\n      peg$c170 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c171 = /^[A-Za-z0-9_\\-]/,\n      peg$c172 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c173 = /^[A-Za-z0-9_:]/,\n      peg$c174 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c175 = \":\",\n      peg$c176 = peg$literalExpectation(\":\", false),\n      peg$c177 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c178 = function(head, as, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n        },\n      peg$c179 = function(name, e, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc,\n            };\n          },\n      peg$c180 = \"update\",\n      peg$c181 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c182 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c183 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c184 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c185 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c186 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c187 = function(e) { return { expr: e }; },\n      peg$c188 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c189 = function(d, c, or) {  return { distinct: d, expr: c, orderby: or, parentheses: true }; },\n      peg$c190 = function() { return { type: 'star', value: '*' }; },\n      peg$c191 = function(name, l, bc) {\n          if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c192 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c193 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c194 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              tail.forEach(t => name = `${name}.${t[3]}`)\n            }\n            return name;\n          },\n      peg$c195 = \"century\",\n      peg$c196 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c197 = \"day\",\n      peg$c198 = peg$literalExpectation(\"DAY\", true),\n      peg$c199 = \"decade\",\n      peg$c200 = peg$literalExpectation(\"DECADE\", true),\n      peg$c201 = \"dow\",\n      peg$c202 = peg$literalExpectation(\"DOW\", true),\n      peg$c203 = \"doy\",\n      peg$c204 = peg$literalExpectation(\"DOY\", true),\n      peg$c205 = \"epoch\",\n      peg$c206 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c207 = \"hour\",\n      peg$c208 = peg$literalExpectation(\"HOUR\", true),\n      peg$c209 = \"isodow\",\n      peg$c210 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c211 = \"isoyear\",\n      peg$c212 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c213 = \"microseconds\",\n      peg$c214 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c215 = \"millennium\",\n      peg$c216 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c217 = \"milliseconds\",\n      peg$c218 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c219 = \"minute\",\n      peg$c220 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c221 = \"month\",\n      peg$c222 = peg$literalExpectation(\"MONTH\", true),\n      peg$c223 = \"quarter\",\n      peg$c224 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c225 = \"second\",\n      peg$c226 = peg$literalExpectation(\"SECOND\", true),\n      peg$c227 = \"timezone\",\n      peg$c228 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c229 = \"timezone_hour\",\n      peg$c230 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c231 = \"timezone_minute\",\n      peg$c232 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c233 = \"week\",\n      peg$c234 = peg$literalExpectation(\"WEEK\", true),\n      peg$c235 = \"year\",\n      peg$c236 = peg$literalExpectation(\"YEAR\", true),\n      peg$c237 = function() {\n          return f\n        },\n      peg$c238 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c239 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c240 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c241 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c242 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c243 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c244 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c245 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c246 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c247 = \"r\",\n      peg$c248 = peg$literalExpectation(\"R\", true),\n      peg$c249 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c250 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c251 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c252 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c253 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c254 = /^[^'\\\\]/,\n      peg$c255 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c256 = \"\\\\'\",\n      peg$c257 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c258 = function() { return \"\\\\'\";  },\n      peg$c259 = \"\\\\\\\"\",\n      peg$c260 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c261 = function() { return '\\\\\"';  },\n      peg$c262 = \"\\\\\\\\\",\n      peg$c263 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c264 = function() { return \"\\\\\\\\\"; },\n      peg$c265 = \"\\\\/\",\n      peg$c266 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c267 = function() { return \"\\\\/\";  },\n      peg$c268 = \"\\\\b\",\n      peg$c269 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c270 = function() { return \"\\b\"; },\n      peg$c271 = \"\\\\f\",\n      peg$c272 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c273 = function() { return \"\\f\"; },\n      peg$c274 = \"\\\\n\",\n      peg$c275 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c276 = function() { return \"\\n\"; },\n      peg$c277 = \"\\\\r\",\n      peg$c278 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c279 = function() { return \"\\r\"; },\n      peg$c280 = \"\\\\t\",\n      peg$c281 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c282 = function() { return \"\\t\"; },\n      peg$c283 = \"\\\\u\",\n      peg$c284 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c285 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c286 = \"\\\\\",\n      peg$c287 = peg$literalExpectation(\"\\\\\", false),\n      peg$c288 = function() { return \"\\\\\"; },\n      peg$c289 = /^[\\n\\r]/,\n      peg$c290 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c291 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c292 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c293 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c294 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c295 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c296 = function(op, digits) { return \"-\" + digits; },\n      peg$c297 = function(op, digit) { return \"-\" + digit; },\n      peg$c298 = \".\",\n      peg$c299 = peg$literalExpectation(\".\", false),\n      peg$c300 = function(digits) { return \".\" + digits; },\n      peg$c301 = function(e, digits) { return e + digits; },\n      peg$c302 = function(digits) { return digits.join(\"\"); },\n      peg$c303 = /^[0-9]/,\n      peg$c304 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c305 = /^[0-9a-fA-F]/,\n      peg$c306 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c307 = /^[eE]/,\n      peg$c308 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c309 = /^[+\\-]/,\n      peg$c310 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c311 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c312 = \"null\",\n      peg$c313 = peg$literalExpectation(\"NULL\", true),\n      peg$c314 = \"default\",\n      peg$c315 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c316 = \"not null\",\n      peg$c317 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c318 = \"true\",\n      peg$c319 = peg$literalExpectation(\"TRUE\", true),\n      peg$c320 = \"to\",\n      peg$c321 = peg$literalExpectation(\"TO\", true),\n      peg$c322 = \"false\",\n      peg$c323 = peg$literalExpectation(\"FALSE\", true),\n      peg$c324 = \"drop\",\n      peg$c325 = peg$literalExpectation(\"DROP\", true),\n      peg$c326 = function() { return 'DROP'; },\n      peg$c327 = \"use\",\n      peg$c328 = peg$literalExpectation(\"USE\", true),\n      peg$c329 = \"select\",\n      peg$c330 = peg$literalExpectation(\"SELECT\", true),\n      peg$c331 = \"if not exists\",\n      peg$c332 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c333 = \"RECURSIVE\",\n      peg$c334 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c335 = \"ignore\",\n      peg$c336 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c337 = \"explain\",\n      peg$c338 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c339 = \"partition\",\n      peg$c340 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c341 = function() { return 'PARTITION' },\n      peg$c342 = \"into\",\n      peg$c343 = peg$literalExpectation(\"INTO\", true),\n      peg$c344 = \"from\",\n      peg$c345 = peg$literalExpectation(\"FROM\", true),\n      peg$c346 = \"set\",\n      peg$c347 = peg$literalExpectation(\"SET\", true),\n      peg$c348 = \"unlock\",\n      peg$c349 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c350 = \"lock\",\n      peg$c351 = peg$literalExpectation(\"LOCK\", true),\n      peg$c352 = \"table\",\n      peg$c353 = peg$literalExpectation(\"TABLE\", true),\n      peg$c354 = function() { return 'TABLE'; },\n      peg$c355 = \"tables\",\n      peg$c356 = peg$literalExpectation(\"TABLES\", true),\n      peg$c357 = function() { return 'TABLES'; },\n      peg$c358 = \"collate\",\n      peg$c359 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c360 = function() { return 'COLLATE'; },\n      peg$c361 = \"on\",\n      peg$c362 = peg$literalExpectation(\"ON\", true),\n      peg$c363 = \"left\",\n      peg$c364 = peg$literalExpectation(\"LEFT\", true),\n      peg$c365 = \"right\",\n      peg$c366 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c367 = \"full\",\n      peg$c368 = peg$literalExpectation(\"FULL\", true),\n      peg$c369 = \"inner\",\n      peg$c370 = peg$literalExpectation(\"INNER\", true),\n      peg$c371 = \"cross\",\n      peg$c372 = peg$literalExpectation(\"CROSS\", true),\n      peg$c373 = \"join\",\n      peg$c374 = peg$literalExpectation(\"JOIN\", true),\n      peg$c375 = \"outer\",\n      peg$c376 = peg$literalExpectation(\"OUTER\", true),\n      peg$c377 = \"over\",\n      peg$c378 = peg$literalExpectation(\"OVER\", true),\n      peg$c379 = \"union\",\n      peg$c380 = peg$literalExpectation(\"UNION\", true),\n      peg$c381 = \"value\",\n      peg$c382 = peg$literalExpectation(\"VALUE\", true),\n      peg$c383 = function() { return 'VALUE' },\n      peg$c384 = \"values\",\n      peg$c385 = peg$literalExpectation(\"VALUES\", true),\n      peg$c386 = \"using\",\n      peg$c387 = peg$literalExpectation(\"USING\", true),\n      peg$c388 = \"where\",\n      peg$c389 = peg$literalExpectation(\"WHERE\", true),\n      peg$c390 = \"with\",\n      peg$c391 = peg$literalExpectation(\"WITH\", true),\n      peg$c392 = \"group\",\n      peg$c393 = peg$literalExpectation(\"GROUP\", true),\n      peg$c394 = \"by\",\n      peg$c395 = peg$literalExpectation(\"BY\", true),\n      peg$c396 = \"order\",\n      peg$c397 = peg$literalExpectation(\"ORDER\", true),\n      peg$c398 = \"having\",\n      peg$c399 = peg$literalExpectation(\"HAVING\", true),\n      peg$c400 = \"window\",\n      peg$c401 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c402 = \"ordinal\",\n      peg$c403 = peg$literalExpectation(\"ORDINAL\", true),\n      peg$c404 = function() { return 'ORDINAL' },\n      peg$c405 = \"limit\",\n      peg$c406 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c407 = \"offset\",\n      peg$c408 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c409 = function() { return 'OFFSET'; },\n      peg$c410 = \"asc\",\n      peg$c411 = peg$literalExpectation(\"ASC\", true),\n      peg$c412 = function() { return 'ASC'; },\n      peg$c413 = \"desc\",\n      peg$c414 = peg$literalExpectation(\"DESC\", true),\n      peg$c415 = function() { return 'DESC'; },\n      peg$c416 = \"all\",\n      peg$c417 = peg$literalExpectation(\"ALL\", true),\n      peg$c418 = function() { return 'ALL'; },\n      peg$c419 = \"distinct\",\n      peg$c420 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c421 = function() { return 'DISTINCT';},\n      peg$c422 = \"between\",\n      peg$c423 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c424 = function() { return 'BETWEEN'; },\n      peg$c425 = \"in\",\n      peg$c426 = peg$literalExpectation(\"IN\", true),\n      peg$c427 = function() { return 'IN'; },\n      peg$c428 = \"is\",\n      peg$c429 = peg$literalExpectation(\"IS\", true),\n      peg$c430 = function() { return 'IS'; },\n      peg$c431 = \"like\",\n      peg$c432 = peg$literalExpectation(\"LIKE\", true),\n      peg$c433 = function() { return 'LIKE'; },\n      peg$c434 = \"exists\",\n      peg$c435 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c436 = function() { return 'EXISTS'; },\n      peg$c437 = \"not\",\n      peg$c438 = peg$literalExpectation(\"NOT\", true),\n      peg$c439 = function() { return 'NOT'; },\n      peg$c440 = \"and\",\n      peg$c441 = peg$literalExpectation(\"AND\", true),\n      peg$c442 = function() { return 'AND'; },\n      peg$c443 = \"or\",\n      peg$c444 = peg$literalExpectation(\"OR\", true),\n      peg$c445 = function() { return 'OR'; },\n      peg$c446 = \"count\",\n      peg$c447 = peg$literalExpectation(\"COUNT\", true),\n      peg$c448 = function() { return 'COUNT'; },\n      peg$c449 = \"max\",\n      peg$c450 = peg$literalExpectation(\"MAX\", true),\n      peg$c451 = function() { return 'MAX'; },\n      peg$c452 = \"min\",\n      peg$c453 = peg$literalExpectation(\"MIN\", true),\n      peg$c454 = function() { return 'MIN'; },\n      peg$c455 = \"sum\",\n      peg$c456 = peg$literalExpectation(\"SUM\", true),\n      peg$c457 = function() { return 'SUM'; },\n      peg$c458 = \"avg\",\n      peg$c459 = peg$literalExpectation(\"AVG\", true),\n      peg$c460 = function() { return 'AVG'; },\n      peg$c461 = \"extract\",\n      peg$c462 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c463 = function() { return 'EXTRACT'; },\n      peg$c464 = \"call\",\n      peg$c465 = peg$literalExpectation(\"CALL\", true),\n      peg$c466 = function() { return 'CALL'; },\n      peg$c467 = \"case\",\n      peg$c468 = peg$literalExpectation(\"CASE\", true),\n      peg$c469 = \"when\",\n      peg$c470 = peg$literalExpectation(\"WHEN\", true),\n      peg$c471 = \"then\",\n      peg$c472 = peg$literalExpectation(\"THEN\", true),\n      peg$c473 = \"else\",\n      peg$c474 = peg$literalExpectation(\"ELSE\", true),\n      peg$c475 = \"end\",\n      peg$c476 = peg$literalExpectation(\"END\", true),\n      peg$c477 = \"cast\",\n      peg$c478 = peg$literalExpectation(\"CAST\", true),\n      peg$c479 = \"array\",\n      peg$c480 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c481 = function() { return 'ARRAY'; },\n      peg$c482 = \"bytes\",\n      peg$c483 = peg$literalExpectation(\"BYTES\", true),\n      peg$c484 = function() { return 'BYTES'; },\n      peg$c485 = \"bool\",\n      peg$c486 = peg$literalExpectation(\"BOOL\", true),\n      peg$c487 = function() { return 'BOOL'; },\n      peg$c488 = \"char\",\n      peg$c489 = peg$literalExpectation(\"CHAR\", true),\n      peg$c490 = function() { return 'CHAR'; },\n      peg$c491 = \"geography\",\n      peg$c492 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c493 = function() { return 'GEOGRAPHY'; },\n      peg$c494 = \"varchar\",\n      peg$c495 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c496 = function() { return 'VARCHAR';},\n      peg$c497 = \"numeric\",\n      peg$c498 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c499 = function() { return 'NUMERIC'; },\n      peg$c500 = \"decimal\",\n      peg$c501 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c502 = function() { return 'DECIMAL'; },\n      peg$c503 = \"signed\",\n      peg$c504 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c505 = function() { return 'SIGNED'; },\n      peg$c506 = \"unsigned\",\n      peg$c507 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c508 = function() { return 'UNSIGNED'; },\n      peg$c509 = \"int64\",\n      peg$c510 = peg$literalExpectation(\"INT64\", true),\n      peg$c511 = function() { return 'INT64'; },\n      peg$c512 = \"zerofill\",\n      peg$c513 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c514 = function() { return 'ZEROFILL'; },\n      peg$c515 = \"integer\",\n      peg$c516 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c517 = function() { return 'INTEGER'; },\n      peg$c518 = \"json\",\n      peg$c519 = peg$literalExpectation(\"JSON\", true),\n      peg$c520 = function() { return 'JSON'; },\n      peg$c521 = \"smallint\",\n      peg$c522 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c523 = function() { return 'SMALLINT'; },\n      peg$c524 = \"string\",\n      peg$c525 = peg$literalExpectation(\"STRING\", true),\n      peg$c526 = function() { return 'STRING'; },\n      peg$c527 = \"struct\",\n      peg$c528 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c529 = function() { return 'STRUCT'; },\n      peg$c530 = \"tinyint\",\n      peg$c531 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c532 = function() { return 'TINYINT'; },\n      peg$c533 = \"tinytext\",\n      peg$c534 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c535 = function() { return 'TINYTEXT'; },\n      peg$c536 = \"text\",\n      peg$c537 = peg$literalExpectation(\"TEXT\", true),\n      peg$c538 = function() { return 'TEXT'; },\n      peg$c539 = \"mediumtext\",\n      peg$c540 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c541 = function() { return 'MEDIUMTEXT'; },\n      peg$c542 = \"longtext\",\n      peg$c543 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c544 = function() { return 'LONGTEXT'; },\n      peg$c545 = \"bigint\",\n      peg$c546 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c547 = function() { return 'BIGINT'; },\n      peg$c548 = \"float64\",\n      peg$c549 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c550 = function() { return 'FLOAT64'; },\n      peg$c551 = \"double\",\n      peg$c552 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c553 = function() { return 'DOUBLE'; },\n      peg$c554 = \"date\",\n      peg$c555 = peg$literalExpectation(\"DATE\", true),\n      peg$c556 = function() { return 'DATE'; },\n      peg$c557 = \"datetime\",\n      peg$c558 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c559 = function() { return 'DATETIME'; },\n      peg$c560 = \"rows\",\n      peg$c561 = peg$literalExpectation(\"ROWS\", true),\n      peg$c562 = function() { return 'ROWS'; },\n      peg$c563 = \"time\",\n      peg$c564 = peg$literalExpectation(\"TIME\", true),\n      peg$c565 = function() { return 'TIME'; },\n      peg$c566 = \"timestamp\",\n      peg$c567 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c568 = function() { return 'TIMESTAMP'; },\n      peg$c569 = \"truncate\",\n      peg$c570 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c571 = function() { return 'TRUNCATE'; },\n      peg$c572 = \"user\",\n      peg$c573 = peg$literalExpectation(\"USER\", true),\n      peg$c574 = function() { return 'USER'; },\n      peg$c575 = \"current_date\",\n      peg$c576 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c577 = function() { return 'CURRENT_DATE'; },\n      peg$c578 = \"adddate\",\n      peg$c579 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c580 = function() { return 'ADDDATE'; },\n      peg$c581 = \"interval\",\n      peg$c582 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c583 = function() { return 'INTERVAL'; },\n      peg$c584 = function() { return 'YEAR'; },\n      peg$c585 = function() { return 'MONTH'; },\n      peg$c586 = function() { return 'DAY'; },\n      peg$c587 = function() { return 'HOUR'; },\n      peg$c588 = function() { return 'MINUTE'; },\n      peg$c589 = function() { return 'SECOND'; },\n      peg$c590 = \"current_time\",\n      peg$c591 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c592 = function() { return 'CURRENT_TIME'; },\n      peg$c593 = \"current_timestamp\",\n      peg$c594 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c595 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c596 = \"session_user\",\n      peg$c597 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c598 = function() { return 'SESSION_USER'; },\n      peg$c599 = \"global\",\n      peg$c600 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c601 = function() { return 'GLOBAL'; },\n      peg$c602 = \"session\",\n      peg$c603 = peg$literalExpectation(\"SESSION\", true),\n      peg$c604 = function() { return 'SESSION'; },\n      peg$c605 = \"local\",\n      peg$c606 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c607 = function() { return 'LOCAL'; },\n      peg$c608 = \"pivot\",\n      peg$c609 = peg$literalExpectation(\"PIVOT\", true),\n      peg$c610 = function() { return 'PIVOT'; },\n      peg$c611 = \"persist\",\n      peg$c612 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c613 = function() { return 'PERSIST'; },\n      peg$c614 = \"persist_only\",\n      peg$c615 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c616 = function() { return 'PERSIST_ONLY'; },\n      peg$c617 = \"add\",\n      peg$c618 = peg$literalExpectation(\"ADD\", true),\n      peg$c619 = function() { return 'ADD'; },\n      peg$c620 = \"column\",\n      peg$c621 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c622 = function() { return 'COLUMN'; },\n      peg$c623 = \"index\",\n      peg$c624 = peg$literalExpectation(\"INDEX\", true),\n      peg$c625 = function() { return 'INDEX'; },\n      peg$c626 = \"key\",\n      peg$c627 = peg$literalExpectation(\"KEY\", true),\n      peg$c628 = function() { return 'KEY'; },\n      peg$c629 = \"fulltext\",\n      peg$c630 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c631 = function() { return 'FULLTEXT'; },\n      peg$c632 = \"unique\",\n      peg$c633 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c634 = function() { return 'UNIQUE'; },\n      peg$c635 = \"comment\",\n      peg$c636 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c637 = function() { return 'COMMENT'; },\n      peg$c638 = \"constraint\",\n      peg$c639 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c640 = function() { return 'CONSTRAINT'; },\n      peg$c641 = \"references\",\n      peg$c642 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c643 = function() { return 'REFERENCES'; },\n      peg$c644 = \",\",\n      peg$c645 = peg$literalExpectation(\",\", false),\n      peg$c646 = \"[\",\n      peg$c647 = peg$literalExpectation(\"[\", false),\n      peg$c648 = \"]\",\n      peg$c649 = peg$literalExpectation(\"]\", false),\n      peg$c650 = \";\",\n      peg$c651 = peg$literalExpectation(\";\", false),\n      peg$c652 = \"||\",\n      peg$c653 = peg$literalExpectation(\"||\", false),\n      peg$c654 = \"&&\",\n      peg$c655 = peg$literalExpectation(\"&&\", false),\n      peg$c656 = \"/*\",\n      peg$c657 = peg$literalExpectation(\"/*\", false),\n      peg$c658 = \"*/\",\n      peg$c659 = peg$literalExpectation(\"*/\", false),\n      peg$c660 = \"--\",\n      peg$c661 = peg$literalExpectation(\"--\", false),\n      peg$c662 = \"#\",\n      peg$c663 = peg$literalExpectation(\"#\", false),\n      peg$c664 = peg$anyExpectation(),\n      peg$c665 = /^[ \\t\\n\\r]/,\n      peg$c666 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c667 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c668 = function(n) {\n            return n\n          },\n      peg$c669 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c670 = function(t) { return { dataType: t }; },\n      peg$c671 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true }; },\n      peg$c672 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsestruct_value();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_ALL();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parseKW_DISTINCT();\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefor_sys_time_as_of();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsewhere_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsegroup_by_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsehaving_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parseorder_by_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parselimit_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parsewindow_clause();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        peg$savedPos = s0;\n                                                        s1 = peg$c19(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26);\n                                                        s0 = s1;\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ORDINAL();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c37(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsecolumn_offset_expr();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseident();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseDOT();\n                if (s7 !== peg$FAILED) {\n                  s5 = [s5, s6, s7];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseSTAR();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c38(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumn_offset_expr();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsealias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c39(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseexpr_alias();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c40(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c40(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_unnest_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c41) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c42); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsealias_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewith_offset();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c43(s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepivot_operator();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepivot_operator() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PIVOT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseaggr_func_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n                  s7 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumn_ref();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsein_op_right();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsealias_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c45(s5, s9, s11, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c46(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c47(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c48(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c49(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c49(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c50(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c51(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c52(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c53(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c54(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsefrom_unnest_item();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c55();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c56();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c57();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CROSS();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c58(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_INNER();\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_JOIN();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c59(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c61(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c63(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c64(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c65(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c66(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c67(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c68(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c69) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c70); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c72); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c73) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c74); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c75) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c76); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c77) {\n                            s12 = peg$c77;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c78); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c79();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_frame_following();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsewindow_frame_preceding();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c80(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_ROWS();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_BETWEEN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsewindow_frame_preceding();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AND();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsewindow_frame_following();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c81(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c82) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c83); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c84(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c73) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c74); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c85(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c75) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c76); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c86) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c87); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c72); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c89(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c90(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c91(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c92(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c93(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseunion_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c95(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c96(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c97(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c98(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c99(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c100(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c101(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c102(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c102(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c103;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c104); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c105;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c106); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c107(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c108(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c109(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c110(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c111(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c112) {\n      s0 = peg$c112;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c114;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c115); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c116) {\n          s0 = peg$c116;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c117); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c118) {\n            s0 = peg$c118;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c119); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c120;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c121); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c105;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c106); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c122) {\n                  s0 = peg$c122;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c123); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c124(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c125(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c126(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c110(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c110(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c110(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c127(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c128(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c129(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c102(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c130;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c131); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c132;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c133); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c134(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c135;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c136); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c137;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c138); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c139;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c140); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c141(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c142(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c143(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c144(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c145(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c146(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c147(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c148(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c149(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c150(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c150(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c151(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c150(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c150(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c152;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c153); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c154.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c155); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c154.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c155); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c152;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c153); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c156(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c157;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c158); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c159.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c160); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c159.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c160); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c157;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c158); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c156(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c161;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c162); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c163.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c164); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c163.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c164); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c161;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c162); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c165(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c166(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c149(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c167(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c168(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c168(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c169.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c170); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c171.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c172); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c173.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c174); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c175;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c176); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c177(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseaggr_func();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseaggr_func();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsealias_clause();\n                    if (s11 === peg$FAILED) {\n                      s11 = null;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s6 = [s6, s7, s8, s9, s10, s11];\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseaggr_func();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parsealias_clause();\n                      if (s11 === peg$FAILED) {\n                        s11 = null;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c178(s1, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c179(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c180) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c181); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c182(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c180) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c181); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c183(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c184(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c185(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c186(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c187(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c188(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseorder_by_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c189(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c135;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c136); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c190();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c191(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c192(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CURRENT_TIMESTAMP();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseon_update_current_timestamp();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c193(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseDOT();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c194(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_SESSION_USER();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c195) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c196); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c197) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c198); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c199) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c200); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c201) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c202); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c203) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c204); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c205) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c206); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c207) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c209) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c211) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c213) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c215) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c217) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c219) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c220); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c221) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c222); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c223) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c224); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c225) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c226); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c227) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c228); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c229) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c230); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c231) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c232); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c233) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c234); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c235) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c236); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c237();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c238(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c239(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c240(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c241(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c242(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c243();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c244();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c245();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c246();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c247) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c248); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c157;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c158); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c157;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c158); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c249(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c247) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c248); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c152;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c153); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c152;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c153); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c250(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c157;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c158); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c157;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c158); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c251(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c152;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c153); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c152;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c153); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c251(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c252.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c253); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c254.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c255); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c256) {\n      s1 = peg$c256;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c257); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c258();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c259) {\n        s1 = peg$c259;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c260); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c261();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c262) {\n          s1 = peg$c262;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c263); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c264();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c265) {\n            s1 = peg$c265;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c266); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c267();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c268) {\n              s1 = peg$c268;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c269); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c270();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c271) {\n                s1 = peg$c271;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c272); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c273();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c274) {\n                  s1 = peg$c274;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c275); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c276();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c277) {\n                    s1 = peg$c277;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c278); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c279();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c280) {\n                      s1 = peg$c280;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c282();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c283) {\n                        s1 = peg$c283;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c284); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c285(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c286;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c287); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c288();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c289.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c290); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c291(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c292(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c293(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c294(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c295(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c132;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c133); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c130;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c131); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c296(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c132;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c133); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c130;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c131); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c297(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c298;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c299); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c300(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c301(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c302(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c303.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c304); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c305.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c306); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c307.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c308); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c309.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c310); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c311(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c312) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c313); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c314) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c315); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c316) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c317); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c318) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c319); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c320) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c321); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c322) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c323); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c326();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c327) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c328); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c329) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c330); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c331) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c332); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c333) {\n      s1 = peg$c333;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c334); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c335) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c336); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c337) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c338); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c339) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c340); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c341();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c342) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c343); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c344) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c345); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c346) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c347); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c348) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c349); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c350) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c351); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c352) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c353); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c354();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c357();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c358) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c359); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c360();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c361) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c363) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c364); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c365) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c367) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c368); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c369) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c370); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c371) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c372); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c373) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c374); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c375) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c376); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c377) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c378); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c379) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c380); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c381) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c382); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c383();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c384) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c386) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c387); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c388) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c389); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c390) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c391); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c392) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c393); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c394) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c395); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c396) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c397); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c398) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c399); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c400) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c401); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c402) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c404();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c405) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c406); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c407) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c408); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c409();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c410) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c411); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c412();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c413) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c414); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c415();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c416) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c417); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c418();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c419) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c420); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c421();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c422) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c423); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c424();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c425) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c426); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c427();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c428) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c429); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c430();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c431) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c432); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c433();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c434) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c435); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c436();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c437) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c438); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c439();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c440) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c441); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c442();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c443) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c444); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c445();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c446) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c447); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c448();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c449) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c450); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c451();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c452) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c453); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c454();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c455) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c456); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c457();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c458) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c459); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c460();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c461) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c462); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c463();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c464) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c465); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c466();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c467) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c468); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c469) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c470); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c471) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c472); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c473) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c474); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c475) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c476); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c477) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c478); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c479) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c480); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c481();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c482) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c483); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c484();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c485) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c486); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c487();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c488) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c489); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c490();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c491) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c492); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c493();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c494) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c495); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c496();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c497) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c498); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c499();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c500) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c501); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c502();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c503) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c504); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c505();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c506) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c507); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c508();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c509) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c510); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c511();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c512) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c513); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c514();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c515) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c516); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c517();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c518) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c519); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c520();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c521) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c522); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c523();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c524) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c525); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c526();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c527) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c528); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c529();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c530) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c531); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c532();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c533) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c534); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c535();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c536) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c537); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c538();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c539) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c540); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c541();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c542) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c543); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c544();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c545) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c546); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c547();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c548) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c550();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c551) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c552); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c553();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c554) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c555); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c556();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c557) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c558); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c559();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c560) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c561); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c562();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c563) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c564); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c565();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c566) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c567); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c568();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c569) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c570); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c571();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c572) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c573); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c574();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c575) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c576); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c577();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c578) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c579); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c580();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c581) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c582); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c583();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c235) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c584();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c221) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c585();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c197) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c198); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c586();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c207) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c208); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c587();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c219) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c220); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c588();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c225) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c226); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c589();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c590) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c591); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c592();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c593) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c594); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c595();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c596) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c597); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c598();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c599) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c600); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c601();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c602) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c603); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c604();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c605) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c606); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c607();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PIVOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c608) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c609); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c610();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c611) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c613();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c614) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c615); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c616();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c617) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c618); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c619();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c620) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c621); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c622();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c623) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c624); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c625();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c626) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c628();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c629) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c630); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c631();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c632) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c633); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c634();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c635) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c637();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c638) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c639); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c640();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c641) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c642); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c643();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c298;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c299); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c644;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c645); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c135;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c136); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c120;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c121); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c114;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c115); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c646;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c648;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c650;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c651); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c652) {\n      s0 = peg$c652;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c653); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c654) {\n      s0 = peg$c654;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c655); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c656) {\n      s1 = peg$c656;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c657); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c658) {\n        s5 = peg$c658;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c659); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c658) {\n          s5 = peg$c658;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c659); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c658) {\n          s3 = peg$c658;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c659); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c660) {\n      s1 = peg$c660;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c662;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c663); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c664); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c665.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c666); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c289.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c290); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c289.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c290); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c664); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c667(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c668(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c669(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c670(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c670(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c303.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c304); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c303.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c304); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c671(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c670(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c670(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c672(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c672(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n      'PIVOT': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n      'UNNEST': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","module.exports = require(\"big-integer\");","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal } from './util'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  return `${prefix}${symbolChar}${dataType}${arrayDimension}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = str.join('')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, schema, tablesample } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values, prefix } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    let valuesExpr = valuesToSQL(values)\n    if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n    valueSQL[1] = `VALUES ${valuesExpr}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  const str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  const result = [str, operatorToSQL(operator)]\n  if (tablesample) {\n    const tableSampleSQL = [\n      'TABLESAMPLE',\n      exprToSQL(tablesample.expr),\n      literalToSQL(tablesample.repeatable),\n    ].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    for_update: forUpdate,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  if (position === 'end') clauses.push(intoSQL)\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  datatype    : dataTypeToSQL,\n  extract     : extractFunToSQL,\n  function    : funcToSQL,\n  insert      : unionToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    let separator = ' '\n    const distinctSQL = ['DISTINCT', '', str]\n    if (args.parentheses) {\n      separator = ''\n      distinctSQL[1] = '('\n      distinctSQL.push(')')\n    }\n    str = distinctSQL.filter(hasVal).join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrow, as, collate, column, isDual, schema, table, parentheses, property,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${array_index.number}]`\n    if (array_index.property) str = `${str}.${array_index.property.value}`\n  }\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (/^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(column.as)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, keyword,\n    replace, select, sql_security: sqlSecurity,\n    type, view, with: withClause,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer && `DEFINER = ${definer}`,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name,\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  exec     : execToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  replace  : insertToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n"],"sourceRoot":""}