{"version":3,"sources":["/Users/taozhi/learning/node-sql-parser/webpack/universalModuleDefinition","/Users/taozhi/learning/node-sql-parser/webpack/bootstrap","/Users/taozhi/learning/node-sql-parser/src/util.js","/Users/taozhi/learning/node-sql-parser/src/array-struct.js","/Users/taozhi/learning/node-sql-parser/src/expr.js","/Users/taozhi/learning/node-sql-parser/src/aggregation.js","/Users/taozhi/learning/node-sql-parser/src/assign.js","/Users/taozhi/learning/node-sql-parser/src/case.js","/Users/taozhi/learning/node-sql-parser/src/interval.js","/Users/taozhi/learning/node-sql-parser/src/tables.js","/Users/taozhi/learning/node-sql-parser/src/column.js","/Users/taozhi/learning/node-sql-parser/src/limit.js","/Users/taozhi/learning/node-sql-parser/src/command.js","/Users/taozhi/learning/node-sql-parser/src/exec.js","/Users/taozhi/learning/node-sql-parser/src/union.js","/Users/taozhi/learning/node-sql-parser/src/sqlite.js","/Users/taozhi/learning/node-sql-parser/src/delete.js","/Users/taozhi/learning/node-sql-parser/src/alter.js","/Users/taozhi/learning/node-sql-parser/src/index-definition.js","/Users/taozhi/learning/node-sql-parser/src/func.js","/Users/taozhi/learning/node-sql-parser/src/over.js","/Users/taozhi/learning/node-sql-parser/src/select.js","/Users/taozhi/learning/node-sql-parser/src/create.js","/Users/taozhi/learning/node-sql-parser/src/window.js","/Users/taozhi/learning/node-sql-parser/src/insert.js","/Users/taozhi/learning/node-sql-parser/src/update.js","/Users/taozhi/learning/node-sql-parser/src/constrain.js","/Users/taozhi/learning/node-sql-parser/src/binary.js","/Users/taozhi/learning/node-sql-parser/src/with.js","/Users/taozhi/learning/node-sql-parser/src/show.js","/Users/taozhi/learning/node-sql-parser/src/parser.single.js","/Users/taozhi/learning/node-sql-parser/src/sql.js","/Users/taozhi/learning/node-sql-parser/src/parser.js","/Users/taozhi/learning/node-sql-parser/pegjs/bigquery.pegjs","/Users/taozhi/learning/node-sql-parser/index.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/global.js","/Users/taozhi/learning/node-sql-parser/node_modules/big-integer/BigInteger.js","/Users/taozhi/learning/node-sql-parser/(webpack)/buildin/module.js"],"names":["root","factory","exports","module","define","amd","a","i","window","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","DEFAULT_OPT","database","PARSER_NAME","type","parserOpt","commonOptionConnector","keyword","action","opt","toUpperCase","connector","str","createValueExpr","Array","isArray","map","Error","createBinaryExpr","operator","left","right","expr","escape","getParserOpt","setParserOpt","topToSQL","percent","prefix","columnIdentifierToSql","ident","toLowerCase","identifierToSql","isDual","commonTypeValue","result","symbol","push","toUpper","val","hasVal","literalToSQL","literal","parentheses","suffix","collate","join","replaceParams","ast","params","replaceParamsInner","keys","filter","forEach","JSON","parse","stringify","onPartitionsToSQL","partitions","partition","start","end","dataTypeToSQL","dataType","length","scale","arrayStructTypeToSQL","definition","anglebracket","dataTypeUpper","field","field_name","field_type","commentToSQL","comment","triggerEventToSQL","events","event","kw","args","kwArgs","columns","columnRefToSQL","returningToSQL","returning","commonKeywordArgsToSQL","autoIncreatementToSQL","autoIncreatement","seed","increment","columnOrderListToSQL","columnOrderList","columnOrderToSQL","arrayStructValueToSQL","exprList","expr_list","columnsToSQL","arrayPath","array_path","brackets","col","exprToSQL","arrayExprListToSQL","arrayStructExprToSQL","exprToSQLConvertFn","alter","alterExprToSQL","aggr_func","over","orderby","within_group_orderby","fnName","overStr","overToSQL","distinct","separator","distinctSQL","orderOrPartitionByToSQL","withinGroup","window_func","windowFuncToSQL","assign","leftVar","rightVal","binary_expr","binaryToSQL","case","res","conditions","len","cond","cast","castToSQL","column_ref","datatype","extract","extractFunToSQL","function","funcToSQL","insert","unionToSQL","interval","intervalExpr","unit","show","showToSQL","struct","namedWindowExprListToSQL","varToSQL","members","varName","exprOrigin","Reflect","deleteProperty","getExprListSQL","expressions","upperPrefix","info","select","_next","selectToSQL","unary_expr","unarExpr","space","operatorToSQL","as","column","in_expr","sql","pivotOperatorToSQL","tableToSQL","tableInfo","unnestExpr","withOffset","with_offset","unnestToSQL","table","db","schema","tablesample","schemaStr","tableName","values","valueSQL","valuesExpr","valuesToSQL","split","slice","tableSampleSQL","repeatable","tablesToSQL","tables","baseTable","clauses","joinExpr","on","using","tableOptionToSQL","tableOption","array_index","arrow","offset","columnOffsetToSQL","number","columnDataType","columnReferenceDefinitionToSQL","referenceDefinition","reference","match","onDelete","on_delete","onUpdate","on_update","columnOrder","nulls","opclass","order","columnDefinitionToSQL","columnDefinition","columnOpt","nullable","characterSet","character_set","check","storage","defaultOpt","default_val","autoIncrement","auto_increment","uniquePrimary","unique_or_primary","columnFormat","column_format","reference_definition","constraintDefinitionToSQL","columnOption","getDual","star","columnsStr","has","test","columnToSQL","composePrefixValSuffix","stmt","limitToSQL","limit","fetch","seperator","limitOffsetToSQL","commonCmdToSQL","options","lockUnlockToSQL","tableStmt","lockType","lock_type","tableInfoTemp","lockMode","lock_mode","nowait","lockInfo","pgLock","execVariablesToSQL","typeToSQLFn","alterToSQL","analyze","attach","createToSQL","delete","from","where","columnInfo","addition","exec","parameters","update","updateToSQL","insertToSQL","drop","truncate","replace","declare","dec","at","declareInfo","createDefinitionToSQL","use","rename","renameInfo","storeProcessCall","desc","set","lock","unlock","fun","_orderby","_limit","unionKeyword","union","bigQueryToSQL","withExpr","withToSQL","multipleToSQL","astInfo","createDefinition","create_definitions","firstAfter","first_after","ifNotExists","if_not_exists","oldColumn","old_column","resource","indexTypeAndOptionToSQL","indexTypeToSQL","indexType","indexOptionToSQL","indexOpt","upperType","indexOptArray","shift","indexOptionListToSQL","indexOptList","indexDefinition","constraintType","constraint_type","index_type","index_options","indexOptions","definitionSQL","indexDefinitionToSQL","indexSQL","index","target","expression","alias","tail","symbolChar","arrayDimension","array","arrayDimensionToSymbol","castType","cast_type","source","args_parentheses","collateStr","asWindowSpec","as_window_specification","asWindowSpecToSQL","selectIntoToSQL","into","position","intoType","asStructVal","as_struct_val","for_sys_time_as_of","forSystem","forUpdate","for_update","groupby","having","parentheses_symbol","top","windowInfo","withInfo","distinctToSQL","intoSQL","like","temporary","tableOptions","table_options","ignoreReplace","ignore_replace","queryExpr","query_expr","likeType","likeTable","likeTableName","createTableToSQL","constraint","constraintKw","constraint_kw","deferrable","execute","for_each","location","when","createTriggerToSQL","extension","withName","version","createExtensionToSQL","concurrently","fileStream","filestream_on","include","indexColumns","index_columns","indexUsing","index_using","algorithmOpt","algorithm_option","lockOpt","lock_option","onKw","on_kw","tablespace","withBeforeWhere","with_before_where","withIndexOpt","includeColumns","createIndexToSQL","sequence","createSequenceToSQL","createDatabaseToSQL","algorithm","definer","sqlSecurity","sql_security","view","withClause","viewName","createViewToSQL","windowSpec","window_specification","partitionby","windowFrame","window_frame_clause","windowSpecificationToSQL","namedWindowExprToSQL","namedWindowExpr","namedWindowExprInfo","constructArgsList","consider_nulls","argsList","isConsidernulls","isConsiderNullsInArgs","partitionToSQL","partitionArr","onDuplicateUpdate","on_duplicate_update","duplicateSet","setToSQL","sets","setItem","constraintDefinition","enforced","constraintSQL","rstr","isBetween","isRecursive","recursive","withExprStr","cte","showExpr","showEventExpr","inClause","showCharacterSetExpr","op","showLikeAndWhereToSQL","showGrantsForExpr","forExpr","user","host","role_list","userAndHost","role","showGrantsForUser","surportedTypes","checkSupported","includes","toSQL","astToSQL","go","goToSQL","go_next","sqlItem","Parser","this","typeCase","parsers","trim","whiteList","checkFun","authorityList","hasAuthority","denyInfo","authority","hasCorrespondingAuthority","whiteAuthority","regex","RegExp","tableList","columnList","BigInt","peg$SyntaxError","message","expected","found","captureStackTrace","child","parent","ctor","constructor","peg$subclass","buildMessage","DESCRIBE_EXPECTATION_FNS","expectation","literalEscape","text","escapedParts","parts","classEscape","inverted","any","other","description","hex","ch","charCodeAt","toString","j","descriptions","sort","describeExpected","describeFound","SyntaxError","input","peg$result","peg$FAILED","peg$startRuleFunctions","peg$parsestart","peg$startRuleFunction","peg$c3","peg$literalExpectation","peg$c5","peg$c10","peg$c12","peg$c17","head","createList","peg$c21","peg$c23","peg$c25","peg$c27","peg$c32","peg$c42","peg$c48","unshift","tableAlias","columnListTableAlias","clear","add","refreshColumnList","peg$c70","peg$c72","peg$c74","peg$c76","peg$c78","peg$c83","peg$c87","peg$c102","createBinaryExprChain","peg$c104","peg$c106","peg$c110","nk","peg$c113","peg$c115","peg$c117","peg$c119","peg$c121","peg$c123","peg$c131","peg$c133","peg$c136","peg$c138","peg$c140","peg$c149","reservedMap","peg$c153","peg$c154","peg$c155","peg$classExpectation","peg$c156","chars","peg$c158","peg$c159","peg$c160","peg$c162","peg$c163","peg$c164","peg$c168","peg$c169","peg$c170","peg$c171","peg$c172","peg$c173","peg$c174","peg$c176","peg$c181","peg$c196","peg$c198","peg$c200","peg$c202","peg$c204","peg$c206","peg$c208","peg$c210","peg$c212","peg$c214","peg$c216","peg$c218","peg$c220","peg$c222","peg$c224","peg$c226","peg$c228","peg$c230","peg$c232","peg$c234","peg$c236","peg$c248","peg$c251","ca","peg$c252","peg$c253","peg$c254","peg$c255","peg$c257","peg$c260","peg$c263","peg$c266","peg$c269","peg$c272","peg$c275","peg$c278","peg$c281","peg$c284","peg$c287","peg$c289","peg$c290","peg$c299","peg$c303","peg$c304","peg$c305","peg$c306","peg$c307","peg$c308","peg$c309","peg$c310","peg$c313","peg$c319","peg$c323","peg$c330","peg$c340","peg$c345","peg$c362","peg$c364","peg$c366","peg$c368","peg$c370","peg$c372","peg$c374","peg$c376","peg$c378","peg$c380","peg$c382","peg$c387","peg$c389","peg$c391","peg$c393","peg$c395","peg$c397","peg$c399","peg$c401","peg$c403","peg$c406","peg$c408","peg$c411","peg$c414","peg$c417","peg$c420","peg$c423","peg$c426","peg$c429","peg$c432","peg$c435","peg$c438","peg$c441","peg$c444","peg$c447","peg$c450","peg$c453","peg$c456","peg$c459","peg$c462","peg$c468","peg$c470","peg$c472","peg$c474","peg$c476","peg$c478","peg$c480","peg$c483","peg$c486","peg$c492","peg$c498","peg$c501","peg$c504","peg$c507","peg$c510","peg$c516","peg$c525","peg$c528","peg$c549","peg$c555","peg$c558","peg$c561","peg$c564","peg$c567","peg$c576","peg$c582","peg$c591","peg$c594","peg$c597","peg$c609","peg$c645","peg$c647","peg$c649","peg$c651","peg$c653","peg$c655","peg$c657","peg$c659","peg$c661","peg$c663","peg$c664","peg$c665","peg$c666","peg$c670","peg$c672","peg$currPos","peg$posDetailsCache","line","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","startRule","ignoreCase","peg$computePosDetails","pos","details","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","peg$fail","peg$buildStructuredError","s0","s2","peg$parse__","s1","s3","s4","s5","s6","s7","peg$parsequery_statement","peg$parseSEMICOLON","cur","peg$c1","peg$parsemultiple_stmt","s9","peg$parsewith_clause","peg$parseunion_stmt","peg$parseorder_by_clause","peg$parselimit_clause","with","peg$parsequery_expr","peg$parseselect_stmt","peg$parseset_op","substr","peg$parseident_start","peg$parseKW_UNION","peg$parseKW_ALL","peg$parseKW_DISTINCT","u","peg$c13","peg$parseunion_stmt_nake","peg$c15","s8","s10","s12","s14","s16","s18","s20","s22","s24","s26","peg$parseKW_SELECT","peg$parse___","peg$parseKW_AS","peg$parseKW_STRUCT","peg$parseKW_VALUE","k","peg$parsestruct_value","peg$parsecolumn_clause","peg$parseKW_FROM","peg$parsetable_base","peg$parsetable_ref","peg$parsetable_ref_list","s11","s15","peg$parseKW_PIVOT","peg$parseLPAREN","peg$parseaggr_func","peg$parsealias_clause","peg$parseCOMMA","el","peg$c178","peg$parseaggr_func_list","peg$parsecolumn_ref","peg$parsein_op_right","peg$parseRPAREN","peg$parsepivot_operator","peg$parsefrom_clause","peg$parseexpr","peg$parsefor_sys_time_as_of","peg$parseKW_WHERE","peg$parseor_and_where_expr","peg$parsewhere_clause","peg$parseKW_GROUP","peg$parseKW_BY","peg$parseexpr_list","peg$parsegroup_by_clause","peg$parseKW_HAVING","peg$parsehaving_clause","peg$parseKW_WINDOW","peg$parsenamed_window_expr","peg$parsenamed_window_expr_list","peg$parsewindow_clause","sv","f","fs","w","g","h","win","peg$c19","peg$parseselect_stmt_nake","peg$parseKW_WITH","peg$parsecte_definition","peg$parseliteral_string","peg$parseident_name","peg$parseSTAR","peg$parsecolumns_list","peg$parsecolumn_list_item","peg$parsecolumn_offset_expr","peg$parseLBRAKE","peg$parseKW_OFFSET","peg$parseKW_ORDINAL","peg$parseliteral_numeric","peg$parseRBRAKE","peg$parseident","peg$parseDOT","tbl","pro","mid","peg$c38","peg$parseexpr_alias","peg$c151","peg$parsequoted_ident","peg$parsealias_ident","peg$parsefrom_unnest_item","peg$parsewith_offset","s13","peg$parsejoin_op","peg$parseKW_USING","peg$parseon_clause","peg$c51","peg$c52","peg$parsetable_join","peg$parsetable_name","peg$c54","peg$parseKW_LEFT","peg$parseKW_OUTER","peg$parseKW_JOIN","peg$parseKW_RIGHT","peg$parseKW_FULL","peg$parseKW_CROSS","peg$parseKW_INNER","peg$c59","project","dt","obj","peg$c60","peg$c61","peg$parseKW_ON","peg$parseas_window_specification","peg$parsepartition_by_clause","peg$parseKW_BETWEEN","peg$parseKW_AND","peg$parseKW_ROWS","peg$parsewindow_frame_following","peg$parsewindow_frame_preceding","peg$c81","peg$parsewindow_frame_clause","peg$parsewindow_specification","peg$parsewindow_frame_value","peg$parsewindow_frame_current_row","peg$parseKW_PARTITION","peg$parseKW_ORDER","peg$parseorder_by_element","peg$parseorder_by_list","peg$parseKW_DESC","peg$parseKW_ASC","e","peg$c92","peg$parsenumber_or_param","peg$parseparam","peg$parseKW_LIMIT","i1","peg$c93","peg$c94","peg$parsestruct_type","peg$parsestruct_expr","peg$parseprimary","peg$parseLOGIC_OPERATOR","peg$parselogic_operator_expr","peg$parseand_expr","peg$parseKW_OR","peg$parseor_expr","peg$parseadditive_operator","createUnaryExpr","peg$parseunary_expr","peg$parsearray_type","peg$parseKW_ARRAY","peg$parseliteral","peg$parseliteral_list","peg$c96","peg$parseparentheses_expr","peg$parseparentheses_list_expr","peg$c97","peg$parsearray_expr","peg$c101","peg$parsenot_expr","peg$parsecomparison_expr","peg$parseKW_NOT","peg$parseKW_EXISTS","peg$parseexists_op","peg$parseexists_expr","rh","peg$parseadditive_expr","peg$parsearithmetic_comparison_operator","peg$parsearithmetic_op_right","peg$parsebetween_or_not_between_op","peg$parsebetween_op_right","peg$parseKW_IS","peg$c125","peg$parseis_op_right","peg$parseKW_LIKE","peg$parselike_op","peg$parselike_op_right","peg$parsecomparison_op_right","peg$parsein_op","peg$parseKW_IN","peg$c129","peg$parsemultiplicative_expr","peg$parsemultiplicative_operator","list","s17","peg$parseKW_CAST","peg$parsedata_type","peg$parseKW_DECIMAL","peg$parseint","precision","peg$c240","peg$c241","peg$parseKW_SIGNED","peg$parseKW_UNSIGNED","peg$parsesignedness","peg$parseKW_INTEGER","peg$c242","peg$parsecast_expr","peg$parseKW_EXTRACT","peg$parseextract_filed","peg$parseKW_TIMESTAMP","peg$parseKW_INTERVAL","peg$parseKW_TIME","peg$parseKW_DATE","peg$c238","peg$parseextract_func","peg$c194","peg$parseproc_func_name","peg$parseover_partition","bc","peg$parseKW_CURRENT_DATE","peg$parseKW_CURRENT_TIME","peg$parseKW_CURRENT_TIMESTAMP","peg$parseKW_SESSION_USER","peg$parsescalar_func","peg$c192","peg$parseon_update_current_timestamp","up","peg$c193","peg$parsefunc_call","peg$parseKW_CASE","peg$parsecase_when_then","peg$parsecase_else","peg$parseKW_END","condition_list","otherwise","peg$c144","peg$parsecase_expr","peg$parseKW_UNIT_YEAR","peg$parseKW_UNIT_MONTH","peg$parseKW_UNIT_DAY","peg$parseKW_UNIT_HOUR","peg$parseKW_UNIT_MINUTE","peg$parseKW_UNIT_SECOND","peg$parseinterval_unit","peg$parseinterval_expr","peg$parseKW_WHEN","peg$parseKW_THEN","peg$parseKW_ELSE","peg$parsecolumn_name","peg$parsecolumn_without_kw","peg$parsecolumn","peg$c148","charAt","peg$parsedouble_quoted_ident","peg$parsesingle_quoted_ident","peg$parsebackticks_quoted_ident","peg$parsecolumn_part","peg$parseident_part","peg$parseKW_COUNT","peg$parsestar_expr","or","peg$c189","peg$parsecount_arg","peg$parseaggr_fun_count","peg$parseKW_SUM","peg$parseKW_MAX","peg$parseKW_MIN","peg$parseKW_AVG","peg$parseKW_SUM_MAX_MIN_AVG","peg$parseaggr_fun_smma","peg$c183","peg$parseKW_OVER","peg$parseKW_TRUE","peg$parseKW_FALSE","peg$parseliteral_bool","peg$parseKW_NULL","peg$parseliteral_null","peg$parseKW_DATETIME","peg$parsesingle_char","peg$parsesingle_quote_char","peg$parseliteral_datetime","peg$c250","peg$parseescape_char","h1","h2","h3","h4","peg$parsehexDigit","String","fromCharCode","parseInt","peg$parsefrac","peg$parseexp","int_","frac","numStr","isBigInt","parseFloat","peg$c293","exp","peg$c294","peg$c295","peg$parsenumber","peg$parsedigits","peg$parsedigit","sign","peg$parsee","peg$parseLANGLE","peg$parseRANGLE","peg$parseOPERATOR_CONCATENATION","peg$parseOPERATOR_AND","peg$parsewhitespace","peg$parsecomment","peg$parsechar","peg$parseblock_comment","peg$parseEOL","peg$parseline_comment","peg$parsepound_sign_comment","peg$parseEOF","peg$parsedata_type_list","peg$parsedata_type_alias","DATA_TYPES","peg$c669","peg$parseKW_STRING","peg$parsecharacter_string_type","peg$parseKW_NUMERIC","peg$parseKW_INT_64","peg$parseKW_FLOAT_64","peg$parsenumeric_type","peg$parsedatetime_type","peg$parseKW_BYTES","peg$parseKW_BOOL","peg$parseKW_GEOGRAPHY","peg$parsebool_byte_geography_type","numberStr","previousMaxSafe","Number","MAX_SAFE_INTEGER","po","queryTableAlias","newColumnsList","Set","global","NodeSQLParser","util","Function","BASE","MAX_INT","MAX_INT_ARR","smallToArray","supportsNativeBigInt","Integer","v","radix","alphabet","caseSensitive","parseBase","parseValue","BigInteger","isSmall","SmallInteger","NativeBigInt","isPrecise","Math","floor","arrayToSmall","arr","compareAbs","createArray","x","ceil","b","sum","l_a","l_b","carry","base","addAny","addSmall","subtract","difference","a_l","b_l","borrow","subtractSmall","multiplyLong","product","a_i","multiplySmall","shiftLeft","concat","multiplySmallAndArray","square","divModSmall","lambda","q","remainder","divisor","quotient","divModAny","self","negate","abs","comparison","quotientDigit","divisorMostSignificantDigit","divMod1","guess","xlen","highx","highy","part","reverse","divMod2","qSign","mod","mSign","isBasicPrime","isUnit","equals","isEven","isDivisibleBy","lesser","millerRabinTest","nPrev","prev","divide","next","bigInt","modPow","plus","subtractAny","minus","small","multiply","l1","l2","multiplyKaratsuba","y","max","ac","bd","abcd","times","_multiplyBySmall","divmod","pow","_0","_1","_2","isNegative","isZero","modInv","isPositive","isOdd","compare","Infinity","compareTo","eq","notEquals","neq","greater","gt","lt","greaterOrEquals","geq","lesserOrEquals","leq","isPrime","strict","bits","bitLength","logN","log","toJSNumber","isProbablePrime","iterations","rng","randBetween","lastT","lastR","zero","newT","one","newR","powersOfTwo","powers2Length","highestPower2","shift_isSmall","bitwise","fn","xSign","ySign","xRem","not","yRem","xDigit","yDigit","xDivMod","yDivMod","shiftRight","remQuo","and","xor","roughLOB","min","gcd","integerLogarithm","tmp","absBase","alphabetValues","digits","parseBaseFromArray","toBase","apply","valueOf","neg","out","digit","toBaseString","parseStringValue","decimalPlace","indexOf","parseNumberValue","toArray","toJSON","minusOne","lcm","isInstance","usedRNG","random","low","range","restricted","fromArray","webpackPolyfill","deprecate","paths","children"],"mappings":"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","file":"bigquery.umd.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(window, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 21);\n","import { columnRefToSQL, columnOrderToSQL } from './column'\n\n// const escapeMap = {\n//   '\\0'   : '\\\\0',\n//   '\\''   : '\\\\\\'',\n//   '\"'    : '\\\\\"',\n//   '\\b'   : '\\\\b',\n//   '\\n'   : '\\\\n',\n//   '\\r'   : '\\\\r',\n//   '\\t'   : '\\\\t',\n//   '\\x1a' : '\\\\Z',\n//   // '\\\\'   : '\\\\\\\\',\n// }\n\nconst DEFAULT_OPT = {\n  database : PARSER_NAME || 'mysql',\n  type     : 'table',\n}\n\nlet parserOpt = DEFAULT_OPT\n\nfunction commonOptionConnector(keyword, action, opt) {\n  if (!opt) return\n  if (!keyword) return action(opt)\n  return `${keyword.toUpperCase()} ${action(opt)}`\n}\n\nfunction connector(keyword, str) {\n  if (!str) return\n  return `${keyword.toUpperCase()} ${str}`\n}\n\n/**\n * @param {(Array|boolean|string|number|null)} value\n * @return {Object}\n */\nfunction createValueExpr(value) {\n  const type = typeof value\n  if (Array.isArray(value)) return { type: 'expr_list', value: value.map(createValueExpr) }\n  if (value === null) return { type: 'null', value: null }\n  switch (type) {\n    case 'boolean':\n      return { type: 'bool', value }\n    case 'string':\n      return { type: 'string', value }\n    case 'number':\n      return { type: 'number', value }\n    default:\n      throw new Error(`Cannot convert value \"${type}\" to SQL`)\n  }\n}\n\n/**\n * @param operator\n * @param left\n * @param right\n * @return {Object}\n */\nfunction createBinaryExpr(operator, left, right) {\n  const expr = { operator, type: 'binary_expr' }\n  expr.left = left.type ? left : createValueExpr(left)\n  if (operator === 'BETWEEN' || operator === 'NOT BETWEEN') {\n    expr.right = {\n      type  : 'expr_list',\n      value : [createValueExpr(right[0]), createValueExpr(right[1])],\n    }\n    return expr\n  }\n  expr.right = right.type ? right : createValueExpr(right)\n  return expr\n}\n\n/**\n * Replace param expressions\n *\n * @param {Object} ast    - AST object\n * @param {Object} keys   - Keys = parameter names, values = parameter values\n * @return {Object}     - Newly created AST object\n */\nfunction replaceParamsInner(ast, keys) {\n  Object.keys(ast)\n    .filter(key => {\n      const value = ast[key]\n      return Array.isArray(value) || (typeof value === 'object' && value !== null)\n    })\n    .forEach(key => {\n      const expr = ast[key]\n      if (!(typeof expr === 'object' && expr.type === 'param')) return replaceParamsInner(expr, keys)\n      if (typeof keys[expr.value] === 'undefined') throw new Error(`no value for parameter :${expr.value} found`)\n      ast[key] = createValueExpr(keys[expr.value])\n      return null\n    })\n\n  return ast\n}\n\nfunction escape(str) {\n  return str\n  // const res = []\n  // for (let i = 0, len = str.length; i < len; ++i) {\n  //   let char = str[i]\n  //   const escaped = escapeMap[char]\n  //   if (escaped) char = escaped\n  //   res.push(char)\n  // }\n  // return res.join('')\n}\n\nfunction getParserOpt() {\n  return parserOpt\n}\n\nfunction setParserOpt(opt) {\n  parserOpt = opt\n}\n\nfunction topToSQL(opt) {\n  if (!opt) return\n  const { value, percent } = opt\n  const prefix = `TOP ${value}`\n  if (!percent) return prefix\n  return `${prefix} ${percent.toUpperCase()}`\n}\n\nfunction columnIdentifierToSql(ident) {\n  const { database } = getParserOpt()\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'postgresql':\n    case 'db2':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'mysql':\n    case 'mariadb':\n    case 'bigquery':\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction identifierToSql(ident, isDual) {\n  const { database } = getParserOpt()\n  if (isDual === true) return `'${ident}'`\n  if (!ident) return\n  switch (database && database.toLowerCase()) {\n    case 'mysql':\n    case 'mariadb':\n    case 'sqlite':\n      return `\\`${ident}\\``\n    case 'postgresql':\n      return `\"${ident}\"`\n    case 'transactsql':\n      return `[${ident}]`\n    case 'bigquery':\n    case 'db2':\n      return ident\n    default:\n      return `\\`${ident}\\``\n  }\n}\n\nfunction commonTypeValue(opt) {\n  const result = []\n  if (!opt) return result\n  const { type, symbol, value } = opt\n  result.push(type.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(value.toUpperCase())\n  return result\n}\n\nfunction toUpper(val) {\n  if (!val) return\n  return val.toUpperCase()\n}\n\nfunction hasVal(val) {\n  return val\n}\n\nfunction literalToSQL(literal) {\n  if (!literal) return\n  const { type, parentheses, value } = literal\n  let str = value\n  switch (type) {\n    case 'backticks_quote_string':\n      str = `\\`${escape(value)}\\``\n      break\n    case 'string':\n      str = `'${escape(value)}'`\n      break\n    case 'regex_string':\n      str = `r\"${escape(value)}\"`\n      break\n    case 'hex_string':\n      str = `X'${escape(value)}'`\n      break\n    case 'double_quote_string':\n      str = `\"${escape(value)}\"`\n      break\n    case 'single_quote_string':\n      str = `'${value}'`\n      break\n    case 'boolean':\n    case 'bool':\n      str = value ? 'TRUE' : 'FALSE'\n      break\n    case 'null':\n      str = 'NULL'\n      break\n    case 'star':\n      str = '*'\n      break\n    case 'param':\n      str = `:${value}`\n      break\n    case 'origin':\n      str = value.toUpperCase()\n      break\n    case 'date':\n    case 'datetime':\n    case 'time':\n    case 'timestamp':\n      str = `${type.toUpperCase()} '${value}'`\n      break\n    case 'var_string':\n      str = `N'${escape(value)}'`\n      break\n    default:\n      break\n  }\n  const { prefix, suffix } = literal\n  const result = []\n  if (prefix) result.push(toUpper(prefix))\n  result.push(str)\n  if (suffix && suffix.collate) result.push(commonTypeValue(suffix.collate).join(' '))\n  str = result.join(' ')\n  return parentheses ? `(${str})` : str\n}\n\nfunction replaceParams(ast, params) {\n  return replaceParamsInner(JSON.parse(JSON.stringify(ast)), params)\n}\n\nfunction onPartitionsToSQL(expr) {\n  const { type, partitions } = expr\n  const result = [\n    toUpper(type),\n    `(${partitions.map(partition => {\n      const { type: partitionType } = partition\n      if (!(partitionType === 'range')) return literalToSQL(partition)\n      const { start, end, symbol } = partition\n      return `${literalToSQL(start)} ${toUpper(symbol)} ${literalToSQL(end)}`\n    }).join(', ')})`,\n  ]\n  return result.join(' ')\n}\n\nfunction dataTypeToSQL(expr) {\n  const { dataType, length, parentheses, scale, suffix } = expr\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  if (suffix && suffix.length) str += ` ${suffix.join(' ')}`\n  return `${dataType}${str}`\n}\n\nfunction arrayStructTypeToSQL(expr) {\n  if (!expr) return\n  const { dataType, definition, anglebracket } = expr\n  const dataTypeUpper = toUpper(dataType)\n  const isNotArrayOrStruct = dataTypeUpper !== 'ARRAY' && dataTypeUpper !== 'STRUCT'\n  if (isNotArrayOrStruct) return dataTypeUpper\n  const result = definition && definition.map(field => {\n    const {\n      field_name: fieldName, field_type: fieldType,\n    } = field\n    const fieldResult = [fieldName, arrayStructTypeToSQL(fieldType)]\n    return fieldResult.filter(hasVal).join(' ')\n  }).join(', ')\n  return anglebracket ? `${dataTypeUpper}<${result}>` : `${dataTypeUpper} ${result}`\n}\n\nfunction commentToSQL(comment) {\n  if (!comment) return\n  const result = []\n  const { keyword, symbol, value } = comment\n  result.push(keyword.toUpperCase())\n  if (symbol) result.push(symbol)\n  result.push(literalToSQL(value))\n  return result.join(' ')\n}\n\nfunction triggerEventToSQL(events) {\n  return events.map(event => {\n    const { keyword: kw, args } = event\n    const result = [toUpper(kw)]\n    if (args) {\n      const { keyword: kwArgs, columns } = args\n      result.push(toUpper(kwArgs), columns.map(columnRefToSQL).join(', '))\n    }\n    return result.join(' ')\n  }).join(' OR ')\n}\n\nfunction returningToSQL(returning) {\n  if (!returning) return ''\n  const { columns } = returning\n  return ['RETURNING', columns.map(columnRefToSQL).filter(hasVal).join(', ')].join(' ')\n}\n\nfunction commonKeywordArgsToSQL(kwArgs) {\n  if (!kwArgs) return []\n  return [toUpper(kwArgs.keyword), toUpper(kwArgs.args)]\n}\n\nfunction autoIncreatementToSQL(autoIncreatement) {\n  if (!autoIncreatement || typeof autoIncreatement === 'string') return toUpper(autoIncreatement)\n  const { keyword, seed, increment, parentheses } = autoIncreatement\n  let result = toUpper(keyword)\n  if (parentheses) result += `(${literalToSQL(seed)}, ${literalToSQL(increment)})`\n  return result\n}\n\nfunction columnOrderListToSQL(columnOrderList) {\n  if (!columnOrderList) return\n  return columnOrderList.map(columnOrderToSQL).filter(hasVal).join(', ')\n}\n\nexport {\n  arrayStructTypeToSQL, autoIncreatementToSQL,\n  columnOrderListToSQL, commonKeywordArgsToSQL, commonOptionConnector,\n  connector, commonTypeValue,commentToSQL, createBinaryExpr,\n  createValueExpr, dataTypeToSQL, DEFAULT_OPT, escape, literalToSQL, columnIdentifierToSql,\n  identifierToSql, onPartitionsToSQL, replaceParams, returningToSQL,\n  hasVal, setParserOpt, toUpper, topToSQL, triggerEventToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { arrayStructTypeToSQL, hasVal, toUpper } from './util'\n\nfunction arrayExprListToSQL(expr) {\n  const {\n    array_path: arrayPath,\n    brackets,\n    expr_list: exprList,\n    parentheses,\n  } = expr\n  if (!exprList) return `[${columnsToSQL(arrayPath)}]`\n  if (Array.isArray(exprList)) return `[${exprList.map(col => `(${columnsToSQL(col)})`).filter(hasVal).join(', ')}]`\n  const result = exprToSQL(exprList)\n  if (brackets) return `[${result}]`\n  return parentheses ? `(${result})` : result\n}\n\nfunction arrayStructValueToSQL(expr) {\n  const {\n    expr_list: exprList,\n    type,\n  } = expr\n  switch (toUpper(type)) {\n    case 'STRUCT':\n      return `(${columnsToSQL(exprList)})`\n    case 'ARRAY':\n      return arrayExprListToSQL(expr)\n    default:\n      return ''\n  }\n}\n\nfunction arrayStructExprToSQL(expr) {\n  const { definition, keyword } = expr\n  const result = [toUpper(keyword)]\n  if (definition && typeof definition === 'object') {\n    result.length = 0\n    result.push(arrayStructTypeToSQL(definition))\n  }\n  result.push(arrayStructValueToSQL(expr))\n  return result.filter(hasVal).join('')\n}\n\nexport {\n  arrayStructExprToSQL,\n  arrayStructValueToSQL,\n}\n","import { literalToSQL, toUpper, connector, dataTypeToSQL } from './util'\nimport { alterExprToSQL } from './alter'\nimport { aggrToSQL } from './aggregation'\nimport { assignToSQL } from './assign'\nimport { binaryToSQL } from './binary'\nimport { caseToSQL } from './case'\nimport { columnRefToSQL } from './column'\nimport { castToSQL, extractFunToSQL, funcToSQL } from './func'\nimport { intervalToSQL } from './interval'\nimport { selectToSQL } from './select'\nimport { showToSQL } from './show'\nimport { arrayStructExprToSQL } from './array-struct'\nimport { unionToSQL } from './union'\nimport { namedWindowExprListToSQL, windowFuncToSQL } from './window'\n\nconst exprToSQLConvertFn = {\n  alter       : alterExprToSQL,\n  aggr_func   : aggrToSQL,\n  window_func : windowFuncToSQL,\n  'array'     : arrayStructExprToSQL,\n  assign      : assignToSQL,\n  binary_expr : binaryToSQL,\n  case        : caseToSQL,\n  cast        : castToSQL,\n  column_ref  : columnRefToSQL,\n  datatype    : dataTypeToSQL,\n  extract     : extractFunToSQL,\n  function    : funcToSQL,\n  insert      : unionToSQL,\n  interval    : intervalToSQL,\n  show        : showToSQL,\n  struct      : arrayStructExprToSQL,\n  'window'    : namedWindowExprListToSQL,\n}\n\nfunction varToSQL(expr) {\n  const { prefix = '@', name, members, keyword, suffix } = expr\n  const val = []\n  if (keyword) val.push(keyword)\n  const varName = members && members.length > 0 ? `${name}.${members.join('.')}` : name\n  let result = `${prefix || ''}${varName}`\n  if (suffix) result += suffix\n  val.push(result)\n  return val.join(' ')\n}\n\nexprToSQLConvertFn.var = varToSQL\n\nfunction exprToSQL(exprOrigin) {\n  if (!exprOrigin) return\n  const expr = exprOrigin\n  if (exprOrigin.ast) {\n    const { ast } = expr\n    Reflect.deleteProperty(expr, ast)\n    for (const key of Object.keys(ast)) {\n      expr[key] = ast[key]\n    }\n  }\n  return exprToSQLConvertFn[expr.type] ? exprToSQLConvertFn[expr.type](expr) : literalToSQL(expr)\n}\n\nfunction unaryToSQL(unarExpr) {\n  const { operator, parentheses, expr } = unarExpr\n  const space = (operator === '-' || operator === '+') ? '' : ' '\n  const str = `${operator}${space}${exprToSQL(expr)}`\n  return parentheses ? `(${str})` : str\n}\n\nfunction getExprListSQL(exprList) {\n  if (!exprList) return []\n  return exprList.map(exprToSQL)\n}\n\nexprToSQLConvertFn.expr_list = expr => {\n  const str = getExprListSQL(expr.value)\n  return expr.parentheses ? `(${str.join(', ')})` : str\n}\n\nexprToSQLConvertFn.select = expr => {\n  const str = typeof expr._next === 'object' ? unionToSQL(expr) : selectToSQL(expr)\n  return expr.parentheses ? `(${str})` : str\n}\n\nexprToSQLConvertFn.unary_expr = unaryToSQL\n\nfunction orderOrPartitionByToSQL(expr, prefix) {\n  if (!Array.isArray(expr)) return ''\n  let expressions = []\n  const upperPrefix = toUpper(prefix)\n  switch (upperPrefix) {\n    case 'ORDER BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)} ${info.type}`)\n      break\n    case 'PARTITION BY':\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n    default:\n      expressions = expr.map(info => `${exprToSQL(info.expr)}`)\n      break\n  }\n  return connector(upperPrefix, expressions.join(', '))\n}\n\nexport {\n  exprToSQLConvertFn,\n  exprToSQL,\n  getExprListSQL,\n  varToSQL,\n  orderOrPartitionByToSQL,\n}\n","import { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { hasVal } from './util'\nimport { overToSQL } from './over'\n\nfunction aggrToSQL(expr) {\n  /** @type {Object} */\n  const { args, over, orderby, within_group_orderby } = expr\n  let str = exprToSQL(args.expr)\n  const fnName = expr.name\n  const overStr = overToSQL(over)\n  if (args.distinct) {\n    let separator = ' '\n    const distinctSQL = ['DISTINCT', '', str]\n    if (args.parentheses) {\n      separator = ''\n      distinctSQL[1] = '('\n      distinctSQL.push(')')\n    }\n    str = distinctSQL.filter(hasVal).join(separator)\n  }\n  if (args.orderby) str = `${str} ${orderOrPartitionByToSQL(args.orderby, 'order by')}`\n  if (orderby) str = `${str} ${orderOrPartitionByToSQL(orderby, 'order by')}`\n  const withinGroup = within_group_orderby ? `WITHIN GROUP (${orderOrPartitionByToSQL(within_group_orderby, 'order by')})` : ''\n  return [`${fnName}(${str})`, withinGroup, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  aggrToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction assignToSQL(expr) {\n  /** @type {Object} */\n  const { left, right, symbol, keyword } = expr\n  left.keyword = keyword\n  const leftVar = exprToSQL(left)\n  const rightVal = exprToSQL(right)\n  return `${leftVar} ${symbol} ${rightVal}`\n}\n\nexport {\n  assignToSQL,\n}\n","import { exprToSQL } from './expr'\n\nfunction caseToSQL(expr) {\n  const res = ['CASE']\n  const conditions = expr.args\n\n  if (expr.expr) res.push(exprToSQL(expr.expr))\n\n  for (let i = 0, len = conditions.length; i < len; ++i) {\n    res.push(conditions[i].type.toUpperCase())\n    if (conditions[i].cond) {\n      res.push(exprToSQL(conditions[i].cond))\n      res.push('THEN')\n    }\n    res.push(exprToSQL(conditions[i].result))\n  }\n\n  res.push('END')\n\n  return res.join(' ')\n}\n\nexport {\n  caseToSQL,\n}\n","import { toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction intervalToSQL(intervalExpr) {\n  const { expr, unit } = intervalExpr\n  const result = ['INTERVAL', exprToSQL(expr), toUpper(unit)]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  intervalToSQL,\n}\n","import { binaryToSQL } from './binary'\nimport { columnRefToSQL } from './column'\nimport { exprToSQL } from './expr'\nimport { valuesToSQL } from './insert'\nimport { commonOptionConnector, hasVal, identifierToSql, literalToSQL, toUpper } from './util'\n\nfunction unnestToSQL(unnestExpr) {\n  const { type, as, expr, with_offset: withOffset } = unnestExpr\n  const result = [\n    `${toUpper(type)}(${expr && exprToSQL(expr) || ''})`,\n    commonOptionConnector('AS', identifierToSql, as),\n    commonOptionConnector(\n      toUpper(withOffset && withOffset.keyword),\n      identifierToSql,\n      withOffset && withOffset.as\n    ),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction pivotOperatorToSQL(operator) {\n  const { as, column, expr, in_expr, type } = operator\n  const result = [\n    exprToSQL(expr),\n    'FOR',\n    columnRefToSQL(column),\n    binaryToSQL(in_expr),\n  ]\n  const sql = [`${toUpper(type)}(${result.join(' ')})`]\n  if (as) sql.push('AS', identifierToSql(as))\n  return sql.join(' ')\n}\n\nfunction operatorToSQL(operator) {\n  if (!operator) return\n  const { type } = operator\n  switch (type) {\n    case 'pivot':\n      return pivotOperatorToSQL(operator)\n    default:\n      return ''\n  }\n}\n\nfunction tableToSQL(tableInfo) {\n  if (toUpper(tableInfo.type) === 'UNNEST') return unnestToSQL(tableInfo)\n  const { table, db, as, expr, operator, schema, tablesample } = tableInfo\n  const database = identifierToSql(db)\n  const schemaStr = identifierToSql(schema)\n  let tableName = table && identifierToSql(table)\n  if (expr && expr.type === 'values') {\n    const { parentheses, values, prefix } = expr\n    const valueSQL = [parentheses && '(', '', parentheses && ')']\n    let valuesExpr = valuesToSQL(values)\n    if (prefix) valuesExpr = valuesExpr.split('(').slice(1).map(val => `${toUpper(prefix)}(${val}`).join('')\n    valueSQL[1] = `VALUES ${valuesExpr}`\n    tableName = valueSQL.filter(hasVal).join('')\n  }\n  if (expr && expr.type !== 'values') tableName = exprToSQL(expr)\n  const str = [database, schemaStr, tableName].filter(hasVal).join('.')\n  const result = [str, operatorToSQL(operator)]\n  if (tablesample) {\n    const tableSampleSQL = [\n      'TABLESAMPLE',\n      exprToSQL(tablesample.expr),\n      literalToSQL(tablesample.repeatable),\n    ].filter(hasVal).join(' ')\n    result.push(tableSampleSQL)\n  }\n  if (as) result.push('AS', identifierToSql(as))\n  return result.filter(hasVal).join(' ')\n}\n\n/**\n * @param {Array} tables\n * @return {string}\n */\nfunction tablesToSQL(tables) {\n  if (!tables) return ''\n  const baseTable = tables[0]\n  const clauses = []\n  if (baseTable.type === 'dual') return 'DUAL'\n  clauses.push(tableToSQL(baseTable))\n  for (let i = 1; i < tables.length; ++i) {\n    const joinExpr = tables[i]\n    const { on, using, join } = joinExpr\n    const str = []\n    str.push(join ? ` ${join}` : ',')\n    str.push(tableToSQL(joinExpr))\n    str.push(commonOptionConnector('ON', exprToSQL, on))\n    if (using) str.push(`USING (${using.map(identifierToSql).join(', ')})`)\n    clauses.push(str.filter(hasVal).join(' '))\n  }\n  return clauses.filter(hasVal).join('')\n}\n\nfunction tableOptionToSQL(tableOption) {\n  const { keyword, symbol, value } = tableOption\n  const sql = [keyword.toUpperCase()]\n  if (symbol) sql.push(symbol)\n  sql.push(value)\n  return sql.join(' ')\n}\n\nexport {\n  operatorToSQL,\n  tablesToSQL,\n  tableOptionToSQL,\n  tableToSQL,\n  unnestToSQL,\n}\n","import { constraintDefinitionToSQL } from './constrain'\nimport { exprToSQL } from './expr'\nimport { castToSQL } from './func'\nimport { tablesToSQL } from './tables'\nimport {\n  autoIncreatementToSQL,\n  columnIdentifierToSql,\n  commonOptionConnector,\n  commonTypeValue,\n  commentToSQL,\n  hasVal,\n  identifierToSql,\n  literalToSQL,\n  toUpper,\n} from './util'\n\nfunction columnOffsetToSQL(column, isDual) {\n  if (typeof column === 'string') return identifierToSql(column, isDual)\n  const { expr, offset, suffix } = column\n  return [exprToSQL(expr), offset, suffix].filter(hasVal).join('')\n}\nfunction columnRefToSQL(expr) {\n  const {\n    array_index, arrow, as, collate, column, isDual, schema, table, parentheses, property,\n    suffix,\n  } = expr\n  let str = column === '*' ? '*' : columnOffsetToSQL(column, isDual)\n  if (table) str = `${identifierToSql(table)}.${str}`\n  if (schema) str = `${identifierToSql(schema)}.${str}`\n  if (array_index) {\n    str = `${str}[${array_index.number}]`\n    if (array_index.property) str = `${str}.${array_index.property.value}`\n  }\n  const result = [\n    str,\n    commonOptionConnector('AS', exprToSQL, as),\n    commonOptionConnector(arrow, literalToSQL, property),\n  ]\n  if (collate) result.push(commonTypeValue(collate).join(' '))\n  result.push(toUpper(suffix))\n  const sql = result.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nfunction columnDataType(definition) {\n  const { dataType, length, suffix, scale, expr } = definition || {}\n  let result = dataType\n  if (length != null) result += `(${[length, scale].filter(val => val != null).join(', ')})`\n  if (suffix && suffix.length) result += ` ${suffix.join(' ')}`\n  if (expr) result += exprToSQL(expr)\n  return result\n}\n\nfunction columnReferenceDefinitionToSQL(referenceDefinition) {\n  const reference = []\n  if (!referenceDefinition) return reference\n  const {\n    definition,\n    keyword,\n    match,\n    table,\n    on_delete: onDelete,\n    on_update: onUpdate,\n  } = referenceDefinition\n  reference.push(toUpper(keyword))\n  reference.push(tablesToSQL(table))\n  reference.push(definition && `(${definition.map(identifierToSql).join(', ')})`)\n  reference.push(toUpper(match))\n  reference.push(...commonTypeValue(onDelete))\n  reference.push(...commonTypeValue(onUpdate))\n  return reference.filter(hasVal)\n}\n\nfunction columnOption(definition) {\n  const columnOpt = []\n  const {\n    nullable, character_set: characterSet, check, comment, collate, storage,\n    default_val: defaultOpt,\n    auto_increment: autoIncrement,\n    unique_or_primary: uniquePrimary,\n    column_format: columnFormat,\n    reference_definition: referenceDefinition,\n  } = definition\n\n  columnOpt.push(toUpper(nullable && nullable.value))\n  if (defaultOpt) {\n    const { type, value } = defaultOpt\n    columnOpt.push(type.toUpperCase(), exprToSQL(value))\n  }\n  columnOpt.push(constraintDefinitionToSQL(check))\n  columnOpt.push(autoIncreatementToSQL(autoIncrement), toUpper(uniquePrimary), commentToSQL(comment))\n  columnOpt.push(...commonTypeValue(characterSet))\n  columnOpt.push(...commonTypeValue(collate))\n  columnOpt.push(...commonTypeValue(columnFormat))\n  columnOpt.push(...commonTypeValue(storage))\n  columnOpt.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  return columnOpt.filter(hasVal).join(' ')\n}\n\nfunction columnOrderToSQL(columnOrder) {\n  const { column, collate, nulls, opclass, order } = columnOrder\n  const result = [\n    exprToSQL(column),\n    commonOptionConnector(collate && collate.type, identifierToSql, collate && collate.value),\n    opclass,\n    toUpper(order),\n    toUpper(nulls),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction columnDefinitionToSQL(columnDefinition) {\n  const column = []\n  const name = columnRefToSQL(columnDefinition.column)\n  const dataType = columnDataType(columnDefinition.definition)\n  column.push(name)\n  column.push(dataType)\n  const columnOpt = columnOption(columnDefinition)\n  column.push(columnOpt)\n  return column.filter(hasVal).join(' ')\n}\n\nfunction columnToSQL(column, isDual) {\n  const { expr, type } = column\n  if (type === 'cast') return castToSQL(column)\n  if (isDual) expr.isDual = isDual\n  let str = exprToSQL(expr)\n  if (expr.parentheses && Reflect.has(expr, 'array_index')) str = `(${str})`\n  if (expr.array_index && expr.type !== 'column_ref') str = `${str}[${expr.array_index.number}]`\n  if (column.as !== null) {\n    str = `${str} AS `\n    if (/^(`?)[a-z_][0-9a-z_]*(`?)$/i.test(column.as)) str = `${str}${identifierToSql(column.as)}`\n    else str = `${str}${columnIdentifierToSql(column.as)}`\n  }\n  return str\n}\n\nfunction getDual(tables) {\n  const baseTable = Array.isArray(tables) && tables[0]\n  if (baseTable && baseTable.type === 'dual') return true\n  return false\n}\n/**\n * Stringify column expressions\n *\n * @param {Array} columns\n * @return {string}\n */\nfunction columnsToSQL(columns, tables) {\n  if (!columns || columns === '*') return columns\n  const isDual = getDual(tables)\n  const result = []\n  const { expr_list: exprList, star, type } = columns\n  result.push(star, toUpper(type))\n  const exprListArr = exprList || columns\n  const columnsStr = exprListArr.map(col => columnToSQL(col, isDual)).join(', ')\n  result.push([type && '(', columnsStr, type && ')'].filter(hasVal).join(''))\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  columnDefinitionToSQL,\n  columnRefToSQL,\n  columnsToSQL,\n  columnDataType,\n  columnOrderToSQL,\n  columnReferenceDefinitionToSQL,\n}\n","import { connector, toUpper, hasVal } from './util'\nimport { exprToSQL } from './expr'\n\nfunction composePrefixValSuffix(stmt) {\n  if (!stmt) return []\n  return [toUpper(stmt.prefix), exprToSQL(stmt.value), toUpper(stmt.suffix)]\n}\n\nfunction fetchOffsetToSQL(stmt) {\n  const { fetch, offset } = stmt\n  const result = [...composePrefixValSuffix(offset), ...composePrefixValSuffix(fetch)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction limitOffsetToSQL(limit) {\n  const { seperator, value } = limit\n  if (value.length === 1 && seperator === 'offset') return connector('OFFSET', exprToSQL(value[0]))\n  return connector('LIMIT', value.map(exprToSQL).join(`${seperator === 'offset' ? ' ' : ''}${toUpper(seperator)} `))\n}\n\nfunction limitToSQL(limit) {\n  if (!limit) return ''\n  if (limit.fetch) return fetchOffsetToSQL(limit)\n  return limitOffsetToSQL(limit)\n}\n\nexport {\n  limitToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { columnDataType, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { identifierToSql, hasVal, toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { tablesToSQL, tableToSQL } from './tables'\n\nfunction callToSQL(stmt) {\n  const type = 'CALL'\n  const storeProcessCall = exprToSQL(stmt.expr)\n  return `${type} ${storeProcessCall}`\n}\n\nfunction commonCmdToSQL(stmt) {\n  const { type, keyword, name } = stmt\n  const clauses = [toUpper(type), toUpper(keyword)]\n  switch (keyword) {\n    case 'table':\n      clauses.push(tablesToSQL(name))\n      break\n    case 'procedure':\n      clauses.push(identifierToSql(name))\n      break\n    case 'index':\n      clauses.push(\n        columnRefToSQL(name),\n        'ON',\n        tableToSQL(stmt.table),\n        stmt.options && stmt.options.map(alterExprToSQL).filter(hasVal).join(' ')\n      )\n      break\n    default:\n      break\n  }\n  return clauses.filter(hasVal).join(' ')\n}\n\nfunction descToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  return `${action} ${identifierToSql(table)}`\n}\n\nfunction renameToSQL(stmt) {\n  const { type, table } = stmt\n  const clauses = []\n  const prefix = `${type && type.toUpperCase()} TABLE`\n  if (table) {\n    for (const tables of table) {\n      const renameInfo = tables.map(tableToSQL)\n      clauses.push(renameInfo.join(' TO '))\n    }\n  }\n  return `${prefix} ${clauses.join(', ')}`\n}\n\nfunction useToSQL(stmt) {\n  const { type, db } = stmt\n  const action = toUpper(type)\n  const database = identifierToSql(db)\n  return `${action} ${database}`\n}\n\nfunction setVarToSQL(stmt) {\n  const { expr } = stmt\n  const action = 'SET'\n  const val = exprToSQL(expr)\n  return `${action} ${val}`\n}\n\nfunction pgLock(stmt) {\n  const { lock_mode: lockMode, nowait } = stmt\n  const lockInfo = []\n  if (lockMode) {\n    const { mode } = lockMode\n    lockInfo.push(mode.toUpperCase())\n  }\n  if (nowait) lockInfo.push(nowait.toUpperCase())\n  return lockInfo\n}\n\nfunction lockUnlockToSQL(stmt) {\n  const { type, keyword, tables } = stmt\n  const result = [type.toUpperCase(), toUpper(keyword)]\n  if (type.toUpperCase() === 'UNLOCK') return result.join(' ')\n  const tableStmt = []\n  for (const tableInfo of tables) {\n    const { table, lock_type: lockType } = tableInfo\n    const tableInfoTemp = [tableToSQL(table)]\n    if (lockType) {\n      const lockKeyList = ['prefix', 'type', 'suffix']\n      tableInfoTemp.push(lockKeyList.map(key => toUpper(lockType[key])).filter(hasVal).join(' '))\n    }\n    tableStmt.push(tableInfoTemp.join(' '))\n  }\n  result.push(tableStmt.join(', '), ...pgLock(stmt))\n  return result.filter(hasVal).join(' ')\n}\n\nfunction declareToSQL(stmt) {\n  const { type, declare } = stmt\n  const result = [toUpper(type)]\n  const info = declare.map(dec => {\n    const { at, name, as, prefix, definition, keyword } = dec\n    const declareInfo = [`${at}${name}`, toUpper(as)]\n    switch (keyword) {\n      case 'variable':\n        declareInfo.push(columnDataType(prefix))\n        if (definition) declareInfo.push('=', exprToSQL(definition))\n        break\n      case 'cursor':\n        declareInfo.push(toUpper(prefix))\n        break\n      case 'table':\n        declareInfo.push(toUpper(prefix), `(${definition.map(createDefinitionToSQL).join(', ')})`)\n        break\n      default:\n        break\n    }\n    return declareInfo.filter(hasVal).join(' ')\n  }).join(', ')\n  result.push(info)\n  return result.join(' ')\n}\n\nexport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  renameToSQL,\n  useToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, toUpper } from './util'\n\nfunction execVariablesToSQL(stmt) {\n  const { name, value } = stmt\n  const result = [`@${name}`, '=', exprToSQL(value)]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction execToSQL(stmt) {\n  const { keyword, module, parameters } = stmt\n  const result = [\n    toUpper(keyword),\n    tableToSQL(module),\n    parameters.map(execVariablesToSQL).filter(hasVal).join(', '),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  execToSQL,\n}\n","import { alterToSQL } from './alter'\nimport { createToSQL } from './create'\nimport { selectToSQL } from './select'\nimport { deleteToSQL } from './delete'\nimport { updateToSQL } from './update'\nimport { insertToSQL } from './insert'\nimport {\n  callToSQL,\n  commonCmdToSQL,\n  declareToSQL,\n  descToSQL,\n  useToSQL,\n  renameToSQL,\n  setVarToSQL,\n  lockUnlockToSQL,\n} from './command'\nimport { execToSQL } from './exec'\nimport { orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { showToSQL } from './show'\nimport { analyzeToSQL, attachToSQL } from './sqlite'\nimport { withToSQL } from './with'\nimport { hasVal } from './util'\n\nconst typeToSQLFn = {\n  alter    : alterToSQL,\n  analyze  : analyzeToSQL,\n  attach   : attachToSQL,\n  create   : createToSQL,\n  select   : selectToSQL,\n  delete   : deleteToSQL,\n  exec     : execToSQL,\n  update   : updateToSQL,\n  insert   : insertToSQL,\n  drop     : commonCmdToSQL,\n  truncate : commonCmdToSQL,\n  replace  : insertToSQL,\n  declare  : declareToSQL,\n  use      : useToSQL,\n  rename   : renameToSQL,\n  call     : callToSQL,\n  desc     : descToSQL,\n  set      : setVarToSQL,\n  lock     : lockUnlockToSQL,\n  unlock   : lockUnlockToSQL,\n  show     : showToSQL,\n}\n\nfunction unionToSQL(stmt) {\n  const fun = typeToSQLFn[stmt.type]\n  const res = [fun(stmt)]\n  const { _orderby, _limit } = stmt\n  while (stmt._next) {\n    const unionKeyword = (stmt.union || 'union').toUpperCase()\n    res.push(unionKeyword, fun(stmt._next))\n    stmt = stmt._next\n  }\n  res.push(orderOrPartitionByToSQL(_orderby, 'order by'), limitToSQL(_limit))\n  return res.filter(hasVal).join(' ')\n}\n\nfunction bigQueryToSQL(stmt) {\n  const { with: withExpr, parentheses, select, orderby, limit } = stmt\n  const result = [withToSQL(withExpr), parentheses && '(', unionToSQL(select), parentheses && ')']\n  // process with, orderby and limit\n  result.push(orderOrPartitionByToSQL(orderby, 'order by'), limitToSQL(limit))\n  return result.filter(val => val).join(' ')\n}\n\nfunction multipleToSQL(stmt) {\n  const res = []\n  for (let i = 0, len = stmt.length; i < len; ++i) {\n    let astInfo = stmt[i] && stmt[i].ast\n    if (!astInfo) astInfo = stmt[i]\n    res.push(unionToSQL(astInfo))\n  }\n  return res.join(' ; ')\n}\n\nexport {\n  bigQueryToSQL,\n  unionToSQL,\n  multipleToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { tableToSQL } from './tables'\nimport { hasVal, identifierToSql, toUpper } from './util'\n\nfunction analyzeToSQL(stmt) {\n  const { type, table } = stmt\n  const action = toUpper(type)\n  const tableName = tableToSQL(table)\n  return [action, tableName].join(' ')\n}\n\nfunction attachToSQL(stmt) {\n  const { type, database, expr, as, schema } = stmt\n  return [toUpper(type), toUpper(database), exprToSQL(expr), toUpper(as), identifierToSql(schema)].filter(hasVal).join(' ')\n}\n\nexport {\n  attachToSQL,\n  analyzeToSQL,\n}\n","import { columnsToSQL } from './column'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal } from './util'\n\nfunction deleteToSQL(stmt) {\n  const clauses = ['DELETE']\n  const { columns, from, table, where, orderby, limit } = stmt\n  const columnInfo = columnsToSQL(columns, from)\n  clauses.push(columnInfo)\n  if (Array.isArray(table)) {\n    if (!(table.length === 1 && table[0].addition === true)) clauses.push(tablesToSQL(table))\n  }\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  deleteToSQL,\n}\n","import { columnDefinitionToSQL, columnRefToSQL } from './column'\nimport { createDefinitionToSQL } from './create'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { hasVal, toUpper, identifierToSql } from './util'\n\nfunction alterToSQL(stmt) {\n  const { type, table, expr = [] } = stmt\n  const action = toUpper(type)\n  const tableName = tablesToSQL(table)\n  const exprList = expr.map(exprToSQL)\n  const result = [action, 'TABLE', tableName, exprList.join(', ')]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction alterExprToSQL(expr) {\n  if (!expr) return ''\n  const {\n    action,\n    create_definitions: createDefinition,\n    first_after: firstAfter,\n    if_not_exists: ifNotExists,keyword,\n    old_column: oldColumn,\n    prefix,\n    resource,\n    symbol,\n  } = expr\n  let name = ''\n  let dataType = []\n  switch (resource) {\n    case 'column':\n      dataType = [columnDefinitionToSQL(expr)]\n      break\n    case 'index':\n      dataType = indexTypeAndOptionToSQL(expr)\n      name = expr[resource]\n      break\n    case 'table':\n      name = identifierToSql(expr[resource])\n      break\n    case 'algorithm':\n    case 'lock':\n      name = [symbol, toUpper(expr[resource])].filter(hasVal).join(' ')\n      break\n    case 'constraint':\n      name = identifierToSql(expr[resource])\n      dataType = [createDefinitionToSQL(createDefinition)]\n      break\n    case 'key':\n      name = identifierToSql(expr[resource])\n      break\n    default:\n      break\n  }\n  const alterArray = [\n    toUpper(action),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    oldColumn && columnRefToSQL(oldColumn),\n    toUpper(prefix),\n    name,\n    dataType.filter(hasVal).join(' '),\n    firstAfter && `${toUpper(firstAfter.keyword)} ${columnRefToSQL(firstAfter.column)}`,\n  ]\n  return alterArray.filter(hasVal).join(' ')\n}\n\nexport {\n  alterToSQL,\n  alterExprToSQL,\n}\n","import {\n  literalToSQL,\n  identifierToSql,\n  toUpper,\n  hasVal,\n  commentToSQL,\n  onPartitionsToSQL,\n} from './util'\nimport { exprToSQL } from './expr'\n\nfunction indexTypeToSQL(indexType) {\n  if (!indexType) return []\n  const { keyword, type } = indexType\n  return [keyword.toUpperCase(), type.toUpperCase()]\n}\n\nfunction indexOptionToSQL(indexOpt) {\n  if (!indexOpt) return\n  const { type, expr, symbol } = indexOpt\n  const upperType = type.toUpperCase()\n  const indexOptArray = []\n  indexOptArray.push(upperType)\n  switch (upperType) {\n    case 'KEY_BLOCK_SIZE':\n      if (symbol) indexOptArray.push(symbol)\n      indexOptArray.push(literalToSQL(expr))\n      break\n    case 'BTREE':\n    case 'HASH':\n      indexOptArray.length = 0\n      indexOptArray.push(...indexTypeToSQL(indexOpt))\n      break\n    case 'WITH PARSER':\n      indexOptArray.push(expr)\n      break\n    case 'VISIBLE':\n    case 'INVISIBLE':\n      break\n    case 'COMMENT':\n      indexOptArray.shift()\n      indexOptArray.push(commentToSQL(indexOpt))\n      break\n    case 'DATA_COMPRESSION':\n      indexOptArray.push(symbol, toUpper(expr.value), onPartitionsToSQL(expr.on))\n      break\n    default:\n      indexOptArray.push(symbol, literalToSQL(expr))\n      break\n  }\n  return indexOptArray.filter(hasVal).join(' ')\n}\n\nfunction indexOptionListToSQL(indexOptList) {\n  if (!indexOptList) return []\n  return indexOptList.map(indexOptionToSQL)\n}\n\nfunction indexTypeAndOptionToSQL(indexDefinition) {\n  const {\n    constraint_type: constraintType,\n    index_type: indexType,\n    index_options: indexOptions = [],\n    definition,\n  } = indexDefinition\n  const dataType = []\n  dataType.push(...indexTypeToSQL(indexType))\n  if (definition && definition.length) {\n    const definitionSQL = toUpper(constraintType) === 'CHECK' ? `(${exprToSQL(definition[0])})` : `(${definition.map(col => identifierToSql(col)).join(', ')})`\n    dataType.push(definitionSQL)\n  }\n  dataType.push(indexOptionListToSQL(indexOptions).join(' '))\n  return dataType\n}\n\nfunction indexDefinitionToSQL(indexDefinition) {\n  const indexSQL = []\n  const {\n    keyword,\n    index,\n  } = indexDefinition\n  indexSQL.push(toUpper(keyword))\n  indexSQL.push(index)\n  indexSQL.push(...indexTypeAndOptionToSQL(indexDefinition))\n  return indexSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  indexDefinitionToSQL,\n  indexTypeToSQL,\n  indexOptionToSQL,\n  indexOptionListToSQL,\n  indexTypeAndOptionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { commonTypeValue, hasVal, identifierToSql, toUpper } from './util'\nimport { overToSQL } from './over'\n\nfunction arrayDimensionToSymbol(target) {\n  if (!target || !target.array) return ''\n  switch (target.array) {\n    case 'one':\n      return '[]'\n    case 'two':\n      return '[][]'\n  }\n}\n\nfunction castToSQL(expr) {\n  const { collate, target, expr: expression, symbol, as: alias, tail } = expr\n  const { length, dataType, parentheses, scale } = target\n  let str = ''\n  if (length != null) str = scale ? `${length}, ${scale}` : length\n  if (parentheses) str = `(${str})`\n  let prefix = exprToSQL(expression)\n  let symbolChar = '::'\n  let suffix = ''\n  if (symbol === 'as') {\n    prefix = `CAST(${prefix}`\n    suffix = ')'\n    symbolChar = ` ${symbol.toUpperCase()} `\n  }\n  if (tail) suffix += ` ${tail.operator} ${exprToSQL(tail.expr)}`\n  if (alias) suffix += ` AS ${identifierToSql(alias)}`\n  if (collate) suffix += ` ${commonTypeValue(collate).join(' ')}`\n  const arrayDimension = arrayDimensionToSymbol(target)\n  return `${prefix}${symbolChar}${dataType}${arrayDimension}${str}${suffix}`\n}\n\nfunction extractFunToSQL(stmt) {\n  const { args, type } = stmt\n  const { field, cast_type: castType, source } = args\n  const result = [`${toUpper(type)}(${toUpper(field)}`, 'FROM', toUpper(castType), exprToSQL(source)]\n  return `${result.filter(hasVal).join(' ')})`\n}\n\nfunction funcToSQL(expr) {\n  const { args, name, args_parentheses } = expr\n  const { parentheses, over, collate } = expr\n  const collateStr = commonTypeValue(collate).join(' ')\n  const overStr = overToSQL(over)\n  if (!args) return [name, overStr].filter(hasVal).join(' ')\n  let separator = ', '\n  if (toUpper(name) === 'TRIM') separator = ' '\n  let str = [name]\n  str.push(args_parentheses === false ? ' ' : '(')\n  str.push(exprToSQL(args).join(separator))\n  if (args_parentheses !== false) str.push(')')\n  str = str.join('')\n  return [parentheses ? `(${str})` : str, collateStr, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  castToSQL,\n  extractFunToSQL,\n  funcToSQL,\n}\n","import { toUpper } from './util'\nimport { exprToSQL } from './expr'\nimport { asWindowSpecToSQL } from './window'\n\nfunction overToSQL(over) {\n  if (!over) return\n  const { as_window_specification: asWindowSpec, expr, keyword, type } = over\n  const upperType = toUpper(type)\n  if (upperType === 'WINDOW') return `OVER ${asWindowSpecToSQL(asWindowSpec)}`\n  if (upperType === 'ON UPDATE') {\n    let onUpdate = `${toUpper(type)} ${toUpper(keyword)}`\n    const args = exprToSQL(expr)\n    if (args) onUpdate = `${onUpdate}(${args.join(', ')})`\n    return onUpdate\n  }\n  throw new Error('unknown over type')\n}\n\nexport {\n  overToSQL,\n}\n","import { exprToSQL, getExprListSQL, orderOrPartitionByToSQL, varToSQL } from './expr'\nimport { columnRefToSQL, columnsToSQL } from './column'\nimport { limitToSQL } from './limit'\nimport { withToSQL } from './with'\nimport { tablesToSQL } from './tables'\nimport { hasVal, commonOptionConnector, connector, identifierToSql, topToSQL, toUpper } from './util'\n\nfunction distinctToSQL(distinct) {\n  if (!distinct) return\n  if (typeof distinct === 'string') return distinct\n  const { type, columns } = distinct\n  const result = [toUpper(type)]\n  if (columns) result.push(`(${columns.map(columnRefToSQL).join(', ')})`)\n  return result.filter(hasVal).join(' ')\n}\n\nfunction selectIntoToSQL(into) {\n  if (!into) return\n  const { position } = into\n  if (!position) return\n  const { keyword, expr } = into\n  const result = []\n  const intoType = toUpper(keyword)\n  switch (intoType) {\n    case 'VAR':\n      result.push(expr.map(varToSQL).join(', '))\n      break\n    default:\n      result.push(intoType, typeof expr === 'string' ? identifierToSql(expr) : exprToSQL(expr))\n  }\n  return result.filter(hasVal).join(' ')\n}\n/**\n * @param {Object}      stmt\n * @param {?Array}      stmt.with\n * @param {?Array}      stmt.options\n * @param {?string}     stmt.distinct\n * @param {?Array|string}   stmt.columns\n * @param {?Array}      stmt.from\n * @param {?Object}     stmt.where\n * @param {?Array}      stmt.groupby\n * @param {?Object}     stmt.having\n * @param {?Array}      stmt.orderby\n * @param {?Array}      stmt.limit\n * @return {string}\n */\n\nfunction selectToSQL(stmt) {\n  const {\n    as_struct_val: asStructVal,\n    columns,\n    distinct,\n    from,\n    for_sys_time_as_of: forSystem = {},\n    for_update: forUpdate,\n    groupby,\n    having,\n    into = {},\n    limit,\n    options,\n    orderby,\n    parentheses_symbol: parentheses,\n    top,\n    window: windowInfo,\n    with: withInfo,\n    where,\n  } = stmt\n  const clauses = [withToSQL(withInfo), 'SELECT', toUpper(asStructVal)]\n  clauses.push(topToSQL(top))\n  if (Array.isArray(options)) clauses.push(options.join(' '))\n  clauses.push(distinctToSQL(distinct), columnsToSQL(columns, from))\n  const { position } = into\n  let intoSQL = ''\n  if (position) intoSQL = commonOptionConnector('INTO', selectIntoToSQL, into)\n  if (position === 'column') clauses.push(intoSQL)\n  // FROM + joins\n  clauses.push(commonOptionConnector('FROM', tablesToSQL, from))\n  if (position === 'from') clauses.push(intoSQL)\n  const { keyword, expr } = forSystem || {}\n  clauses.push(commonOptionConnector(keyword, exprToSQL, expr))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(connector('GROUP BY', getExprListSQL(groupby).join(', ')))\n  clauses.push(commonOptionConnector('HAVING', exprToSQL, having))\n  clauses.push(commonOptionConnector('WINDOW', exprToSQL, windowInfo))\n  clauses.push(orderOrPartitionByToSQL(orderby, 'order by'))\n  clauses.push(limitToSQL(limit))\n  clauses.push(toUpper(forUpdate))\n  if (position === 'end') clauses.push(intoSQL)\n  const sql = clauses.filter(hasVal).join(' ')\n  return parentheses ? `(${sql})` : sql\n}\n\nexport {\n  selectIntoToSQL,\n  selectToSQL,\n}\n","import { alterExprToSQL } from './alter'\nimport { exprToSQL } from './expr'\nimport { indexDefinitionToSQL, indexOptionListToSQL, indexTypeToSQL } from './index-definition'\nimport { columnDefinitionToSQL } from './column'\nimport { constraintDefinitionToSQL } from './constrain'\nimport { funcToSQL } from './func'\nimport { tablesToSQL, tableOptionToSQL, tableToSQL } from './tables'\nimport { unionToSQL } from './union'\nimport { columnIdentifierToSql, columnOrderListToSQL, commonOptionConnector, commonKeywordArgsToSQL, toUpper, hasVal, identifierToSql, triggerEventToSQL, literalToSQL } from './util'\n\nfunction createDefinitionToSQL(definition) {\n  if (!definition) return []\n  const { resource } = definition\n  switch (resource) {\n    case 'column':\n      return columnDefinitionToSQL(definition)\n    case 'index':\n      return indexDefinitionToSQL(definition)\n    case 'constraint':\n      return constraintDefinitionToSQL(definition)\n    case 'sequence':\n      return [toUpper(definition.prefix), exprToSQL(definition.value)].filter(hasVal).join(' ')\n    default:\n      throw new Error(`unknown resource = ${resource} type`)\n  }\n}\n\nfunction createTableToSQL(stmt) {\n  const {\n    type, keyword, table, like, as, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n    table_options: tableOptions,\n    ignore_replace: ignoreReplace,\n    query_expr: queryExpr,\n  } = stmt\n  const sql = [toUpper(type), toUpper(temporary), toUpper(keyword), toUpper(ifNotExists), tablesToSQL(table)]\n  if (like) {\n    const { type: likeType, table: likeTable } = like\n    const likeTableName = tablesToSQL(likeTable)\n    sql.push(toUpper(likeType), likeTableName)\n    return sql.filter(hasVal).join(' ')\n  }\n  if (createDefinition) {\n    sql.push(`(${createDefinition.map(createDefinitionToSQL).join(', ')})`)\n  }\n  if (tableOptions) {\n    sql.push(tableOptions.map(tableOptionToSQL).join(' '))\n  }\n  sql.push(toUpper(ignoreReplace), toUpper(as))\n  if (queryExpr) sql.push(unionToSQL(queryExpr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createTriggerToSQL(stmt) {\n  const {\n    constraint, constraint_kw: constraintKw,\n    deferrable,\n    events, execute,\n    for_each: forEach, from,\n    location,\n    keyword,\n    type, table,\n    when,\n  } = stmt\n  const sql = [toUpper(type), toUpper(constraintKw), toUpper(keyword), identifierToSql(constraint), toUpper(location)]\n  const event = triggerEventToSQL(events)\n  sql.push(event, 'ON', tableToSQL(table))\n  if (from) sql.push('FROM', tableToSQL(from))\n  sql.push(...commonKeywordArgsToSQL(deferrable), ...commonKeywordArgsToSQL(forEach))\n  if (when) sql.push(toUpper(when.type), exprToSQL(when.cond))\n  sql.push(toUpper(execute.keyword), funcToSQL(execute.expr))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createExtensionToSQL(stmt) {\n  const {\n    extension, from, if_not_exists: ifNotExists,\n    keyword, schema, type, with: withName, version,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    literalToSQL(extension),\n    toUpper(withName),\n    commonOptionConnector('SCHEMA', literalToSQL, schema),\n    commonOptionConnector('VERSION', literalToSQL, version),\n    commonOptionConnector('FROM', literalToSQL, from),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createIndexToSQL(stmt) {\n  const {\n    concurrently, filestream_on: fileStream, keyword, include, index_columns: indexColumns,\n    index_type: indexType, index_using: indexUsing, index, on, index_options: indexOpt, algorithm_option: algorithmOpt, lock_option: lockOpt, on_kw: onKw, table, tablespace, type, where,\n    with: withExpr, with_before_where: withBeforeWhere,\n  } = stmt\n  const withIndexOpt = withExpr && `WITH (${indexOptionListToSQL(withExpr).join(', ')})`\n  const includeColumns = include && `${toUpper(include.keyword)} (${include.columns.map(col => identifierToSql(col)).join(', ')})`\n  const sql = [\n    toUpper(type), toUpper(indexType), toUpper(keyword), toUpper(concurrently),\n    identifierToSql(index), toUpper(onKw), tableToSQL(table), ...indexTypeToSQL(indexUsing),\n    `(${columnOrderListToSQL(indexColumns)})`, includeColumns, indexOptionListToSQL(indexOpt).join(' '), alterExprToSQL(algorithmOpt), alterExprToSQL(lockOpt),\n    commonOptionConnector('TABLESPACE', literalToSQL, tablespace),\n  ]\n  if (withBeforeWhere) {\n    sql.push(withIndexOpt, commonOptionConnector('WHERE', exprToSQL, where))\n  } else {\n    sql.push(commonOptionConnector('WHERE', exprToSQL, where), withIndexOpt)\n  }\n  sql.push(commonOptionConnector('ON', exprToSQL, on), commonOptionConnector('FILESTREAM_ON', literalToSQL, fileStream))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createSequenceToSQL(stmt) {\n  const {\n    type, keyword, sequence, temporary,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(temporary),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    tablesToSQL(sequence),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(createDefinitionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createDatabaseToSQL(stmt) {\n  const {\n    type, keyword, database,\n    if_not_exists: ifNotExists,\n    create_definitions: createDefinition,\n  } = stmt\n  const sql = [\n    toUpper(type),\n    toUpper(keyword),\n    toUpper(ifNotExists),\n    columnIdentifierToSql(database),\n  ]\n  if (createDefinition) sql.push(createDefinition.map(tableOptionToSQL).join(' '))\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createViewToSQL(stmt) {\n  const {\n    algorithm, columns, definer, keyword,\n    replace, select, sql_security: sqlSecurity,\n    type, view, with: withClause,\n  } = stmt\n  const { db, view: name } = view\n  const viewName = [identifierToSql(db), identifierToSql(name)].filter(hasVal).join('.')\n  const sql = [\n    toUpper(type),\n    toUpper(replace),\n    algorithm && `ALGORITHM = ${toUpper(algorithm)}`,\n    definer && `DEFINER = ${definer}`,\n    sqlSecurity && `SQL SECURITY ${toUpper(sqlSecurity)}`,\n    toUpper(keyword),\n    viewName,\n    columns && `(${columns.map(columnIdentifierToSql).join(', ')})`,\n    'AS',\n    unionToSQL(select),\n    toUpper(withClause),\n  ]\n  return sql.filter(hasVal).join(' ')\n}\n\nfunction createToSQL(stmt) {\n  const { keyword } = stmt\n  let sql = ''\n  switch (keyword.toLowerCase()) {\n    case 'table':\n      sql = createTableToSQL(stmt)\n      break\n    case 'trigger':\n      sql = createTriggerToSQL(stmt)\n      break\n    case 'extension':\n      sql = createExtensionToSQL(stmt)\n      break\n    case 'index':\n      sql = createIndexToSQL(stmt)\n      break\n    case 'sequence':\n      sql = createSequenceToSQL(stmt)\n      break\n    case 'database':\n      sql = createDatabaseToSQL(stmt)\n      break\n    case 'view':\n      sql = createViewToSQL(stmt)\n      break\n    default:\n      throw new Error(`unknown create resource ${keyword}`)\n  }\n  return sql\n}\n\nexport {\n  createToSQL,\n  createDefinitionToSQL,\n}\n","import { hasVal, toUpper } from './util'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { overToSQL } from './over'\n\nfunction windowSpecificationToSQL(windowSpec) {\n  const {\n    name,\n    partitionby,\n    orderby,\n    window_frame_clause: windowFrame,\n  } = windowSpec\n  const result = [\n    name,\n    orderOrPartitionByToSQL(partitionby, 'partition by'),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    toUpper(windowFrame),\n  ]\n  return result.filter(hasVal).join(' ')\n}\n\nfunction asWindowSpecToSQL(asWindowSpec) {\n  if (typeof asWindowSpec === 'string') return asWindowSpec\n  const { window_specification: windowSpec } = asWindowSpec\n  return `(${windowSpecificationToSQL(windowSpec)})`\n}\n\nfunction namedWindowExprToSQL(namedWindowExpr) {\n  const { name, as_window_specification: asWindowSpec } = namedWindowExpr\n  return `${name} AS ${asWindowSpecToSQL(asWindowSpec)}`\n}\n\nfunction namedWindowExprListToSQL(namedWindowExprInfo) {\n  const { expr } = namedWindowExprInfo\n  return expr.map(namedWindowExprToSQL).join(', ')\n}\n\nfunction isConsiderNullsInArgs(fnName) {\n  // position of IGNORE/RESPECT NULLS varies by function\n  switch (toUpper(fnName)) {\n    case 'NTH_VALUE':\n    case 'LEAD':\n    case 'LAG':\n      return false\n    default:\n      return true\n  }\n}\n\nfunction constructArgsList(expr) {\n  const { args, name, consider_nulls = '' } = expr\n  const argsList = args ? exprToSQL(args).join(', ') : ''\n  // cover Syntax from FN_NAME(...args [RESPECT NULLS]) [RESPECT NULLS]\n  const isConsidernulls = isConsiderNullsInArgs(name)\n  const result = [name, '(', argsList, !isConsidernulls && ')', consider_nulls && ' ', consider_nulls, isConsidernulls && ')']\n  return result.filter(hasVal).join('')\n}\n\nfunction windowFuncToSQL(expr) {\n  const { over } = expr\n  const str = constructArgsList(expr)\n  const overStr = overToSQL(over)\n  return [str, overStr].filter(hasVal).join(' ')\n}\n\nexport {\n  asWindowSpecToSQL,\n  namedWindowExprToSQL,\n  namedWindowExprListToSQL,\n  windowFuncToSQL,\n  windowSpecificationToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL } from './expr'\nimport { identifierToSql, commonOptionConnector, hasVal, toUpper, returningToSQL } from './util'\nimport { selectToSQL } from './select'\nimport { setToSQL } from './update'\n\n/**\n * @param {Array} values\n * @return {string}\n */\nfunction valuesToSQL(values) {\n  if (values.type === 'select') return selectToSQL(values)\n  const clauses = values.map(exprToSQL)\n  return `(${clauses.join('), (')})`\n}\n\nfunction partitionToSQL(partition) {\n  if (!partition) return ''\n  const partitionArr = ['PARTITION', '(']\n  if (Array.isArray(partition)) {\n    partitionArr.push(partition.map(identifierToSql).join(', '))\n  } else {\n    const { value } = partition\n    partitionArr.push(value.map(exprToSQL).join(', '))\n  }\n  partitionArr.push(')')\n  return partitionArr.filter(hasVal).join('')\n}\n\nfunction insertToSQL(stmt) {\n  const {\n    table,\n    type,\n    prefix = 'into',\n    columns,\n    values,\n    where,\n    on_duplicate_update: onDuplicateUpdate,\n    partition,\n    returning,\n    set,\n  } = stmt\n  const { keyword, set: duplicateSet } = onDuplicateUpdate || {}\n  const clauses = [toUpper(type), toUpper(prefix), tablesToSQL(table), partitionToSQL(partition)]\n  if (Array.isArray(columns)) clauses.push(`(${columns.map(identifierToSql).join(', ')})`)\n  clauses.push(commonOptionConnector(Array.isArray(values) ? 'VALUES' : '', valuesToSQL, values))\n  clauses.push(commonOptionConnector('SET', setToSQL, set))\n  clauses.push(commonOptionConnector('WHERE', exprToSQL, where))\n  clauses.push(returningToSQL(returning))\n  clauses.push(commonOptionConnector(keyword, setToSQL, duplicateSet))\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  insertToSQL,\n  valuesToSQL,\n}\n","import { tablesToSQL } from './tables'\nimport { exprToSQL, orderOrPartitionByToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { hasVal, identifierToSql, commonOptionConnector, returningToSQL } from './util'\n\n/**\n * @param {Array} sets\n * @return {string}\n */\nfunction setToSQL(sets) {\n  if (!sets || sets.length === 0) return ''\n  const clauses = []\n  for (const set of sets) {\n    const { table, column, value } = set\n    const str = [table, column].filter(hasVal).map(info => identifierToSql(info)).join('.')\n    const setItem = [str]\n    let val = ''\n    if (value) {\n      val = exprToSQL(value)\n      setItem.push('=', val)\n    }\n    clauses.push(setItem.filter(hasVal).join(' '))\n  }\n  return clauses.join(', ')\n}\n\nfunction updateToSQL(stmt) {\n  const { table, set, where, orderby, limit, returning } = stmt\n  const clauses = [\n    'UPDATE',\n    tablesToSQL(table),\n    commonOptionConnector('SET', setToSQL, set),\n    commonOptionConnector('WHERE', exprToSQL, where),\n    orderOrPartitionByToSQL(orderby, 'order by'),\n    limitToSQL(limit),\n    returningToSQL(returning),\n  ]\n  return clauses.filter(hasVal).join(' ')\n}\n\nexport {\n  updateToSQL,\n  setToSQL,\n}\n","import {\n  identifierToSql,\n  toUpper,\n  hasVal,\n} from './util'\nimport { indexTypeAndOptionToSQL } from './index-definition'\nimport { columnReferenceDefinitionToSQL } from './column'\n\nfunction constraintDefinitionToSQL(constraintDefinition) {\n  if (!constraintDefinition) return\n  const {\n    constraint,\n    constraint_type: constraintType,\n    enforced,\n    index,\n    keyword,\n    reference_definition: referenceDefinition,\n  } = constraintDefinition\n  const constraintSQL = []\n  constraintSQL.push(toUpper(keyword))\n  constraintSQL.push(identifierToSql(constraint))\n  constraintSQL.push(toUpper(constraintType))\n  constraintSQL.push(identifierToSql(index))\n  constraintSQL.push(...indexTypeAndOptionToSQL(constraintDefinition))\n  constraintSQL.push(...columnReferenceDefinitionToSQL(referenceDefinition))\n  constraintSQL.push(toUpper(enforced))\n  return constraintSQL.filter(hasVal).join(' ')\n}\n\nexport {\n  constraintDefinitionToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { hasVal } from './util'\n\nfunction binaryToSQL(expr) {\n  let { operator } = expr\n  let rstr = exprToSQL(expr.right)\n  let isBetween = false\n  if (Array.isArray(rstr)) {\n    switch (operator) {\n      case '=':\n        operator = 'IN'\n        break\n      case '!=':\n        operator = 'NOT IN'\n        break\n      case 'BETWEEN':\n      case 'NOT BETWEEN':\n        isBetween = true\n        rstr = `${rstr[0]} AND ${rstr[1]}`\n        break\n      default:\n        break\n    }\n    if (!isBetween) rstr = `(${rstr.join(', ')})`\n  }\n  const str = [exprToSQL(expr.left), operator, rstr].filter(hasVal).join(' ')\n  return expr.parentheses ? `(${str})` : str\n}\n\nexport {\n  binaryToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { literalToSQL } from './util'\n\n/**\n * @param {Array<Object>} withExpr\n */\nfunction withToSQL(withExpr) {\n  if (!withExpr || withExpr.length === 0) return\n  const isRecursive = withExpr[0].recursive ? 'RECURSIVE ' : ''\n  const withExprStr = withExpr.map(cte => {\n    const { name, stmt, columns } = cte\n    const column = Array.isArray(columns) ? `(${columns.join(', ')})` : ''\n    return `${literalToSQL(name)}${column} AS (${exprToSQL(stmt)})`\n  }).join(', ')\n\n  return `WITH ${isRecursive}${withExprStr}`\n}\n\nexport {\n  withToSQL,\n}\n","import { exprToSQL } from './expr'\nimport { limitToSQL } from './limit'\nimport { tablesToSQL } from './tables'\nimport { commonOptionConnector, hasVal, literalToSQL, toUpper } from './util'\n\nfunction showEventToSQL(showEventExpr) {\n  const { in: inClause, from , limit } = showEventExpr\n  return [\n    commonOptionConnector('IN', literalToSQL, inClause && inClause.right),\n    commonOptionConnector('FROM', tablesToSQL, from),\n    limitToSQL(limit),\n  ].filter(hasVal).join(' ')\n}\n\nfunction showLikeAndWhereToSQL(showCharacterSetExpr) {\n  const { expr } = showCharacterSetExpr\n  if (!expr) return\n  const { op } = expr\n  if (toUpper(op) === 'LIKE') return commonOptionConnector('LIKE', literalToSQL, expr.right)\n  return commonOptionConnector('WHERE', exprToSQL, expr)\n}\n\nfunction showGrantsForUser(showGrantsForExpr) {\n  const { for: forExpr } = showGrantsForExpr\n  if (!forExpr) return\n  const { user, host, role_list } = forExpr\n  let userAndHost = `'${user}'`\n  if (host) userAndHost += `@'${host}'`\n  return ['FOR', userAndHost, role_list && 'USING', role_list && role_list.map(role => `'${role}'`).join(', ')].filter(hasVal).join(' ')\n}\n\nfunction showToSQL(showExpr) {\n  const { suffix, keyword } = showExpr\n  let str = ''\n  switch (toUpper(keyword)) {\n    case 'BINLOG':\n      str = showEventToSQL(showExpr)\n      break\n    case 'CHARACTER':\n    case 'COLLATION':\n      str = showLikeAndWhereToSQL(showExpr)\n      break\n    case 'GRANTS':\n      str = showGrantsForUser(showExpr)\n      break\n    default:\n      break\n  }\n  const result = ['SHOW', toUpper(keyword), toUpper(suffix), str]\n  return result.filter(hasVal).join(' ')\n}\n\nexport {\n  showToSQL,\n}\n","import { parse } from '../pegjs/mysql.pegjs'\n\nexport default {\n  [PARSER_NAME] : parse,\n}\n","import { bigQueryToSQL, unionToSQL, multipleToSQL } from './union'\n\nconst surportedTypes = ['analyze', 'attach', 'select', 'delete', 'exec', 'update', 'insert', 'drop', 'rename', 'truncate', 'call', 'desc', 'use', 'alter', 'set', 'create', 'lock', 'unlock', 'bigquery', 'declare', 'show', 'replace']\n\nfunction checkSupported(expr) {\n  const ast = expr && expr.ast ? expr.ast : expr\n  if (!surportedTypes.includes(ast.type)) throw new Error(`${ast.type} statements not supported at the moment`)\n}\n\nfunction toSQL(ast) {\n  if (Array.isArray(ast)) {\n    ast.forEach(checkSupported)\n    return multipleToSQL(ast)\n  }\n  checkSupported(ast)\n  const { type } = ast\n  if (type === 'bigquery') return bigQueryToSQL(ast)\n  return unionToSQL(ast)\n}\n\nfunction goToSQL(stmt) {\n  if (!stmt || stmt.length === 0) return ''\n  const res = [toSQL(stmt.ast)]\n  if (stmt.go_next) res.push(stmt.go.toUpperCase(), goToSQL(stmt.go_next))\n  return res.filter(sqlItem => sqlItem).join(' ')\n}\n\nexport default function astToSQL(ast) {\n  if (ast.go === 'go') return goToSQL(ast)\n  return toSQL(ast)\n}\n","import parsers from './parser.all'\nimport astToSQL from './sql'\nimport { DEFAULT_OPT, setParserOpt } from './util'\n\nclass Parser {\n  astify(sql, opt = DEFAULT_OPT) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.ast\n  }\n\n  sqlify(ast, opt = DEFAULT_OPT) {\n    setParserOpt(opt)\n    return astToSQL(ast, opt)\n  }\n\n  parse(sql, opt = DEFAULT_OPT) {\n    const { database = (PARSER_NAME || 'mysql') } = opt\n    setParserOpt(opt)\n    const typeCase = database.toLowerCase()\n    if (parsers[typeCase]) return parsers[typeCase](sql.trim())\n    throw new Error(`${database} is not supported currently`)\n  }\n\n  whiteListCheck(sql, whiteList, opt = DEFAULT_OPT) {\n    if (!whiteList || whiteList.length === 0) return\n    const { type = 'table' } = opt\n    if (!this[`${type}List`] || typeof this[`${type}List`] !== 'function') throw new Error(`${type} is not valid check mode`)\n    const checkFun = this[`${type}List`].bind(this)\n    const authorityList = checkFun(sql, opt)\n    let hasAuthority = true\n    let denyInfo = ''\n    for (const authority of authorityList) {\n      let hasCorrespondingAuthority = false\n      for (const whiteAuthority of whiteList) {\n        const regex = new RegExp(whiteAuthority, 'i')\n        if (regex.test(authority)) {\n          hasCorrespondingAuthority = true\n          break\n        }\n      }\n      if (!hasCorrespondingAuthority) {\n        denyInfo = authority\n        hasAuthority = false\n        break\n      }\n    }\n    if (!hasAuthority) throw new Error(`authority = '${denyInfo}' is required in ${type} whiteList to execute SQL = '${sql}'`)\n  }\n\n  tableList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.tableList\n  }\n\n  columnList(sql, opt) {\n    const astInfo = this.parse(sql, opt)\n    return astInfo && astInfo.columnList\n  }\n}\n\nexport default Parser\n","/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nvar BigInt = require(\"big-integer\");\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { start: peg$parsestart },\n      peg$startRuleFunction  = peg$parsestart,\n\n      peg$c0 = function(n) {\n          return n\n        },\n      peg$c1 = function(head, tail) {\n            const cur = [head && head.ast || head];\n            for (let i = 0; i < tail.length; i++) {\n              if(!tail[i][3] || tail[i][3].length === 0) continue;\n              cur.push(tail[i][3] && tail[i][3].ast || tail[i][3]);\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: cur\n            }\n          },\n      peg$c2 = \"(\",\n      peg$c3 = peg$literalExpectation(\"(\", false),\n      peg$c4 = \")\",\n      peg$c5 = peg$literalExpectation(\")\", false),\n      peg$c6 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true,\n            }\n          },\n      peg$c7 = function(cte, s, o, l, se) {\n          return {\n            tableList: Array.from(tableList),\n            columnList: columnListTableAlias(columnList),\n            ast: {\n              type: 'bigquery',\n              with: cte,\n              select: s && s.ast,\n              orderby: o,\n              limit: l,\n              parentheses: s && s.parentheses || false,\n            }\n          }\n        },\n      peg$c8 = function(u, s) {\n          return s ? `union ${s.toLowerCase()}` : 'union'\n        },\n      peg$c9 = \"intersect\",\n      peg$c10 = peg$literalExpectation(\"INTERSECT\", true),\n      peg$c11 = \"except\",\n      peg$c12 = peg$literalExpectation(\"EXCEPT\", true),\n      peg$c13 = function(u, s) {\n          return `${u.toLowerCase()} ${s.toLowerCase()}`\n        },\n      peg$c14 = function(s) {\n            return {\n              ...s[2],\n              parentheses: true\n            }\n          },\n      peg$c15 = function(head, tail) {\n            let cur = head\n            for (let i = 0; i < tail.length; i++) {\n              cur._next = tail[i][3]\n              cur.union = tail[i][1]\n              cur = cur._next\n            }\n            return {\n              tableList: Array.from(tableList),\n              columnList: columnListTableAlias(columnList),\n              ast: head\n            }\n          },\n      peg$c16 = function(s) {\n            return {\n              ...s[2],\n              parentheses_symbol: true\n            }\n          },\n      peg$c17 = function(head, tail) {\n            return createList(head, tail);\n          },\n      peg$c18 = function(name, stmt) {\n          if (typeof name === 'string') name = { type: 'default', value: name }\n          return { name, stmt };\n        },\n      peg$c19 = function(cte, sv, d, c, f, fs, w, g, h, o, l, win) {\n            if(Array.isArray(f)) f.forEach(info => info.table && tableList.add(`select::${info.db}::${info.table}`));\n            return {\n                type: 'select',\n                as_struct_val: sv,\n                distinct: d,\n                columns: c,\n                from: f,\n                for_sys_time_as_of: fs,\n                where: w,\n                with: cte,\n                groupby: g,\n                having: h,\n                orderby: o,\n                limit: l,\n                window:win,\n            };\n        },\n      peg$c20 = \"for\",\n      peg$c21 = peg$literalExpectation(\"FOR\", true),\n      peg$c22 = \"system_time\",\n      peg$c23 = peg$literalExpectation(\"SYSTEM_TIME\", true),\n      peg$c24 = \"as\",\n      peg$c25 = peg$literalExpectation(\"AS\", true),\n      peg$c26 = \"of\",\n      peg$c27 = peg$literalExpectation(\"OF\", true),\n      peg$c28 = function(e) {\n          return {\n            keyword: 'for system_time as of',\n            expr: e\n          }\n        },\n      peg$c29 = function(a, k) {\n          return `${a[0].toLowerCase()} ${k.toLowerCase()}`\n        },\n      peg$c30 = function(e, alias) {\n            return { expr: e, as:alias };\n          },\n      peg$c31 = \"replace\",\n      peg$c32 = peg$literalExpectation(\"REPLACE\", true),\n      peg$c33 = function(k, c) {\n          columnList.add('select::null::(.*)')\n          return {\n            expr_list: c,\n            parentheses: true,\n            star: '*',\n            type: k.toLowerCase(),\n          }\n        },\n      peg$c34 = function(head, tail) {\n            columnList.add('select::null::(.*)');\n            if (tail && tail.length > 0) {\n              head[0] = {\n                expr: {\n                  type: 'column_ref',\n                  table: null,\n                  column: '*'\n                },\n                as: null\n              };\n              return createList(head[0], tail);\n            }\n            return head[0];\n          },\n      peg$c35 = function(c) {\n          return c\n        },\n      peg$c36 = function(n, t, l) {\n          return {\n            expr: n,\n            offset: `[${t}(${l.value})]`\n          }\n        },\n      peg$c37 = function(tbl) {\n            columnList.add('select::null::(.*)');\n            return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: '*'\n              },\n              as: null\n            };\n          },\n      peg$c38 = function(tbl, pro) {\n            columnList.add(`select::${tbl}::(.*)`)\n            let column = '*'\n            const mid = pro && pro[0]\n            if (typeof mid === 'string') column = `${mid}.*`\n            if (mid && mid.expr && mid.offset) column = { ...mid, suffix: '.*' }\n            return {\n              expr: {\n                type: 'column_ref',\n                table: tbl,\n                column,\n              },\n              as: null\n            }\n          },\n      peg$c39 = function(c, as) {\n          return {\n              expr: {\n                type: 'column_ref',\n                table: null,\n                column: c\n              },\n              as: as\n            }\n        },\n      peg$c40 = function(i) { return i; },\n      peg$c41 = \"unnest\",\n      peg$c42 = peg$literalExpectation(\"UNNEST\", true),\n      peg$c43 = function(a, alias, wf) {\n          return {\n            type: 'unnest',\n            expr: a,\n            parentheses: true,\n            as:alias,\n            with_offset: wf,\n          }\n        },\n      peg$c44 = function(l, op) {\n          if (l[0]) l[0].operator = op\n          return l\n        },\n      peg$c45 = function(a, c, i, as) {\n          i.operator = '='\n          return {\n            'type': 'pivot',\n            'expr': a,\n            column: c,\n            in_expr: i,\n            as,\n          }\n        },\n      peg$c46 = function(alias) {\n          return {\n            keyword: 'with offset as',\n            as: alias\n          }\n        },\n      peg$c47 = function(head, tail) {\n            return [head, tail]\n          },\n      peg$c48 = function(head, tail) {\n            tail.unshift(head);\n            tail.forEach(tableInfo => {\n              const { table, as } = tableInfo\n              tableAlias[table] = table\n              if (as) tableAlias[as] = table\n              refreshColumnList(columnList)\n            })\n            return tail;\n          },\n      peg$c49 = function(t) { return t; },\n      peg$c50 = function(op, t, head, tail) {\n            t.join = op;\n            t.using = createList(head, tail);\n            return t;\n          },\n      peg$c51 = function(op, t, expr) {\n            t.join = op;\n            t.on   = expr;\n            return t;\n          },\n      peg$c52 = function(op, stmt, alias, expr) {\n          stmt.parentheses = true;\n          return {\n            expr: stmt,\n            as: alias,\n            join: op,\n            on: expr\n          };\n        },\n      peg$c53 = function(t, alias) {\n            if (t.type === 'var') {\n              t.as = alias;\n              return t;\n            } else {\n              return {\n                db: t.db,\n                table: t.table,\n                as: alias\n              };\n            }\n          },\n      peg$c54 = function(stmt, alias) {\n            stmt.parentheses = true;\n            return {\n              expr: stmt,\n              as: alias\n            };\n          },\n      peg$c55 = function() { return 'LEFT JOIN'; },\n      peg$c56 = function() { return 'RIGHT JOIN'; },\n      peg$c57 = function() { return 'FULL JOIN'; },\n      peg$c58 = function(k) { return `${k[0].toUpperCase()} JOIN`; },\n      peg$c59 = function(k) { return k ? `${k[0].toUpperCase()} JOIN` : 'JOIN'; },\n      peg$c60 = function(project, dt, tail) {\n            const obj = { db: null, table: project };\n            if (tail !== null) {\n              obj.db = `${project}.${dt[3]}`;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c61 = function(dt, tail) {\n            const obj = { db: null, table: dt };\n            if (tail !== null) {\n              obj.db = dt;\n              obj.table = tail[3];\n            }\n            return obj;\n          },\n      peg$c62 = function(e) { return e; },\n      peg$c63 = function(e) { return e.value; },\n      peg$c64 = function(l) {\n          return {\n            keyword: 'window',\n            type: 'window',\n            expr: l,\n          }\n        },\n      peg$c65 = function(nw, anw) {\n          return {\n            name: nw,\n            as_window_specification: anw,\n          }\n        },\n      peg$c66 = function(n) { return n },\n      peg$c67 = function(ws) {\n          return {\n            window_specification: ws,\n            parentheses: true\n          }\n        },\n      peg$c68 = function(n, bc, l, w) {\n          return {\n            name: n,\n            partitionby: bc,\n            orderby: l,\n            window_frame_clause: w\n          }\n        },\n      peg$c69 = \"range\",\n      peg$c70 = peg$literalExpectation(\"RANGE\", true),\n      peg$c71 = \"unbounded\",\n      peg$c72 = peg$literalExpectation(\"UNBOUNDED\", true),\n      peg$c73 = \"preceding\",\n      peg$c74 = peg$literalExpectation(\"PRECEDING\", true),\n      peg$c75 = \"current\",\n      peg$c76 = peg$literalExpectation(\"CURRENT\", true),\n      peg$c77 = \"ROW\",\n      peg$c78 = peg$literalExpectation(\"ROW\", false),\n      peg$c79 = function() {\n          return 'range between unbounded preceding and current row'\n        },\n      peg$c80 = function(kw, s) {\n          // => string\n          return `rows ${s.value}`\n        },\n      peg$c81 = function(p, f) {\n          // => string\n          return `rows between ${p.value} and ${f.value}`\n        },\n      peg$c82 = \"following\",\n      peg$c83 = peg$literalExpectation(\"FOLLOWING\", true),\n      peg$c84 = function(s) {\n          // => string\n          s.value += ' FOLLOWING'\n          return s\n        },\n      peg$c85 = function(s) {\n          // => string\n          s.value += ' PRECEDING'\n          return s\n        },\n      peg$c86 = \"row\",\n      peg$c87 = peg$literalExpectation(\"ROW\", true),\n      peg$c88 = function() {\n          // => { type: 'single_quote_string'; value: string }\n          return { type: 'single_quote_string', value: 'current row' }\n        },\n      peg$c89 = function(s) {\n          // => literal_string\n          return { type: 'single_quote_string', value: s.toUpperCase() }\n        },\n      peg$c90 = function(bc) { return bc; },\n      peg$c91 = function(l) { return l; },\n      peg$c92 = function(e, d) {\n          const obj = { expr: e, type: 'ASC' };\n          if (d === 'DESC') obj.type = 'DESC';\n          return obj;\n        },\n      peg$c93 = function(i1, tail) {\n            const res = [i1];\n            if (tail) res.push(tail[2]);\n            return {\n              seperator: tail && tail[0] && tail[0].toLowerCase() || '',\n              value: res\n            };\n          },\n      peg$c94 = function(head, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n          },\n      peg$c95 = function(c) {\n          return {\n            array_path: c,\n            type: 'array',\n            keyword: '',\n            parentheses: true\n          }\n        },\n      peg$c96 = function(s, c) {\n          return {\n            definition: s,\n            array_path: c.map(l => ({ expr: l, as: null })),\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c97 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'array',\n            keyword: s && 'array',\n            parentheses: true\n          }\n        },\n      peg$c98 = function(s, c) {\n          return {\n            definition: s,\n            expr_list: c,\n            type: 'struct',\n            keyword: s && 'struct',\n            parentheses: true\n          }\n        },\n      peg$c99 = function(head, tail) {\n          return createBinaryExprChain(head, tail);\n        },\n      peg$c100 = function(op, tail) {\n          return createUnaryExpr(op, tail[0][1]);\n        },\n      peg$c101 = function(head, tail) {\n          let result = head;\n          let seperator = ''\n          for (let i = 0; i < tail.length; i++) {\n            if (tail[i][1] === ',') {\n              seperator = ','\n              if (!Array.isArray(result)) result = [result]\n              result.push(tail[i][3])\n            } else {\n              result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n            }\n          }\n          if (seperator === ',') {\n            const el = { type: 'expr_list' };\n            el.value = result\n            return el\n          }\n          return result;\n        },\n      peg$c102 = function(head, tail) {\n            return createBinaryExprChain(head, tail);\n          },\n      peg$c103 = \"!\",\n      peg$c104 = peg$literalExpectation(\"!\", false),\n      peg$c105 = \"=\",\n      peg$c106 = peg$literalExpectation(\"=\", false),\n      peg$c107 = function(expr) {\n            return createUnaryExpr('NOT', expr);\n          },\n      peg$c108 = function(left, rh) {\n            if (rh === null) return left;\n            else if (rh.type === 'arithmetic') return createBinaryExprChain(left, rh.tail);\n            else return createBinaryExpr(rh.op, left, rh.right);\n          },\n      peg$c109 = function(op, stmt) {\n          stmt.parentheses = true;\n          return createUnaryExpr(op, stmt);\n        },\n      peg$c110 = function(nk) { return nk[0] + ' ' + nk[2]; },\n      peg$c111 = function(l) {\n            return { type: 'arithmetic', tail: l };\n          },\n      peg$c112 = \">=\",\n      peg$c113 = peg$literalExpectation(\">=\", false),\n      peg$c114 = \">\",\n      peg$c115 = peg$literalExpectation(\">\", false),\n      peg$c116 = \"<=\",\n      peg$c117 = peg$literalExpectation(\"<=\", false),\n      peg$c118 = \"<>\",\n      peg$c119 = peg$literalExpectation(\"<>\", false),\n      peg$c120 = \"<\",\n      peg$c121 = peg$literalExpectation(\"<\", false),\n      peg$c122 = \"!=\",\n      peg$c123 = peg$literalExpectation(\"!=\", false),\n      peg$c124 = function(right) {\n            return { op: 'IS', right: right };\n          },\n      peg$c125 = function(right) {\n            return { op: 'IS NOT', right: right };\n        },\n      peg$c126 = function(op, begin, end) {\n            return {\n              op: op,\n              right: {\n                type: 'expr_list',\n                value: [begin, end]\n              }\n            };\n          },\n      peg$c127 = function(op, right) {\n            return { op: op, right: right };\n          },\n      peg$c128 = function(op, l) {\n            return { op: op, right: l };\n          },\n      peg$c129 = function(op, e) {\n            return { op: op, right: e };\n          },\n      peg$c130 = \"+\",\n      peg$c131 = peg$literalExpectation(\"+\", false),\n      peg$c132 = \"-\",\n      peg$c133 = peg$literalExpectation(\"-\", false),\n      peg$c134 = function(head, tail) {\n            return createBinaryExprChain(head, tail)\n          },\n      peg$c135 = \"*\",\n      peg$c136 = peg$literalExpectation(\"*\", false),\n      peg$c137 = \"/\",\n      peg$c138 = peg$literalExpectation(\"/\", false),\n      peg$c139 = \"%\",\n      peg$c140 = peg$literalExpectation(\"%\", false),\n      peg$c141 = function(list) {\n              list.parentheses = true;\n              return list;\n          },\n      peg$c142 = function(e, u) {\n            return {\n              type: 'interval',\n              expr: e,\n              unit: u.toLowerCase(),\n            }\n          },\n      peg$c143 = function(condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: null,\n              args: condition_list\n            };\n          },\n      peg$c144 = function(expr, condition_list, otherwise) {\n            if (otherwise) condition_list.push(otherwise);\n            return {\n              type: 'case',\n              expr: expr,\n              args: condition_list\n            };\n          },\n      peg$c145 = function(condition, result) {\n          return {\n            type: 'when',\n            cond: condition,\n            result: result\n          };\n        },\n      peg$c146 = function(result) {\n          return { type: 'else', result: result };\n        },\n      peg$c147 = function(tbl, col) {\n            columnList.add(`select::${tbl}::${col}`);\n            return {\n              type: 'column_ref',\n              table: tbl,\n              column: col\n            };\n          },\n      peg$c148 = function(col) {\n            columnList.add(`select::null::${col}`);\n            return {\n              type: 'column_ref',\n              table: null,\n              column: col\n            };\n          },\n      peg$c149 = function(name) { return reservedMap[name.toUpperCase()] === true; },\n      peg$c150 = function(name) {\n            return name;\n          },\n      peg$c151 = function(name) {\n            if (reservedMap[name.toUpperCase()] === true) throw new Error(\"Error: \"+ JSON.stringify(name)+\" is a reserved word, can not as alias clause\");\n            return false\n          },\n      peg$c152 = \"\\\"\",\n      peg$c153 = peg$literalExpectation(\"\\\"\", false),\n      peg$c154 = /^[^\"]/,\n      peg$c155 = peg$classExpectation([\"\\\"\"], true, false),\n      peg$c156 = function(chars) { return chars.join(''); },\n      peg$c157 = \"'\",\n      peg$c158 = peg$literalExpectation(\"'\", false),\n      peg$c159 = /^[^']/,\n      peg$c160 = peg$classExpectation([\"'\"], true, false),\n      peg$c161 = \"`\",\n      peg$c162 = peg$literalExpectation(\"`\", false),\n      peg$c163 = /^[^`]/,\n      peg$c164 = peg$classExpectation([\"`\"], true, false),\n      peg$c165 = function(chars) { return `\\`${chars.join('')}\\``; },\n      peg$c166 = function(name) {\n          return name;\n        },\n      peg$c167 = function(name) { return name; },\n      peg$c168 = function(start, parts) { return start + parts.join(''); },\n      peg$c169 = /^[A-Za-z_]/,\n      peg$c170 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \"_\"], false, false),\n      peg$c171 = /^[A-Za-z0-9_\\-]/,\n      peg$c172 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \"-\"], false, false),\n      peg$c173 = /^[A-Za-z0-9_:]/,\n      peg$c174 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"], \"_\", \":\"], false, false),\n      peg$c175 = \":\",\n      peg$c176 = peg$literalExpectation(\":\", false),\n      peg$c177 = function(l) {\n            return { type: 'param', value: l[1] };\n          },\n      peg$c178 = function(head, as, tail) {\n            const el = { type: 'expr_list' };\n            el.value = createList(head, tail);\n            return el;\n        },\n      peg$c179 = function(name, e, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: {\n                expr: e\n              },\n              over: bc,\n            };\n          },\n      peg$c180 = \"update\",\n      peg$c181 = peg$literalExpectation(\"UPDATE\", true),\n      peg$c182 = function(kw, l) {\n          return {\n            type: 'on update',\n            keyword: kw,\n            parentheses: true,\n            expr: l\n          }\n        },\n      peg$c183 = function(kw) {\n          return {\n            type: 'on update',\n            keyword: kw,\n          }\n        },\n      peg$c184 = function(aws) {\n          return {\n            type: 'window',\n            as_window_specification: aws,\n          }\n        },\n      peg$c185 = function(bc, l) {\n          return {\n            partitionby: bc,\n            orderby: l\n          }\n        },\n      peg$c186 = function(name, arg, bc) {\n            return {\n              type: 'aggr_func',\n              name: name,\n              args: arg,\n              over: bc\n            };\n          },\n      peg$c187 = function(e) { return { expr: e }; },\n      peg$c188 = function(d, c) { return { distinct: d, expr: c }; },\n      peg$c189 = function(d, c, or) {  return { distinct: d, expr: c, orderby: or, parentheses: true }; },\n      peg$c190 = function() { return { type: 'star', value: '*' }; },\n      peg$c191 = function(name, l, bc) {\n          if (l && l.type !== 'expr_list') l = { type: 'expr_list', value: [l] }\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c192 = function(name, l, bc) {\n            return {\n              type: 'function',\n              name: name,\n              args: l ? l: { type: 'expr_list', value: [] },\n              over: bc\n            };\n          },\n      peg$c193 = function(f, up) {\n          return {\n              type: 'function',\n              name: f,\n              over: up\n          }\n        },\n      peg$c194 = function(dt, tail) {\n            let name = dt\n            if (tail !== null) {\n              tail.forEach(t => name = `${name}.${t[3]}`)\n            }\n            return name;\n          },\n      peg$c195 = \"century\",\n      peg$c196 = peg$literalExpectation(\"CENTURY\", true),\n      peg$c197 = \"day\",\n      peg$c198 = peg$literalExpectation(\"DAY\", true),\n      peg$c199 = \"decade\",\n      peg$c200 = peg$literalExpectation(\"DECADE\", true),\n      peg$c201 = \"dow\",\n      peg$c202 = peg$literalExpectation(\"DOW\", true),\n      peg$c203 = \"doy\",\n      peg$c204 = peg$literalExpectation(\"DOY\", true),\n      peg$c205 = \"epoch\",\n      peg$c206 = peg$literalExpectation(\"EPOCH\", true),\n      peg$c207 = \"hour\",\n      peg$c208 = peg$literalExpectation(\"HOUR\", true),\n      peg$c209 = \"isodow\",\n      peg$c210 = peg$literalExpectation(\"ISODOW\", true),\n      peg$c211 = \"isoyear\",\n      peg$c212 = peg$literalExpectation(\"ISOYEAR\", true),\n      peg$c213 = \"microseconds\",\n      peg$c214 = peg$literalExpectation(\"MICROSECONDS\", true),\n      peg$c215 = \"millennium\",\n      peg$c216 = peg$literalExpectation(\"MILLENNIUM\", true),\n      peg$c217 = \"milliseconds\",\n      peg$c218 = peg$literalExpectation(\"MILLISECONDS\", true),\n      peg$c219 = \"minute\",\n      peg$c220 = peg$literalExpectation(\"MINUTE\", true),\n      peg$c221 = \"month\",\n      peg$c222 = peg$literalExpectation(\"MONTH\", true),\n      peg$c223 = \"quarter\",\n      peg$c224 = peg$literalExpectation(\"QUARTER\", true),\n      peg$c225 = \"second\",\n      peg$c226 = peg$literalExpectation(\"SECOND\", true),\n      peg$c227 = \"timezone\",\n      peg$c228 = peg$literalExpectation(\"TIMEZONE\", true),\n      peg$c229 = \"timezone_hour\",\n      peg$c230 = peg$literalExpectation(\"TIMEZONE_HOUR\", true),\n      peg$c231 = \"timezone_minute\",\n      peg$c232 = peg$literalExpectation(\"TIMEZONE_MINUTE\", true),\n      peg$c233 = \"week\",\n      peg$c234 = peg$literalExpectation(\"WEEK\", true),\n      peg$c235 = \"year\",\n      peg$c236 = peg$literalExpectation(\"YEAR\", true),\n      peg$c237 = function() {\n          return f\n        },\n      peg$c238 = function(kw, f, t, s) {\n          return {\n              type: kw.toLowerCase(),\n              args: {\n                field: f,\n                cast_type: t,\n                source: s,\n              }\n          }\n        },\n      peg$c239 = function(e, t) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: t\n          };\n        },\n      peg$c240 = function(e, precision) {\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: 'DECIMAL(' + precision + ')'\n            }\n          };\n        },\n      peg$c241 = function(e, precision, scale) {\n            return {\n              type: 'cast',\n              expr: e,\n              symbol: 'as',\n              target: {\n                dataType: 'DECIMAL(' + precision + ', ' + scale + ')'\n              }\n            };\n          },\n      peg$c242 = function(e, s, t) { /* MySQL cast to un-/signed integer */\n          return {\n            type: 'cast',\n            expr: e,\n            symbol: 'as',\n            target: {\n              dataType: s + (t ? ' ' + t: '')\n            }\n          };\n        },\n      peg$c243 = function() {\n            return { type: 'null', value: null };\n          },\n      peg$c244 = function() {\n          return {\n            type: 'not null',\n            value: 'not null',\n          }\n        },\n      peg$c245 = function() {\n            return { type: 'bool', value: true };\n          },\n      peg$c246 = function() {\n            return { type: 'bool', value: false };\n          },\n      peg$c247 = \"r\",\n      peg$c248 = peg$literalExpectation(\"R\", true),\n      peg$c249 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'single_quote_string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c250 = function(r, ca) {\n            return {\n              type: r ? 'regex_string' : 'string',\n              value: ca[1].join('')\n            };\n          },\n      peg$c251 = function(type, ca) {\n            return {\n              type: type.toLowerCase(),\n              value: ca[1].join('')\n            };\n          },\n      peg$c252 = /^[^\"\\\\\\0-\\x1F\\x7F]/,\n      peg$c253 = peg$classExpectation([\"\\\"\", \"\\\\\", [\"\\0\", \"\\x1F\"], \"\\x7F\"], true, false),\n      peg$c254 = /^[^'\\\\]/,\n      peg$c255 = peg$classExpectation([\"'\", \"\\\\\"], true, false),\n      peg$c256 = \"\\\\'\",\n      peg$c257 = peg$literalExpectation(\"\\\\'\", false),\n      peg$c258 = function() { return \"\\\\'\";  },\n      peg$c259 = \"\\\\\\\"\",\n      peg$c260 = peg$literalExpectation(\"\\\\\\\"\", false),\n      peg$c261 = function() { return '\\\\\"';  },\n      peg$c262 = \"\\\\\\\\\",\n      peg$c263 = peg$literalExpectation(\"\\\\\\\\\", false),\n      peg$c264 = function() { return \"\\\\\\\\\"; },\n      peg$c265 = \"\\\\/\",\n      peg$c266 = peg$literalExpectation(\"\\\\/\", false),\n      peg$c267 = function() { return \"\\\\/\";  },\n      peg$c268 = \"\\\\b\",\n      peg$c269 = peg$literalExpectation(\"\\\\b\", false),\n      peg$c270 = function() { return \"\\b\"; },\n      peg$c271 = \"\\\\f\",\n      peg$c272 = peg$literalExpectation(\"\\\\f\", false),\n      peg$c273 = function() { return \"\\f\"; },\n      peg$c274 = \"\\\\n\",\n      peg$c275 = peg$literalExpectation(\"\\\\n\", false),\n      peg$c276 = function() { return \"\\n\"; },\n      peg$c277 = \"\\\\r\",\n      peg$c278 = peg$literalExpectation(\"\\\\r\", false),\n      peg$c279 = function() { return \"\\r\"; },\n      peg$c280 = \"\\\\t\",\n      peg$c281 = peg$literalExpectation(\"\\\\t\", false),\n      peg$c282 = function() { return \"\\t\"; },\n      peg$c283 = \"\\\\u\",\n      peg$c284 = peg$literalExpectation(\"\\\\u\", false),\n      peg$c285 = function(h1, h2, h3, h4) {\n            return String.fromCharCode(parseInt(\"0x\" + h1 + h2 + h3 + h4));\n          },\n      peg$c286 = \"\\\\\",\n      peg$c287 = peg$literalExpectation(\"\\\\\", false),\n      peg$c288 = function() { return \"\\\\\"; },\n      peg$c289 = /^[\\n\\r]/,\n      peg$c290 = peg$classExpectation([\"\\n\", \"\\r\"], false, false),\n      peg$c291 = function(n) {\n            if (n && n.type === 'bigint') return n\n            return { type: 'number', value: n };\n          },\n      peg$c292 = function(int_, frac, exp) {\n          const numStr = int_ + frac + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c293 = function(int_, frac) {\n          const numStr = int_ + frac\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: numStr\n          }\n          return parseFloat(numStr);\n        },\n      peg$c294 = function(int_, exp) {\n          const numStr = int_ + exp\n          return {\n            type: 'bigint',\n            value: numStr\n          }\n        },\n      peg$c295 = function(int_) {\n          if (isBigInt(int_)) return {\n            type: 'bigint',\n            value: int_\n          }\n          return parseFloat(int_);\n        },\n      peg$c296 = function(op, digits) { return \"-\" + digits; },\n      peg$c297 = function(op, digit) { return \"-\" + digit; },\n      peg$c298 = \".\",\n      peg$c299 = peg$literalExpectation(\".\", false),\n      peg$c300 = function(digits) { return \".\" + digits; },\n      peg$c301 = function(e, digits) { return e + digits; },\n      peg$c302 = function(digits) { return digits.join(\"\"); },\n      peg$c303 = /^[0-9]/,\n      peg$c304 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c305 = /^[0-9a-fA-F]/,\n      peg$c306 = peg$classExpectation([[\"0\", \"9\"], [\"a\", \"f\"], [\"A\", \"F\"]], false, false),\n      peg$c307 = /^[eE]/,\n      peg$c308 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c309 = /^[+\\-]/,\n      peg$c310 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c311 = function(e, sign) { return e + (sign !== null ? sign: ''); },\n      peg$c312 = \"null\",\n      peg$c313 = peg$literalExpectation(\"NULL\", true),\n      peg$c314 = \"default\",\n      peg$c315 = peg$literalExpectation(\"DEFAULT\", true),\n      peg$c316 = \"not null\",\n      peg$c317 = peg$literalExpectation(\"NOT NULL\", true),\n      peg$c318 = \"true\",\n      peg$c319 = peg$literalExpectation(\"TRUE\", true),\n      peg$c320 = \"to\",\n      peg$c321 = peg$literalExpectation(\"TO\", true),\n      peg$c322 = \"false\",\n      peg$c323 = peg$literalExpectation(\"FALSE\", true),\n      peg$c324 = \"drop\",\n      peg$c325 = peg$literalExpectation(\"DROP\", true),\n      peg$c326 = function() { return 'DROP'; },\n      peg$c327 = \"use\",\n      peg$c328 = peg$literalExpectation(\"USE\", true),\n      peg$c329 = \"select\",\n      peg$c330 = peg$literalExpectation(\"SELECT\", true),\n      peg$c331 = \"if not exists\",\n      peg$c332 = peg$literalExpectation(\"IF NOT EXISTS\", true),\n      peg$c333 = \"RECURSIVE\",\n      peg$c334 = peg$literalExpectation(\"RECURSIVE\", false),\n      peg$c335 = \"ignore\",\n      peg$c336 = peg$literalExpectation(\"IGNORE\", true),\n      peg$c337 = \"explain\",\n      peg$c338 = peg$literalExpectation(\"EXPLAIN\", true),\n      peg$c339 = \"partition\",\n      peg$c340 = peg$literalExpectation(\"PARTITION\", true),\n      peg$c341 = function() { return 'PARTITION' },\n      peg$c342 = \"into\",\n      peg$c343 = peg$literalExpectation(\"INTO\", true),\n      peg$c344 = \"from\",\n      peg$c345 = peg$literalExpectation(\"FROM\", true),\n      peg$c346 = \"set\",\n      peg$c347 = peg$literalExpectation(\"SET\", true),\n      peg$c348 = \"unlock\",\n      peg$c349 = peg$literalExpectation(\"UNLOCK\", true),\n      peg$c350 = \"lock\",\n      peg$c351 = peg$literalExpectation(\"LOCK\", true),\n      peg$c352 = \"table\",\n      peg$c353 = peg$literalExpectation(\"TABLE\", true),\n      peg$c354 = function() { return 'TABLE'; },\n      peg$c355 = \"tables\",\n      peg$c356 = peg$literalExpectation(\"TABLES\", true),\n      peg$c357 = function() { return 'TABLES'; },\n      peg$c358 = \"collate\",\n      peg$c359 = peg$literalExpectation(\"COLLATE\", true),\n      peg$c360 = function() { return 'COLLATE'; },\n      peg$c361 = \"on\",\n      peg$c362 = peg$literalExpectation(\"ON\", true),\n      peg$c363 = \"left\",\n      peg$c364 = peg$literalExpectation(\"LEFT\", true),\n      peg$c365 = \"right\",\n      peg$c366 = peg$literalExpectation(\"RIGHT\", true),\n      peg$c367 = \"full\",\n      peg$c368 = peg$literalExpectation(\"FULL\", true),\n      peg$c369 = \"inner\",\n      peg$c370 = peg$literalExpectation(\"INNER\", true),\n      peg$c371 = \"cross\",\n      peg$c372 = peg$literalExpectation(\"CROSS\", true),\n      peg$c373 = \"join\",\n      peg$c374 = peg$literalExpectation(\"JOIN\", true),\n      peg$c375 = \"outer\",\n      peg$c376 = peg$literalExpectation(\"OUTER\", true),\n      peg$c377 = \"over\",\n      peg$c378 = peg$literalExpectation(\"OVER\", true),\n      peg$c379 = \"union\",\n      peg$c380 = peg$literalExpectation(\"UNION\", true),\n      peg$c381 = \"value\",\n      peg$c382 = peg$literalExpectation(\"VALUE\", true),\n      peg$c383 = function() { return 'VALUE' },\n      peg$c384 = \"values\",\n      peg$c385 = peg$literalExpectation(\"VALUES\", true),\n      peg$c386 = \"using\",\n      peg$c387 = peg$literalExpectation(\"USING\", true),\n      peg$c388 = \"where\",\n      peg$c389 = peg$literalExpectation(\"WHERE\", true),\n      peg$c390 = \"with\",\n      peg$c391 = peg$literalExpectation(\"WITH\", true),\n      peg$c392 = \"group\",\n      peg$c393 = peg$literalExpectation(\"GROUP\", true),\n      peg$c394 = \"by\",\n      peg$c395 = peg$literalExpectation(\"BY\", true),\n      peg$c396 = \"order\",\n      peg$c397 = peg$literalExpectation(\"ORDER\", true),\n      peg$c398 = \"having\",\n      peg$c399 = peg$literalExpectation(\"HAVING\", true),\n      peg$c400 = \"window\",\n      peg$c401 = peg$literalExpectation(\"WINDOW\", true),\n      peg$c402 = \"ordinal\",\n      peg$c403 = peg$literalExpectation(\"ORDINAL\", true),\n      peg$c404 = function() { return 'ORDINAL' },\n      peg$c405 = \"limit\",\n      peg$c406 = peg$literalExpectation(\"LIMIT\", true),\n      peg$c407 = \"offset\",\n      peg$c408 = peg$literalExpectation(\"OFFSET\", true),\n      peg$c409 = function() { return 'OFFSET'; },\n      peg$c410 = \"asc\",\n      peg$c411 = peg$literalExpectation(\"ASC\", true),\n      peg$c412 = function() { return 'ASC'; },\n      peg$c413 = \"desc\",\n      peg$c414 = peg$literalExpectation(\"DESC\", true),\n      peg$c415 = function() { return 'DESC'; },\n      peg$c416 = \"all\",\n      peg$c417 = peg$literalExpectation(\"ALL\", true),\n      peg$c418 = function() { return 'ALL'; },\n      peg$c419 = \"distinct\",\n      peg$c420 = peg$literalExpectation(\"DISTINCT\", true),\n      peg$c421 = function() { return 'DISTINCT';},\n      peg$c422 = \"between\",\n      peg$c423 = peg$literalExpectation(\"BETWEEN\", true),\n      peg$c424 = function() { return 'BETWEEN'; },\n      peg$c425 = \"in\",\n      peg$c426 = peg$literalExpectation(\"IN\", true),\n      peg$c427 = function() { return 'IN'; },\n      peg$c428 = \"is\",\n      peg$c429 = peg$literalExpectation(\"IS\", true),\n      peg$c430 = function() { return 'IS'; },\n      peg$c431 = \"like\",\n      peg$c432 = peg$literalExpectation(\"LIKE\", true),\n      peg$c433 = function() { return 'LIKE'; },\n      peg$c434 = \"exists\",\n      peg$c435 = peg$literalExpectation(\"EXISTS\", true),\n      peg$c436 = function() { return 'EXISTS'; },\n      peg$c437 = \"not\",\n      peg$c438 = peg$literalExpectation(\"NOT\", true),\n      peg$c439 = function() { return 'NOT'; },\n      peg$c440 = \"and\",\n      peg$c441 = peg$literalExpectation(\"AND\", true),\n      peg$c442 = function() { return 'AND'; },\n      peg$c443 = \"or\",\n      peg$c444 = peg$literalExpectation(\"OR\", true),\n      peg$c445 = function() { return 'OR'; },\n      peg$c446 = \"count\",\n      peg$c447 = peg$literalExpectation(\"COUNT\", true),\n      peg$c448 = function() { return 'COUNT'; },\n      peg$c449 = \"max\",\n      peg$c450 = peg$literalExpectation(\"MAX\", true),\n      peg$c451 = function() { return 'MAX'; },\n      peg$c452 = \"min\",\n      peg$c453 = peg$literalExpectation(\"MIN\", true),\n      peg$c454 = function() { return 'MIN'; },\n      peg$c455 = \"sum\",\n      peg$c456 = peg$literalExpectation(\"SUM\", true),\n      peg$c457 = function() { return 'SUM'; },\n      peg$c458 = \"avg\",\n      peg$c459 = peg$literalExpectation(\"AVG\", true),\n      peg$c460 = function() { return 'AVG'; },\n      peg$c461 = \"extract\",\n      peg$c462 = peg$literalExpectation(\"EXTRACT\", true),\n      peg$c463 = function() { return 'EXTRACT'; },\n      peg$c464 = \"call\",\n      peg$c465 = peg$literalExpectation(\"CALL\", true),\n      peg$c466 = function() { return 'CALL'; },\n      peg$c467 = \"case\",\n      peg$c468 = peg$literalExpectation(\"CASE\", true),\n      peg$c469 = \"when\",\n      peg$c470 = peg$literalExpectation(\"WHEN\", true),\n      peg$c471 = \"then\",\n      peg$c472 = peg$literalExpectation(\"THEN\", true),\n      peg$c473 = \"else\",\n      peg$c474 = peg$literalExpectation(\"ELSE\", true),\n      peg$c475 = \"end\",\n      peg$c476 = peg$literalExpectation(\"END\", true),\n      peg$c477 = \"cast\",\n      peg$c478 = peg$literalExpectation(\"CAST\", true),\n      peg$c479 = \"array\",\n      peg$c480 = peg$literalExpectation(\"ARRAY\", true),\n      peg$c481 = function() { return 'ARRAY'; },\n      peg$c482 = \"bytes\",\n      peg$c483 = peg$literalExpectation(\"BYTES\", true),\n      peg$c484 = function() { return 'BYTES'; },\n      peg$c485 = \"bool\",\n      peg$c486 = peg$literalExpectation(\"BOOL\", true),\n      peg$c487 = function() { return 'BOOL'; },\n      peg$c488 = \"char\",\n      peg$c489 = peg$literalExpectation(\"CHAR\", true),\n      peg$c490 = function() { return 'CHAR'; },\n      peg$c491 = \"geography\",\n      peg$c492 = peg$literalExpectation(\"GEOGRAPHY\", true),\n      peg$c493 = function() { return 'GEOGRAPHY'; },\n      peg$c494 = \"varchar\",\n      peg$c495 = peg$literalExpectation(\"VARCHAR\", true),\n      peg$c496 = function() { return 'VARCHAR';},\n      peg$c497 = \"numeric\",\n      peg$c498 = peg$literalExpectation(\"NUMERIC\", true),\n      peg$c499 = function() { return 'NUMERIC'; },\n      peg$c500 = \"decimal\",\n      peg$c501 = peg$literalExpectation(\"DECIMAL\", true),\n      peg$c502 = function() { return 'DECIMAL'; },\n      peg$c503 = \"signed\",\n      peg$c504 = peg$literalExpectation(\"SIGNED\", true),\n      peg$c505 = function() { return 'SIGNED'; },\n      peg$c506 = \"unsigned\",\n      peg$c507 = peg$literalExpectation(\"UNSIGNED\", true),\n      peg$c508 = function() { return 'UNSIGNED'; },\n      peg$c509 = \"int64\",\n      peg$c510 = peg$literalExpectation(\"INT64\", true),\n      peg$c511 = function() { return 'INT64'; },\n      peg$c512 = \"zerofill\",\n      peg$c513 = peg$literalExpectation(\"ZEROFILL\", true),\n      peg$c514 = function() { return 'ZEROFILL'; },\n      peg$c515 = \"integer\",\n      peg$c516 = peg$literalExpectation(\"INTEGER\", true),\n      peg$c517 = function() { return 'INTEGER'; },\n      peg$c518 = \"json\",\n      peg$c519 = peg$literalExpectation(\"JSON\", true),\n      peg$c520 = function() { return 'JSON'; },\n      peg$c521 = \"smallint\",\n      peg$c522 = peg$literalExpectation(\"SMALLINT\", true),\n      peg$c523 = function() { return 'SMALLINT'; },\n      peg$c524 = \"string\",\n      peg$c525 = peg$literalExpectation(\"STRING\", true),\n      peg$c526 = function() { return 'STRING'; },\n      peg$c527 = \"struct\",\n      peg$c528 = peg$literalExpectation(\"STRUCT\", true),\n      peg$c529 = function() { return 'STRUCT'; },\n      peg$c530 = \"tinyint\",\n      peg$c531 = peg$literalExpectation(\"TINYINT\", true),\n      peg$c532 = function() { return 'TINYINT'; },\n      peg$c533 = \"tinytext\",\n      peg$c534 = peg$literalExpectation(\"TINYTEXT\", true),\n      peg$c535 = function() { return 'TINYTEXT'; },\n      peg$c536 = \"text\",\n      peg$c537 = peg$literalExpectation(\"TEXT\", true),\n      peg$c538 = function() { return 'TEXT'; },\n      peg$c539 = \"mediumtext\",\n      peg$c540 = peg$literalExpectation(\"MEDIUMTEXT\", true),\n      peg$c541 = function() { return 'MEDIUMTEXT'; },\n      peg$c542 = \"longtext\",\n      peg$c543 = peg$literalExpectation(\"LONGTEXT\", true),\n      peg$c544 = function() { return 'LONGTEXT'; },\n      peg$c545 = \"bigint\",\n      peg$c546 = peg$literalExpectation(\"BIGINT\", true),\n      peg$c547 = function() { return 'BIGINT'; },\n      peg$c548 = \"float64\",\n      peg$c549 = peg$literalExpectation(\"FLOAT64\", true),\n      peg$c550 = function() { return 'FLOAT64'; },\n      peg$c551 = \"double\",\n      peg$c552 = peg$literalExpectation(\"DOUBLE\", true),\n      peg$c553 = function() { return 'DOUBLE'; },\n      peg$c554 = \"date\",\n      peg$c555 = peg$literalExpectation(\"DATE\", true),\n      peg$c556 = function() { return 'DATE'; },\n      peg$c557 = \"datetime\",\n      peg$c558 = peg$literalExpectation(\"DATETIME\", true),\n      peg$c559 = function() { return 'DATETIME'; },\n      peg$c560 = \"rows\",\n      peg$c561 = peg$literalExpectation(\"ROWS\", true),\n      peg$c562 = function() { return 'ROWS'; },\n      peg$c563 = \"time\",\n      peg$c564 = peg$literalExpectation(\"TIME\", true),\n      peg$c565 = function() { return 'TIME'; },\n      peg$c566 = \"timestamp\",\n      peg$c567 = peg$literalExpectation(\"TIMESTAMP\", true),\n      peg$c568 = function() { return 'TIMESTAMP'; },\n      peg$c569 = \"truncate\",\n      peg$c570 = peg$literalExpectation(\"TRUNCATE\", true),\n      peg$c571 = function() { return 'TRUNCATE'; },\n      peg$c572 = \"user\",\n      peg$c573 = peg$literalExpectation(\"USER\", true),\n      peg$c574 = function() { return 'USER'; },\n      peg$c575 = \"current_date\",\n      peg$c576 = peg$literalExpectation(\"CURRENT_DATE\", true),\n      peg$c577 = function() { return 'CURRENT_DATE'; },\n      peg$c578 = \"adddate\",\n      peg$c579 = peg$literalExpectation(\"ADDDATE\", true),\n      peg$c580 = function() { return 'ADDDATE'; },\n      peg$c581 = \"interval\",\n      peg$c582 = peg$literalExpectation(\"INTERVAL\", true),\n      peg$c583 = function() { return 'INTERVAL'; },\n      peg$c584 = function() { return 'YEAR'; },\n      peg$c585 = function() { return 'MONTH'; },\n      peg$c586 = function() { return 'DAY'; },\n      peg$c587 = function() { return 'HOUR'; },\n      peg$c588 = function() { return 'MINUTE'; },\n      peg$c589 = function() { return 'SECOND'; },\n      peg$c590 = \"current_time\",\n      peg$c591 = peg$literalExpectation(\"CURRENT_TIME\", true),\n      peg$c592 = function() { return 'CURRENT_TIME'; },\n      peg$c593 = \"current_timestamp\",\n      peg$c594 = peg$literalExpectation(\"CURRENT_TIMESTAMP\", true),\n      peg$c595 = function() { return 'CURRENT_TIMESTAMP'; },\n      peg$c596 = \"session_user\",\n      peg$c597 = peg$literalExpectation(\"SESSION_USER\", true),\n      peg$c598 = function() { return 'SESSION_USER'; },\n      peg$c599 = \"global\",\n      peg$c600 = peg$literalExpectation(\"GLOBAL\", true),\n      peg$c601 = function() { return 'GLOBAL'; },\n      peg$c602 = \"session\",\n      peg$c603 = peg$literalExpectation(\"SESSION\", true),\n      peg$c604 = function() { return 'SESSION'; },\n      peg$c605 = \"local\",\n      peg$c606 = peg$literalExpectation(\"LOCAL\", true),\n      peg$c607 = function() { return 'LOCAL'; },\n      peg$c608 = \"pivot\",\n      peg$c609 = peg$literalExpectation(\"PIVOT\", true),\n      peg$c610 = function() { return 'PIVOT'; },\n      peg$c611 = \"persist\",\n      peg$c612 = peg$literalExpectation(\"PERSIST\", true),\n      peg$c613 = function() { return 'PERSIST'; },\n      peg$c614 = \"persist_only\",\n      peg$c615 = peg$literalExpectation(\"PERSIST_ONLY\", true),\n      peg$c616 = function() { return 'PERSIST_ONLY'; },\n      peg$c617 = \"add\",\n      peg$c618 = peg$literalExpectation(\"ADD\", true),\n      peg$c619 = function() { return 'ADD'; },\n      peg$c620 = \"column\",\n      peg$c621 = peg$literalExpectation(\"COLUMN\", true),\n      peg$c622 = function() { return 'COLUMN'; },\n      peg$c623 = \"index\",\n      peg$c624 = peg$literalExpectation(\"INDEX\", true),\n      peg$c625 = function() { return 'INDEX'; },\n      peg$c626 = \"key\",\n      peg$c627 = peg$literalExpectation(\"KEY\", true),\n      peg$c628 = function() { return 'KEY'; },\n      peg$c629 = \"fulltext\",\n      peg$c630 = peg$literalExpectation(\"FULLTEXT\", true),\n      peg$c631 = function() { return 'FULLTEXT'; },\n      peg$c632 = \"unique\",\n      peg$c633 = peg$literalExpectation(\"UNIQUE\", true),\n      peg$c634 = function() { return 'UNIQUE'; },\n      peg$c635 = \"comment\",\n      peg$c636 = peg$literalExpectation(\"COMMENT\", true),\n      peg$c637 = function() { return 'COMMENT'; },\n      peg$c638 = \"constraint\",\n      peg$c639 = peg$literalExpectation(\"CONSTRAINT\", true),\n      peg$c640 = function() { return 'CONSTRAINT'; },\n      peg$c641 = \"references\",\n      peg$c642 = peg$literalExpectation(\"REFERENCES\", true),\n      peg$c643 = function() { return 'REFERENCES'; },\n      peg$c644 = \",\",\n      peg$c645 = peg$literalExpectation(\",\", false),\n      peg$c646 = \"[\",\n      peg$c647 = peg$literalExpectation(\"[\", false),\n      peg$c648 = \"]\",\n      peg$c649 = peg$literalExpectation(\"]\", false),\n      peg$c650 = \";\",\n      peg$c651 = peg$literalExpectation(\";\", false),\n      peg$c652 = \"||\",\n      peg$c653 = peg$literalExpectation(\"||\", false),\n      peg$c654 = \"&&\",\n      peg$c655 = peg$literalExpectation(\"&&\", false),\n      peg$c656 = \"/*\",\n      peg$c657 = peg$literalExpectation(\"/*\", false),\n      peg$c658 = \"*/\",\n      peg$c659 = peg$literalExpectation(\"*/\", false),\n      peg$c660 = \"--\",\n      peg$c661 = peg$literalExpectation(\"--\", false),\n      peg$c662 = \"#\",\n      peg$c663 = peg$literalExpectation(\"#\", false),\n      peg$c664 = peg$anyExpectation(),\n      peg$c665 = /^[ \\t\\n\\r]/,\n      peg$c666 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false),\n      peg$c667 = function(n) { return DATA_TYPES[n.toUpperCase()] === true; },\n      peg$c668 = function(n) {\n            return n\n          },\n      peg$c669 = function(n, t) {\n          return {\n            field_name: n,\n            field_type: t,\n          }\n        },\n      peg$c670 = function(t) { return { dataType: t }; },\n      peg$c671 = function(t, l) { return { dataType: t, length: parseInt(l.join(''), 10), parentheses: true }; },\n      peg$c672 = function(t, a) {\n          return {\n            dataType: t,\n            definition: a,\n            anglebracket: true\n          }\n        },\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsestart() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsemultiple_stmt();\n      if (s2 === peg$FAILED) {\n        s2 = peg$parsequery_statement();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c0(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiple_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsequery_statement();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseSEMICOLON();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsequery_statement();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseSEMICOLON();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsequery_statement();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c1(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_statement() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parsequery_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c6(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequery_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewith_clause();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseunion_stmt();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parselimit_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseSEMICOLON();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s1, s3, s5, s7, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseset_op() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_UNION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_ALL();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c8(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 9).toLowerCase() === peg$c9) {\n        s1 = input.substr(peg$currPos, 9);\n        peg$currPos += 9;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c10); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s1 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_DISTINCT();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c13(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseunion_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseunion_stmt_nake();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c14(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunion_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseselect_stmt();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseset_op();\n        if (s5 === peg$FAILED) {\n          s5 = null;\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseselect_stmt();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseset_op();\n          if (s5 === peg$FAILED) {\n            s5 = null;\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseselect_stmt();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c15(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$parseselect_stmt_nake();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c2;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseselect_stmt();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c4;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c5); }\n              }\n              if (s6 !== peg$FAILED) {\n                s2 = [s2, s3, s4, s5, s6];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c16(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecte_definition();\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parsecte_definition();\n                if (s9 !== peg$FAILED) {\n                  s6 = [s6, s7, s8, s9];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parsecte_definition();\n                  if (s9 !== peg$FAILED) {\n                    s6 = [s6, s7, s8, s9];\n                    s5 = s6;\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c17(s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecte_definition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral_string();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseident_name();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseunion_stmt();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c18(s1, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseselect_stmt_nake() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21, s22, s23, s24, s25, s26;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsewith_clause();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_SELECT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse___();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsestruct_value();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_ALL();\n                  if (s8 === peg$FAILED) {\n                    s8 = peg$parseKW_DISTINCT();\n                  }\n                  if (s8 === peg$FAILED) {\n                    s8 = null;\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecolumn_clause();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsefrom_clause();\n                          if (s12 === peg$FAILED) {\n                            s12 = null;\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsefor_sys_time_as_of();\n                              if (s14 === peg$FAILED) {\n                                s14 = null;\n                              }\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = peg$parsewhere_clause();\n                                  if (s16 === peg$FAILED) {\n                                    s16 = null;\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      s18 = peg$parsegroup_by_clause();\n                                      if (s18 === peg$FAILED) {\n                                        s18 = null;\n                                      }\n                                      if (s18 !== peg$FAILED) {\n                                        s19 = peg$parse__();\n                                        if (s19 !== peg$FAILED) {\n                                          s20 = peg$parsehaving_clause();\n                                          if (s20 === peg$FAILED) {\n                                            s20 = null;\n                                          }\n                                          if (s20 !== peg$FAILED) {\n                                            s21 = peg$parse__();\n                                            if (s21 !== peg$FAILED) {\n                                              s22 = peg$parseorder_by_clause();\n                                              if (s22 === peg$FAILED) {\n                                                s22 = null;\n                                              }\n                                              if (s22 !== peg$FAILED) {\n                                                s23 = peg$parse__();\n                                                if (s23 !== peg$FAILED) {\n                                                  s24 = peg$parselimit_clause();\n                                                  if (s24 === peg$FAILED) {\n                                                    s24 = null;\n                                                  }\n                                                  if (s24 !== peg$FAILED) {\n                                                    s25 = peg$parse__();\n                                                    if (s25 !== peg$FAILED) {\n                                                      s26 = peg$parsewindow_clause();\n                                                      if (s26 === peg$FAILED) {\n                                                        s26 = null;\n                                                      }\n                                                      if (s26 !== peg$FAILED) {\n                                                        peg$savedPos = s0;\n                                                        s1 = peg$c19(s2, s6, s8, s10, s12, s14, s16, s18, s20, s22, s24, s26);\n                                                        s0 = s1;\n                                                      } else {\n                                                        peg$currPos = s0;\n                                                        s0 = peg$FAILED;\n                                                      }\n                                                    } else {\n                                                      peg$currPos = s0;\n                                                      s0 = peg$FAILED;\n                                                    }\n                                                  } else {\n                                                    peg$currPos = s0;\n                                                    s0 = peg$FAILED;\n                                                  }\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefor_sys_time_as_of() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c21); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 11).toLowerCase() === peg$c22) {\n          s3 = input.substr(peg$currPos, 11);\n          peg$currPos += 11;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c23); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n              s5 = input.substr(peg$currPos, 2);\n              peg$currPos += 2;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c25); }\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 2).toLowerCase() === peg$c26) {\n                  s7 = input.substr(peg$currPos, 2);\n                  peg$currPos += 2;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c27); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c28(s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_value() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_STRUCT();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_VALUE();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c29(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c30(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c11) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c12); }\n        }\n        if (s3 === peg$FAILED) {\n          if (input.substr(peg$currPos, 7).toLowerCase() === peg$c31) {\n            s3 = input.substr(peg$currPos, 7);\n            peg$currPos += 7;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c32); }\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLPAREN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumns_list();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseRPAREN();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c33(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ALL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        s2 = peg$parseSTAR();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          peg$silentFails++;\n          s4 = peg$parseident_start();\n          peg$silentFails--;\n          if (s4 === peg$FAILED) {\n            s3 = void 0;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            s2 = [s2, s3];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseSTAR();\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseCOMMA();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsecolumn_list_item();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseCOMMA();\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c34(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumns_list();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseCOMMA();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s1);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumns_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_list_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn_list_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn_list_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_offset_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLBRAKE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_OFFSET();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseKW_ORDINAL();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseliteral_numeric();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRBRAKE();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c36(s1, s5, s9);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseSTAR();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c37(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseDOT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$currPos;\n            s5 = peg$parsecolumn_offset_expr();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseident();\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseDOT();\n                if (s7 !== peg$FAILED) {\n                  s5 = [s5, s6, s7];\n                  s4 = s5;\n                } else {\n                  peg$currPos = s4;\n                  s4 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s4;\n                s4 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s4;\n              s4 = peg$FAILED;\n            }\n            if (s4 === peg$FAILED) {\n              s4 = null;\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseSTAR();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c38(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsecolumn_offset_expr();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsealias_clause();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c39(s1, s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseexpr_alias();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_AS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_ident();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c40(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_AS();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseident();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c40(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_unnest_item() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c41) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c42); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsealias_clause();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsewith_offset();\n                        if (s11 === peg$FAILED) {\n                          s11 = null;\n                        }\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c43(s5, s9, s11);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrom_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_FROM();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_ref_list();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsepivot_operator();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c44(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepivot_operator() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PIVOT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseaggr_func_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                if (input.substr(peg$currPos, 3).toLowerCase() === peg$c20) {\n                  s7 = input.substr(peg$currPos, 3);\n                  peg$currPos += 3;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c21); }\n                }\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsecolumn_ref();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsein_op_right();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parse__();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsealias_clause();\n                                if (s15 === peg$FAILED) {\n                                  s15 = null;\n                                }\n                                if (s15 !== peg$FAILED) {\n                                  peg$savedPos = s0;\n                                  s1 = peg$c45(s5, s9, s11, s15);\n                                  s0 = s1;\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewith_offset() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WITH();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OFFSET();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsealias_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c46(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_to_item();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsetable_to_item();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsetable_to_item();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_to_item() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_TO();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsetable_name();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c47(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref_list() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_base();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsetable_ref();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsetable_ref();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c48(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_ref() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseCOMMA();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsetable_base();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c49(s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsetable_join();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c49(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_join() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15;\n\n    s0 = peg$currPos;\n    s1 = peg$parsejoin_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetable_base();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_USING();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseident_name();\n                    if (s9 !== peg$FAILED) {\n                      s10 = [];\n                      s11 = peg$currPos;\n                      s12 = peg$parse__();\n                      if (s12 !== peg$FAILED) {\n                        s13 = peg$parseCOMMA();\n                        if (s13 !== peg$FAILED) {\n                          s14 = peg$parse__();\n                          if (s14 !== peg$FAILED) {\n                            s15 = peg$parseident_name();\n                            if (s15 !== peg$FAILED) {\n                              s12 = [s12, s13, s14, s15];\n                              s11 = s12;\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s11;\n                        s11 = peg$FAILED;\n                      }\n                      while (s11 !== peg$FAILED) {\n                        s10.push(s11);\n                        s11 = peg$currPos;\n                        s12 = peg$parse__();\n                        if (s12 !== peg$FAILED) {\n                          s13 = peg$parseCOMMA();\n                          if (s13 !== peg$FAILED) {\n                            s14 = peg$parse__();\n                            if (s14 !== peg$FAILED) {\n                              s15 = peg$parseident_name();\n                              if (s15 !== peg$FAILED) {\n                                s12 = [s12, s13, s14, s15];\n                                s11 = s12;\n                              } else {\n                                peg$currPos = s11;\n                                s11 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s11;\n                              s11 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s11;\n                            s11 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s11;\n                          s11 = peg$FAILED;\n                        }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseRPAREN();\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c50(s1, s3, s9, s10);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsejoin_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsetable_base();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseon_clause();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c51(s1, s3, s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsejoin_op();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseunion_stmt();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsealias_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseon_clause();\n                            if (s11 === peg$FAILED) {\n                              s11 = null;\n                            }\n                            if (s11 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c52(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_base() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetable_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c53(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseunion_stmt();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsealias_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c54(s3, s7);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsefrom_unnest_item();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsejoin_op() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LEFT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_OUTER();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_JOIN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c55();\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_RIGHT();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseKW_OUTER();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_JOIN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c56();\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_FULL();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_OUTER();\n            if (s3 === peg$FAILED) {\n              s3 = null;\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseKW_JOIN();\n                if (s5 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c57();\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CROSS();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseKW_JOIN();\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c58(s1);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parseKW_INNER();\n            if (s1 === peg$FAILED) {\n              s1 = null;\n            }\n            if (s1 !== peg$FAILED) {\n              s2 = peg$parse__();\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseKW_JOIN();\n                if (s3 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c59(s1);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsetable_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseDOT();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parse__();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parseident();\n            if (s6 !== peg$FAILED) {\n              s3 = [s3, s4, s5, s6];\n              s2 = s3;\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c60(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseident();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseDOT();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseident();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n        if (s2 === peg$FAILED) {\n          s2 = null;\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c61(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhere_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHERE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsegroup_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_GROUP();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c63(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsehaving_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_HAVING();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c62(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_clause() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WINDOW();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenamed_window_expr_list();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c64(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenamed_window_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenamed_window_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenamed_window_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenamed_window_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_AS();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseas_window_specification();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c65(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseas_window_specification() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c66(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseLPAREN();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_specification();\n          if (s3 === peg$FAILED) {\n            s3 = null;\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseRPAREN();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c67(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_specification() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsepartition_by_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_clause();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsewindow_frame_clause();\n                if (s7 === peg$FAILED) {\n                  s7 = null;\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c68(s1, s3, s5, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c69) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c70); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BETWEEN();\n        if (s3 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n            s4 = input.substr(peg$currPos, 9);\n            peg$currPos += 9;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c72); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.substr(peg$currPos, 9).toLowerCase() === peg$c73) {\n                s6 = input.substr(peg$currPos, 9);\n                peg$currPos += 9;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c74); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseKW_AND();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      if (input.substr(peg$currPos, 7).toLowerCase() === peg$c75) {\n                        s10 = input.substr(peg$currPos, 7);\n                        peg$currPos += 7;\n                      } else {\n                        s10 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c76); }\n                      }\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.substr(peg$currPos, 3) === peg$c77) {\n                            s12 = peg$c77;\n                            peg$currPos += 3;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c78); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c79();\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ROWS();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsewindow_frame_following();\n          if (s3 === peg$FAILED) {\n            s3 = peg$parsewindow_frame_preceding();\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c80(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_ROWS();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseKW_BETWEEN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parsewindow_frame_preceding();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AND();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parsewindow_frame_following();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c81(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_following() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c82) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c83); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c84(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_preceding() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsewindow_frame_value();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 9).toLowerCase() === peg$c73) {\n          s3 = input.substr(peg$currPos, 9);\n          peg$currPos += 9;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c74); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c85(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsewindow_frame_current_row();\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_current_row() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c75) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c76); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 3).toLowerCase() === peg$c86) {\n          s3 = input.substr(peg$currPos, 3);\n          peg$currPos += 3;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c87); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c88();\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsewindow_frame_value() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c71) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c72); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c89(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n    }\n\n    return s0;\n  }\n\n  function peg$parsepartition_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_PARTITION();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c90(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_clause() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ORDER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_BY();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseorder_by_list();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c91(s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseorder_by_element();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseorder_by_element();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseorder_by_element();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseorder_by_element() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseKW_DESC();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parseKW_ASC();\n        }\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c92(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber_or_param() {\n    var s0;\n\n    s0 = peg$parseliteral_numeric();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseparam();\n    }\n\n    return s0;\n  }\n\n  function peg$parselimit_clause() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_LIMIT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsenumber_or_param();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$currPos;\n            s6 = peg$parseCOMMA();\n            if (s6 === peg$FAILED) {\n              s6 = peg$parseKW_OFFSET();\n            }\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parse__();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parsenumber_or_param();\n                if (s8 !== peg$FAILED) {\n                  s6 = [s6, s7, s8];\n                  s5 = s6;\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c93(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c94(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexpr() {\n    var s0;\n\n    s0 = peg$parsestruct_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parselogic_operator_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseor_expr();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseunary_expr();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseunion_stmt();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsearray_expr();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_list_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseparentheses_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseparentheses_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseparentheses_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseparentheses_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLPAREN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRPAREN();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c35(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsearray_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseLBRAKE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecolumn_clause();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseRBRAKE();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c95(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsearray_type();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_ARRAY();\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseLBRAKE();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parse__();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseliteral_list();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseRBRAKE();\n                if (s6 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c96(s1, s4);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsearray_type();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_ARRAY();\n        }\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLBRAKE();\n            if (s3 === peg$FAILED) {\n              s3 = peg$parseLPAREN();\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseparentheses_list_expr();\n                if (s5 === peg$FAILED) {\n                  s5 = peg$parseexpr();\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRBRAKE();\n                    if (s7 === peg$FAILED) {\n                      s7 = peg$parseRPAREN();\n                    }\n                    if (s7 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c97(s1, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestruct_type();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_STRUCT();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_clause();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c98(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parselogic_operator_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseLOGIC_OPERATOR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseLOGIC_OPERATOR();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseprimary();\n                if (s7 !== peg$FAILED) {\n                  s4 = [s4, s5, s6, s7];\n                  s3 = s4;\n                } else {\n                  peg$currPos = s3;\n                  s3 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c99(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseunary_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_operator();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseprimary();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$currPos;\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseprimary();\n            if (s5 !== peg$FAILED) {\n              s4 = [s4, s5];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c100(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_and_where_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexpr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 === peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseCOMMA();\n          }\n        }\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseexpr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 === peg$FAILED) {\n            s5 = peg$parseKW_OR();\n            if (s5 === peg$FAILED) {\n              s5 = peg$parseCOMMA();\n            }\n          }\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseexpr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c101(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseor_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseand_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_OR();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseand_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_OR();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseand_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c102(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseand_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenot_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse___();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseKW_AND();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsenot_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse___();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseKW_AND();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsenot_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c102(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenot_expr() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$parsecomparison_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseexists_expr();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_NOT();\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 33) {\n            s2 = peg$c103;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c104); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$currPos;\n            peg$silentFails++;\n            if (input.charCodeAt(peg$currPos) === 61) {\n              s4 = peg$c105;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c106); }\n            }\n            peg$silentFails--;\n            if (s4 === peg$FAILED) {\n              s3 = void 0;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n            if (s3 !== peg$FAILED) {\n              s2 = [s2, s3];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parsenot_expr();\n            if (s3 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c107(s3);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_expr() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseadditive_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecomparison_op_right();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c108(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_string();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecolumn_ref();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseexists_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseunion_stmt();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c109(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexists_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_EXISTS();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c110(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_EXISTS();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomparison_op_right() {\n    var s0;\n\n    s0 = peg$parsearithmetic_op_right();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsein_op_right();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebetween_op_right();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseis_op_right();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parselike_op_right();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$currPos;\n    s3 = peg$parse__();\n    if (s3 !== peg$FAILED) {\n      s4 = peg$parsearithmetic_comparison_operator();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parse__();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parseadditive_expr();\n          if (s6 !== peg$FAILED) {\n            s3 = [s3, s4, s5, s6];\n            s2 = s3;\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s2;\n      s2 = peg$FAILED;\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$currPos;\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsearithmetic_comparison_operator();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseadditive_expr();\n              if (s6 !== peg$FAILED) {\n                s3 = [s3, s4, s5, s6];\n                s2 = s3;\n              } else {\n                peg$currPos = s2;\n                s2 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s2;\n              s2 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s2;\n            s2 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s2;\n          s2 = peg$FAILED;\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c111(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearithmetic_comparison_operator() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c112) {\n      s0 = peg$c112;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c113); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 62) {\n        s0 = peg$c114;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c115); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c116) {\n          s0 = peg$c116;\n          peg$currPos += 2;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c117); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 2) === peg$c118) {\n            s0 = peg$c118;\n            peg$currPos += 2;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c119); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 60) {\n              s0 = peg$c120;\n              peg$currPos++;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c121); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 61) {\n                s0 = peg$c105;\n                peg$currPos++;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c106); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 2) === peg$c122) {\n                  s0 = peg$c122;\n                  peg$currPos += 2;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c123); }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseis_op_right() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_IS();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c124(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parseKW_IS();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseKW_NOT();\n          if (s4 !== peg$FAILED) {\n            s2 = [s2, s3, s4];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseadditive_expr();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c125(s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsebetween_or_not_between_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseadditive_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_AND();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseadditive_expr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c126(s1, s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebetween_or_not_between_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_BETWEEN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c110(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_BETWEEN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_LIKE();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c110(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_LIKE();\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseKW_NOT();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parse__();\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parseKW_IN();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c110(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_IN();\n    }\n\n    return s0;\n  }\n\n  function peg$parselike_op_right() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parselike_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseliteral();\n        if (s3 === peg$FAILED) {\n          s3 = peg$parsecomparison_expr();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c127(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsein_op_right() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsein_op();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c128(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsein_op();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseliteral_string();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c129(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsemultiplicative_expr();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseadditive_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsemultiplicative_expr();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseadditive_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsemultiplicative_expr();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c102(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseadditive_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 43) {\n      s0 = peg$c130;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c131); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 45) {\n        s0 = peg$c132;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c133); }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseprimary();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsemultiplicative_operator();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseprimary();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsemultiplicative_operator();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseprimary();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c134(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsemultiplicative_operator() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c135;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c136); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s0 = peg$c137;\n        peg$currPos++;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c138); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 37) {\n          s0 = peg$c139;\n          peg$currPos++;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c140); }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseprimary() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$parsecast_expr();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseaggr_func();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsefunc_call();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsecase_expr();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseinterval_expr();\n              if (s0 === peg$FAILED) {\n                s0 = peg$parsecolumn_ref();\n                if (s0 === peg$FAILED) {\n                  s0 = peg$parseparam();\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    s1 = peg$parseLPAREN();\n                    if (s1 !== peg$FAILED) {\n                      s2 = peg$parse__();\n                      if (s2 !== peg$FAILED) {\n                        s3 = peg$parseor_and_where_expr();\n                        if (s3 !== peg$FAILED) {\n                          s4 = peg$parse__();\n                          if (s4 !== peg$FAILED) {\n                            s5 = peg$parseRPAREN();\n                            if (s5 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c141(s3);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_expr() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_INTERVAL();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseinterval_unit();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c142(s3, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CASE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsecase_when_then();\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            s4 = peg$parsecase_when_then();\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecase_else();\n            if (s5 === peg$FAILED) {\n              s5 = null;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_END();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_CASE();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c143(s3, s5);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CASE();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseexpr();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = [];\n              s6 = peg$parsecase_when_then();\n              if (s6 !== peg$FAILED) {\n                while (s6 !== peg$FAILED) {\n                  s5.push(s6);\n                  s6 = peg$parsecase_when_then();\n                }\n              } else {\n                s5 = peg$FAILED;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parsecase_else();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_END();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseKW_CASE();\n                          if (s11 === peg$FAILED) {\n                            s11 = null;\n                          }\n                          if (s11 !== peg$FAILED) {\n                            peg$savedPos = s0;\n                            s1 = peg$c144(s3, s5, s7);\n                            s0 = s1;\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_when_then() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_WHEN();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseor_and_where_expr();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_THEN();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseexpr();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c145(s3, s7);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecase_else() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ELSE();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexpr();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c146(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_ref() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseDOT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecolumn_without_kw();\n            if (s5 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c147(s1, s5);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecolumn();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c148(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsecolumn();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsecolumn();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c149(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c150(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c150(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsealias_ident() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c151(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c150(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsequoted_ident();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c150(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsequoted_ident() {\n    var s0;\n\n    s0 = peg$parsedouble_quoted_ident();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsesingle_quoted_ident();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsebackticks_quoted_ident();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedouble_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 34) {\n      s1 = peg$c152;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c153); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c154.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c155); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c154.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c155); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 34) {\n          s3 = peg$c152;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c153); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c156(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 39) {\n      s1 = peg$c157;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c158); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c159.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c160); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c159.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c160); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s3 = peg$c157;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c158); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c156(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebackticks_quoted_ident() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 96) {\n      s1 = peg$c161;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c162); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      if (peg$c163.test(input.charAt(peg$currPos))) {\n        s3 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s3 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c164); }\n      }\n      if (s3 !== peg$FAILED) {\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          if (peg$c163.test(input.charAt(peg$currPos))) {\n            s3 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c164); }\n          }\n        }\n      } else {\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 96) {\n          s3 = peg$c161;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c162); }\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c165(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_without_kw() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c166(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecolumn_name();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s2 = peg$c149(s1);\n      if (s2) {\n        s2 = peg$FAILED;\n      } else {\n        s2 = void 0;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c167(s1);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsequoted_ident();\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecolumn_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecolumn_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c168(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_name() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident_start();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parseident_part();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parseident_part();\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c168(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_start() {\n    var s0;\n\n    if (peg$c169.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c170); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseident_part() {\n    var s0;\n\n    if (peg$c171.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c172); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecolumn_part() {\n    var s0;\n\n    if (peg$c173.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c174); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseparam() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 58) {\n      s2 = peg$c175;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c176); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseident_name();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c177(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseaggr_func_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseaggr_func();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsealias_clause();\n        if (s3 === peg$FAILED) {\n          s3 = null;\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$currPos;\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseCOMMA();\n            if (s7 !== peg$FAILED) {\n              s8 = peg$parse__();\n              if (s8 !== peg$FAILED) {\n                s9 = peg$parseaggr_func();\n                if (s9 !== peg$FAILED) {\n                  s10 = peg$parse__();\n                  if (s10 !== peg$FAILED) {\n                    s11 = peg$parsealias_clause();\n                    if (s11 === peg$FAILED) {\n                      s11 = null;\n                    }\n                    if (s11 !== peg$FAILED) {\n                      s6 = [s6, s7, s8, s9, s10, s11];\n                      s5 = s6;\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s5;\n            s5 = peg$FAILED;\n          }\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$currPos;\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseCOMMA();\n              if (s7 !== peg$FAILED) {\n                s8 = peg$parse__();\n                if (s8 !== peg$FAILED) {\n                  s9 = peg$parseaggr_func();\n                  if (s9 !== peg$FAILED) {\n                    s10 = peg$parse__();\n                    if (s10 !== peg$FAILED) {\n                      s11 = peg$parsealias_clause();\n                      if (s11 === peg$FAILED) {\n                        s11 = null;\n                      }\n                      if (s11 !== peg$FAILED) {\n                        s6 = [s6, s7, s8, s9, s10, s11];\n                        s5 = s6;\n                      } else {\n                        peg$currPos = s5;\n                        s5 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s5;\n                      s5 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s5;\n                    s5 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s5;\n                  s5 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s5;\n                s5 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s5;\n              s5 = peg$FAILED;\n            }\n          }\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c178(s1, s3, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_func() {\n    var s0;\n\n    s0 = peg$parseaggr_fun_count();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseaggr_fun_smma();\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_smma() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_SUM_MAX_MIN_AVG();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseadditive_expr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c179(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM_MAX_MIN_AVG() {\n    var s0;\n\n    s0 = peg$parseKW_SUM();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_MAX();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_MIN();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_AVG();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseon_update_current_timestamp() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ON();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c180) {\n          s3 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c181); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseKW_CURRENT_TIMESTAMP();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseLPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseexpr_list();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c182(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_ON();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          if (input.substr(peg$currPos, 6).toLowerCase() === peg$c180) {\n            s3 = input.substr(peg$currPos, 6);\n            peg$currPos += 6;\n          } else {\n            s3 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c181); }\n          }\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseKW_CURRENT_TIMESTAMP();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c183(s5);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseover_partition() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_OVER();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseas_window_specification();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c184(s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_OVER();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parsepartition_by_clause();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseorder_by_clause();\n                  if (s7 === peg$FAILED) {\n                    s7 = null;\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseRPAREN();\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c185(s5, s7);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseon_update_current_timestamp();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseaggr_fun_count() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_COUNT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsecount_arg();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseover_partition();\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c186(s1, s5, s9);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecount_arg() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$currPos;\n    s1 = peg$parsestar_expr();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c187(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DISTINCT();\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parsecolumn_ref();\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c188(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_DISTINCT();\n        if (s1 === peg$FAILED) {\n          s1 = null;\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseorder_by_clause();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c189(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsestar_expr() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s1 = peg$c135;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c136); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c190();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefunc_call() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    s0 = peg$parseextract_func();\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseproc_func_name();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseor_and_where_expr();\n              if (s5 === peg$FAILED) {\n                s5 = null;\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseRPAREN();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseover_partition();\n                      if (s9 === peg$FAILED) {\n                        s9 = null;\n                      }\n                      if (s9 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c191(s1, s5, s9);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parsescalar_func();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr_list();\n                if (s5 === peg$FAILED) {\n                  s5 = null;\n                }\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseRPAREN();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseover_partition();\n                        if (s9 === peg$FAILED) {\n                          s9 = null;\n                        }\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c192(s1, s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CURRENT_TIMESTAMP();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseon_update_current_timestamp();\n              if (s3 === peg$FAILED) {\n                s3 = null;\n              }\n              if (s3 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c193(s1, s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseproc_func_name() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseident();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseDOT();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseident();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseDOT();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseident();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c194(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescalar_func() {\n    var s0;\n\n    s0 = peg$parseKW_CURRENT_DATE();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_CURRENT_TIME();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_CURRENT_TIMESTAMP();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_SESSION_USER();\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_filed() {\n    var s0, s1;\n\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c195) {\n      s0 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c196); }\n    }\n    if (s0 === peg$FAILED) {\n      if (input.substr(peg$currPos, 3).toLowerCase() === peg$c197) {\n        s0 = input.substr(peg$currPos, 3);\n        peg$currPos += 3;\n      } else {\n        s0 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c198); }\n      }\n      if (s0 === peg$FAILED) {\n        if (input.substr(peg$currPos, 6).toLowerCase() === peg$c199) {\n          s0 = input.substr(peg$currPos, 6);\n          peg$currPos += 6;\n        } else {\n          s0 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c200); }\n        }\n        if (s0 === peg$FAILED) {\n          if (input.substr(peg$currPos, 3).toLowerCase() === peg$c201) {\n            s0 = input.substr(peg$currPos, 3);\n            peg$currPos += 3;\n          } else {\n            s0 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c202); }\n          }\n          if (s0 === peg$FAILED) {\n            if (input.substr(peg$currPos, 3).toLowerCase() === peg$c203) {\n              s0 = input.substr(peg$currPos, 3);\n              peg$currPos += 3;\n            } else {\n              s0 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c204); }\n            }\n            if (s0 === peg$FAILED) {\n              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c205) {\n                s0 = input.substr(peg$currPos, 5);\n                peg$currPos += 5;\n              } else {\n                s0 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c206); }\n              }\n              if (s0 === peg$FAILED) {\n                if (input.substr(peg$currPos, 4).toLowerCase() === peg$c207) {\n                  s0 = input.substr(peg$currPos, 4);\n                  peg$currPos += 4;\n                } else {\n                  s0 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c208); }\n                }\n                if (s0 === peg$FAILED) {\n                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c209) {\n                    s0 = input.substr(peg$currPos, 6);\n                    peg$currPos += 6;\n                  } else {\n                    s0 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c210); }\n                  }\n                  if (s0 === peg$FAILED) {\n                    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c211) {\n                      s0 = input.substr(peg$currPos, 7);\n                      peg$currPos += 7;\n                    } else {\n                      s0 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c212); }\n                    }\n                    if (s0 === peg$FAILED) {\n                      if (input.substr(peg$currPos, 12).toLowerCase() === peg$c213) {\n                        s0 = input.substr(peg$currPos, 12);\n                        peg$currPos += 12;\n                      } else {\n                        s0 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c214); }\n                      }\n                      if (s0 === peg$FAILED) {\n                        if (input.substr(peg$currPos, 10).toLowerCase() === peg$c215) {\n                          s0 = input.substr(peg$currPos, 10);\n                          peg$currPos += 10;\n                        } else {\n                          s0 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c216); }\n                        }\n                        if (s0 === peg$FAILED) {\n                          if (input.substr(peg$currPos, 12).toLowerCase() === peg$c217) {\n                            s0 = input.substr(peg$currPos, 12);\n                            peg$currPos += 12;\n                          } else {\n                            s0 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c218); }\n                          }\n                          if (s0 === peg$FAILED) {\n                            if (input.substr(peg$currPos, 6).toLowerCase() === peg$c219) {\n                              s0 = input.substr(peg$currPos, 6);\n                              peg$currPos += 6;\n                            } else {\n                              s0 = peg$FAILED;\n                              if (peg$silentFails === 0) { peg$fail(peg$c220); }\n                            }\n                            if (s0 === peg$FAILED) {\n                              if (input.substr(peg$currPos, 5).toLowerCase() === peg$c221) {\n                                s0 = input.substr(peg$currPos, 5);\n                                peg$currPos += 5;\n                              } else {\n                                s0 = peg$FAILED;\n                                if (peg$silentFails === 0) { peg$fail(peg$c222); }\n                              }\n                              if (s0 === peg$FAILED) {\n                                if (input.substr(peg$currPos, 7).toLowerCase() === peg$c223) {\n                                  s0 = input.substr(peg$currPos, 7);\n                                  peg$currPos += 7;\n                                } else {\n                                  s0 = peg$FAILED;\n                                  if (peg$silentFails === 0) { peg$fail(peg$c224); }\n                                }\n                                if (s0 === peg$FAILED) {\n                                  if (input.substr(peg$currPos, 6).toLowerCase() === peg$c225) {\n                                    s0 = input.substr(peg$currPos, 6);\n                                    peg$currPos += 6;\n                                  } else {\n                                    s0 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c226); }\n                                  }\n                                  if (s0 === peg$FAILED) {\n                                    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c227) {\n                                      s0 = input.substr(peg$currPos, 8);\n                                      peg$currPos += 8;\n                                    } else {\n                                      s0 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c228); }\n                                    }\n                                    if (s0 === peg$FAILED) {\n                                      if (input.substr(peg$currPos, 13).toLowerCase() === peg$c229) {\n                                        s0 = input.substr(peg$currPos, 13);\n                                        peg$currPos += 13;\n                                      } else {\n                                        s0 = peg$FAILED;\n                                        if (peg$silentFails === 0) { peg$fail(peg$c230); }\n                                      }\n                                      if (s0 === peg$FAILED) {\n                                        if (input.substr(peg$currPos, 15).toLowerCase() === peg$c231) {\n                                          s0 = input.substr(peg$currPos, 15);\n                                          peg$currPos += 15;\n                                        } else {\n                                          s0 = peg$FAILED;\n                                          if (peg$silentFails === 0) { peg$fail(peg$c232); }\n                                        }\n                                        if (s0 === peg$FAILED) {\n                                          if (input.substr(peg$currPos, 4).toLowerCase() === peg$c233) {\n                                            s0 = input.substr(peg$currPos, 4);\n                                            peg$currPos += 4;\n                                          } else {\n                                            s0 = peg$FAILED;\n                                            if (peg$silentFails === 0) { peg$fail(peg$c234); }\n                                          }\n                                          if (s0 === peg$FAILED) {\n                                            s0 = peg$currPos;\n                                            if (input.substr(peg$currPos, 4).toLowerCase() === peg$c235) {\n                                              s1 = input.substr(peg$currPos, 4);\n                                              peg$currPos += 4;\n                                            } else {\n                                              s1 = peg$FAILED;\n                                              if (peg$silentFails === 0) { peg$fail(peg$c236); }\n                                            }\n                                            if (s1 !== peg$FAILED) {\n                                              peg$savedPos = s0;\n                                              s1 = peg$c237();\n                                            }\n                                            s0 = s1;\n                                          }\n                                        }\n                                      }\n                                    }\n                                  }\n                                }\n                              }\n                            }\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseextract_func() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_EXTRACT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseextract_filed();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_FROM();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parseKW_TIMESTAMP();\n                    if (s9 === peg$FAILED) {\n                      s9 = peg$parseKW_INTERVAL();\n                      if (s9 === peg$FAILED) {\n                        s9 = peg$parseKW_TIME();\n                        if (s9 === peg$FAILED) {\n                          s9 = peg$parseKW_DATE();\n                        }\n                      }\n                    }\n                    if (s9 === peg$FAILED) {\n                      s9 = null;\n                    }\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseexpr();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parse__();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parseRPAREN();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c238(s1, s5, s9, s11);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecast_expr() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17, s18, s19, s20, s21;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_CAST();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseexpr();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseKW_AS();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parse__();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsedata_type();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parse__();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parseRPAREN();\n                        if (s11 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c239(s5, s9);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_CAST();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseLPAREN();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parse__();\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parseexpr();\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parse__();\n                if (s6 !== peg$FAILED) {\n                  s7 = peg$parseKW_AS();\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      s9 = peg$parseKW_DECIMAL();\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          s11 = peg$parseLPAREN();\n                          if (s11 !== peg$FAILED) {\n                            s12 = peg$parse__();\n                            if (s12 !== peg$FAILED) {\n                              s13 = peg$parseint();\n                              if (s13 !== peg$FAILED) {\n                                s14 = peg$parse__();\n                                if (s14 !== peg$FAILED) {\n                                  s15 = peg$parseRPAREN();\n                                  if (s15 !== peg$FAILED) {\n                                    s16 = peg$parse__();\n                                    if (s16 !== peg$FAILED) {\n                                      s17 = peg$parseRPAREN();\n                                      if (s17 !== peg$FAILED) {\n                                        peg$savedPos = s0;\n                                        s1 = peg$c240(s5, s13);\n                                        s0 = s1;\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseKW_CAST();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parse__();\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseLPAREN();\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parse__();\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseexpr();\n                if (s5 !== peg$FAILED) {\n                  s6 = peg$parse__();\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseKW_AS();\n                    if (s7 !== peg$FAILED) {\n                      s8 = peg$parse__();\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parseKW_DECIMAL();\n                        if (s9 !== peg$FAILED) {\n                          s10 = peg$parse__();\n                          if (s10 !== peg$FAILED) {\n                            s11 = peg$parseLPAREN();\n                            if (s11 !== peg$FAILED) {\n                              s12 = peg$parse__();\n                              if (s12 !== peg$FAILED) {\n                                s13 = peg$parseint();\n                                if (s13 !== peg$FAILED) {\n                                  s14 = peg$parse__();\n                                  if (s14 !== peg$FAILED) {\n                                    s15 = peg$parseCOMMA();\n                                    if (s15 !== peg$FAILED) {\n                                      s16 = peg$parse__();\n                                      if (s16 !== peg$FAILED) {\n                                        s17 = peg$parseint();\n                                        if (s17 !== peg$FAILED) {\n                                          s18 = peg$parse__();\n                                          if (s18 !== peg$FAILED) {\n                                            s19 = peg$parseRPAREN();\n                                            if (s19 !== peg$FAILED) {\n                                              s20 = peg$parse__();\n                                              if (s20 !== peg$FAILED) {\n                                                s21 = peg$parseRPAREN();\n                                                if (s21 !== peg$FAILED) {\n                                                  peg$savedPos = s0;\n                                                  s1 = peg$c241(s5, s13, s17);\n                                                  s0 = s1;\n                                                } else {\n                                                  peg$currPos = s0;\n                                                  s0 = peg$FAILED;\n                                                }\n                                              } else {\n                                                peg$currPos = s0;\n                                                s0 = peg$FAILED;\n                                              }\n                                            } else {\n                                              peg$currPos = s0;\n                                              s0 = peg$FAILED;\n                                            }\n                                          } else {\n                                            peg$currPos = s0;\n                                            s0 = peg$FAILED;\n                                          }\n                                        } else {\n                                          peg$currPos = s0;\n                                          s0 = peg$FAILED;\n                                        }\n                                      } else {\n                                        peg$currPos = s0;\n                                        s0 = peg$FAILED;\n                                      }\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseKW_CAST();\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parse__();\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseLPAREN();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parse__();\n                if (s4 !== peg$FAILED) {\n                  s5 = peg$parseexpr();\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      s7 = peg$parseKW_AS();\n                      if (s7 !== peg$FAILED) {\n                        s8 = peg$parse__();\n                        if (s8 !== peg$FAILED) {\n                          s9 = peg$parsesignedness();\n                          if (s9 !== peg$FAILED) {\n                            s10 = peg$parse__();\n                            if (s10 !== peg$FAILED) {\n                              s11 = peg$parseKW_INTEGER();\n                              if (s11 === peg$FAILED) {\n                                s11 = null;\n                              }\n                              if (s11 !== peg$FAILED) {\n                                s12 = peg$parse__();\n                                if (s12 !== peg$FAILED) {\n                                  s13 = peg$parseRPAREN();\n                                  if (s13 !== peg$FAILED) {\n                                    peg$savedPos = s0;\n                                    s1 = peg$c242(s5, s9, s11);\n                                    s0 = s1;\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesignedness() {\n    var s0;\n\n    s0 = peg$parseKW_SIGNED();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNSIGNED();\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral() {\n    var s0;\n\n    s0 = peg$parseliteral_string();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseliteral_numeric();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseliteral_bool();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseliteral_null();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseliteral_datetime();\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseliteral();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parseliteral();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parseliteral();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c243();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_not_null() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NOT_NULL();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c244();\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parseliteral_bool() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TRUE();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c245();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_FALSE();\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c246();\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_string() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 1).toLowerCase() === peg$c247) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c248); }\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c157;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c158); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c157;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c158); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c249(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 1).toLowerCase() === peg$c247) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c248); }\n      }\n      if (s1 === peg$FAILED) {\n        s1 = null;\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c152;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c153); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c152;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c153); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c250(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_datetime() {\n    var s0, s1, s2, s3, s4, s5, s6;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_TIME();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIMESTAMP();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_DATETIME();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 39) {\n          s4 = peg$c157;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c158); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = [];\n          s6 = peg$parsesingle_char();\n          while (s6 !== peg$FAILED) {\n            s5.push(s6);\n            s6 = peg$parsesingle_char();\n          }\n          if (s5 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 39) {\n              s6 = peg$c157;\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c158); }\n            }\n            if (s6 !== peg$FAILED) {\n              s4 = [s4, s5, s6];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c251(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_TIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATE();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_DATETIME();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parse__();\n        if (s2 !== peg$FAILED) {\n          s3 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 34) {\n            s4 = peg$c152;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c153); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            s6 = peg$parsesingle_quote_char();\n            while (s6 !== peg$FAILED) {\n              s5.push(s6);\n              s6 = peg$parsesingle_quote_char();\n            }\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 34) {\n                s6 = peg$c152;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c153); }\n              }\n              if (s6 !== peg$FAILED) {\n                s4 = [s4, s5, s6];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n          if (s3 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c251(s1, s3);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_quote_char() {\n    var s0;\n\n    if (peg$c252.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c253); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parsesingle_char() {\n    var s0;\n\n    if (peg$c254.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c255); }\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseescape_char();\n    }\n\n    return s0;\n  }\n\n  function peg$parseescape_char() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c256) {\n      s1 = peg$c256;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c257); }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c258();\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.substr(peg$currPos, 2) === peg$c259) {\n        s1 = peg$c259;\n        peg$currPos += 2;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c260); }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c261();\n      }\n      s0 = s1;\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.substr(peg$currPos, 2) === peg$c262) {\n          s1 = peg$c262;\n          peg$currPos += 2;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c263); }\n        }\n        if (s1 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c264();\n        }\n        s0 = s1;\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.substr(peg$currPos, 2) === peg$c265) {\n            s1 = peg$c265;\n            peg$currPos += 2;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c266); }\n          }\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c267();\n          }\n          s0 = s1;\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            if (input.substr(peg$currPos, 2) === peg$c268) {\n              s1 = peg$c268;\n              peg$currPos += 2;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c269); }\n            }\n            if (s1 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c270();\n            }\n            s0 = s1;\n            if (s0 === peg$FAILED) {\n              s0 = peg$currPos;\n              if (input.substr(peg$currPos, 2) === peg$c271) {\n                s1 = peg$c271;\n                peg$currPos += 2;\n              } else {\n                s1 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c272); }\n              }\n              if (s1 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c273();\n              }\n              s0 = s1;\n              if (s0 === peg$FAILED) {\n                s0 = peg$currPos;\n                if (input.substr(peg$currPos, 2) === peg$c274) {\n                  s1 = peg$c274;\n                  peg$currPos += 2;\n                } else {\n                  s1 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c275); }\n                }\n                if (s1 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c276();\n                }\n                s0 = s1;\n                if (s0 === peg$FAILED) {\n                  s0 = peg$currPos;\n                  if (input.substr(peg$currPos, 2) === peg$c277) {\n                    s1 = peg$c277;\n                    peg$currPos += 2;\n                  } else {\n                    s1 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c278); }\n                  }\n                  if (s1 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c279();\n                  }\n                  s0 = s1;\n                  if (s0 === peg$FAILED) {\n                    s0 = peg$currPos;\n                    if (input.substr(peg$currPos, 2) === peg$c280) {\n                      s1 = peg$c280;\n                      peg$currPos += 2;\n                    } else {\n                      s1 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c281); }\n                    }\n                    if (s1 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c282();\n                    }\n                    s0 = s1;\n                    if (s0 === peg$FAILED) {\n                      s0 = peg$currPos;\n                      if (input.substr(peg$currPos, 2) === peg$c283) {\n                        s1 = peg$c283;\n                        peg$currPos += 2;\n                      } else {\n                        s1 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c284); }\n                      }\n                      if (s1 !== peg$FAILED) {\n                        s2 = peg$parsehexDigit();\n                        if (s2 !== peg$FAILED) {\n                          s3 = peg$parsehexDigit();\n                          if (s3 !== peg$FAILED) {\n                            s4 = peg$parsehexDigit();\n                            if (s4 !== peg$FAILED) {\n                              s5 = peg$parsehexDigit();\n                              if (s5 !== peg$FAILED) {\n                                peg$savedPos = s0;\n                                s1 = peg$c285(s2, s3, s4, s5);\n                                s0 = s1;\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                      if (s0 === peg$FAILED) {\n                        s0 = peg$currPos;\n                        if (input.charCodeAt(peg$currPos) === 92) {\n                          s1 = peg$c286;\n                          peg$currPos++;\n                        } else {\n                          s1 = peg$FAILED;\n                          if (peg$silentFails === 0) { peg$fail(peg$c287); }\n                        }\n                        if (s1 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c288();\n                        }\n                        s0 = s1;\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_terminator() {\n    var s0;\n\n    if (peg$c289.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c290); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseliteral_numeric() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsenumber();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c291(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parseint();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsefrac();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexp();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c292(s1, s2, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseint();\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parsefrac();\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c293(s1, s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parseint();\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parseexp();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c294(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parseint();\n          if (s1 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c295(s1);\n          }\n          s0 = s1;\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseint() {\n    var s0, s1, s2;\n\n    s0 = peg$parsedigits();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsedigit();\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 45) {\n          s1 = peg$c132;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c133); }\n        }\n        if (s1 === peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 43) {\n            s1 = peg$c130;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c131); }\n          }\n        }\n        if (s1 !== peg$FAILED) {\n          s2 = peg$parsedigits();\n          if (s2 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c296(s1, s2);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          if (input.charCodeAt(peg$currPos) === 45) {\n            s1 = peg$c132;\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c133); }\n          }\n          if (s1 === peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 43) {\n              s1 = peg$c130;\n              peg$currPos++;\n            } else {\n              s1 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c131); }\n            }\n          }\n          if (s1 !== peg$FAILED) {\n            s2 = peg$parsedigit();\n            if (s2 !== peg$FAILED) {\n              peg$savedPos = s0;\n              s1 = peg$c297(s1, s2);\n              s0 = s1;\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsefrac() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s1 = peg$c298;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c299); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c300(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseexp() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsee();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsedigits();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c301(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigits() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsedigit();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsedigit();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c302(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c303.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c304); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsehexDigit() {\n    var s0;\n\n    if (peg$c305.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c306); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsee() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    if (peg$c307.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c308); }\n    }\n    if (s1 !== peg$FAILED) {\n      if (peg$c309.test(input.charAt(peg$currPos))) {\n        s2 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c310); }\n      }\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c311(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c312) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c313); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DEFAULT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c314) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c315); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT_NULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c316) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c317); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c318) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c319); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c320) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c321); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FALSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c322) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c323); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DROP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c324) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c325); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c326();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c327) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c328); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SELECT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c329) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c330); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IF_NOT_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 13).toLowerCase() === peg$c331) {\n      s1 = input.substr(peg$currPos, 13);\n      peg$currPos += 13;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c332); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RECURSIVE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c333) {\n      s1 = peg$c333;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c334); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IGNORE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c335) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c336); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXPLAIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c337) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c338); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PARTITION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c339) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c340); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c341();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTO() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c342) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c343); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FROM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c344) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c345); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c346) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c347); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNLOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c348) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c349); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCK() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c350) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c351); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c24) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c25); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c352) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c353); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c354();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TABLES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c355) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c356); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c357();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLLATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c358) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c359); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c360();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c361) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c362); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LEFT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c363) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c364); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_RIGHT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c365) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c366); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c367) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c368); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INNER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c369) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c370); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CROSS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c371) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c372); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JOIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c373) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c374); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OUTER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c375) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c376); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OVER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c377) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c378); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c379) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c380); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c381) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c382); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c383();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VALUES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c384) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c385); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c386) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c387); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHERE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c388) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c389); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WITH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c390) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c391); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GROUP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c392) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c393); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c394) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c395); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c396) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c397); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_HAVING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c398) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c399); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WINDOW() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c400) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c401); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ORDINAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c402) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c403); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c404();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIMIT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c405) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c406); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OFFSET() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c407) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c408); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c409();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ASC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c410) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c411); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c412();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DESC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c413) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c414); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c415();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c416) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c417); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c418();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DISTINCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c419) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c420); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c421();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BETWEEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c422) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c423); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c424();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c425) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c426); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c427();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_IS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c428) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c429); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c430();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LIKE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c431) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c432); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c433();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXISTS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c434) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c435); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c436();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c437) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c438); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c439();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c440) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c441); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c442();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_OR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2).toLowerCase() === peg$c443) {\n      s1 = input.substr(peg$currPos, 2);\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c444); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c445();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COUNT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c446) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c447); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c448();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MAX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c449) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c450); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c451();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MIN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c452) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c453); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c454();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SUM() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c455) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c456); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c457();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_AVG() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c458) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c459); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c460();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_EXTRACT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c461) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c462); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c463();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CALL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c464) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c465); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c466();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CASE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c467) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c468); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_WHEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c469) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c470); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_THEN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c471) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c472); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ELSE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c473) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c474); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_END() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c475) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c476); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CAST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c477) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c478); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ARRAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c479) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c480); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c481();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BYTES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c482) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c483); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c484();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BOOL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c485) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c486); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c487();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c488) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c489); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c490();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GEOGRAPHY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c491) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c492); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c493();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_VARCHAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c494) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c495); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c496();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_NUMERIC() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c497) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c498); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c499();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DECIMAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c500) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c501); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c502();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c503) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c504); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c505();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNSIGNED() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c506) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c507); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c508();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c509) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c510); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c511();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ZEROFILL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c512) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c513); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c514();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTEGER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c515) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c516); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c517();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_JSON() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c518) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c519); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c520();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SMALLINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c521) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c522); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c523();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRING() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c524) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c525); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c526();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_STRUCT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c527) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c528); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c529();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c530) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c531); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c532();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TINYTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c533) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c534); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c535();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c536) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c537); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c538();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_MEDIUMTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c539) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c540); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c541();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LONGTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c542) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c543); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c544();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_BIGINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c545) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c546); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c547();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FLOAT_64() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c548) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c549); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c550();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DOUBLE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c551) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c552); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c553();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c554) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c555); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c556();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_DATETIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c557) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c558); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c559();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ROWS() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c560) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c561); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c562();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c563) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c564); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c565();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9).toLowerCase() === peg$c566) {\n      s1 = input.substr(peg$currPos, 9);\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c567); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c568();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_TRUNCATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c569) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c570); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c571();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c572) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c573); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c574();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c575) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c576); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c577();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD_DATE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c578) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c579); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c580();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INTERVAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c581) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c582); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c583();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_YEAR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c235) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c236); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c584();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MONTH() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c221) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c222); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c585();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_DAY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c197) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c198); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c586();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_HOUR() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 4).toLowerCase() === peg$c207) {\n      s1 = input.substr(peg$currPos, 4);\n      peg$currPos += 4;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c208); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c587();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_MINUTE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c219) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c220); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c588();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIT_SECOND() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c225) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c226); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c589();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIME() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c590) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c591); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c592();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CURRENT_TIMESTAMP() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 17).toLowerCase() === peg$c593) {\n      s1 = input.substr(peg$currPos, 17);\n      peg$currPos += 17;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c594); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c595();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION_USER() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c596) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c597); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c598();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_GLOBAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c599) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c600); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c601();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_SESSION() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c602) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c603); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c604();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_LOCAL() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c605) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c606); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c607();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PIVOT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c608) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c609); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c610();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c611) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c612); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c613();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_PERSIST_ONLY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 12).toLowerCase() === peg$c614) {\n      s1 = input.substr(peg$currPos, 12);\n      peg$currPos += 12;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c615); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c616();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_ADD() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c617) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c618); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c619();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COLUMN() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c620) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c621); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c622();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_INDEX() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5).toLowerCase() === peg$c623) {\n      s1 = input.substr(peg$currPos, 5);\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c624); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c625();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_KEY() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 3).toLowerCase() === peg$c626) {\n      s1 = input.substr(peg$currPos, 3);\n      peg$currPos += 3;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c627); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c628();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_FULLTEXT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 8).toLowerCase() === peg$c629) {\n      s1 = input.substr(peg$currPos, 8);\n      peg$currPos += 8;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c630); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c631();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_UNIQUE() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6).toLowerCase() === peg$c632) {\n      s1 = input.substr(peg$currPos, 6);\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c633); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c634();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_COMMENT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 7).toLowerCase() === peg$c635) {\n      s1 = input.substr(peg$currPos, 7);\n      peg$currPos += 7;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c636); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c637();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_CONSTRAINT() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c638) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c639); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c640();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseKW_REFERENCES() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 10).toLowerCase() === peg$c641) {\n      s1 = input.substr(peg$currPos, 10);\n      peg$currPos += 10;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c642); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$currPos;\n      peg$silentFails++;\n      s3 = peg$parseident_start();\n      peg$silentFails--;\n      if (s3 === peg$FAILED) {\n        s2 = void 0;\n      } else {\n        peg$currPos = s2;\n        s2 = peg$FAILED;\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c643();\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseDOT() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 46) {\n      s0 = peg$c298;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c299); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseCOMMA() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c644;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c645); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSTAR() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 42) {\n      s0 = peg$c135;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c136); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s0 = peg$c2;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRPAREN() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 41) {\n      s0 = peg$c4;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c5); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 60) {\n      s0 = peg$c120;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c121); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRANGLE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 62) {\n      s0 = peg$c114;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c115); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 91) {\n      s0 = peg$c646;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c647); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseRBRAKE() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 93) {\n      s0 = peg$c648;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c649); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseSEMICOLON() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 59) {\n      s0 = peg$c650;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c651); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_CONCATENATION() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c652) {\n      s0 = peg$c652;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c653); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseOPERATOR_AND() {\n    var s0;\n\n    if (input.substr(peg$currPos, 2) === peg$c654) {\n      s0 = peg$c654;\n      peg$currPos += 2;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c655); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseLOGIC_OPERATOR() {\n    var s0;\n\n    s0 = peg$parseOPERATOR_CONCATENATION();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseOPERATOR_AND();\n    }\n\n    return s0;\n  }\n\n  function peg$parse__() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      s1 = peg$parsewhitespace();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parsecomment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parse___() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsewhitespace();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parsecomment();\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsewhitespace();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parsecomment();\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomment() {\n    var s0;\n\n    s0 = peg$parseblock_comment();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseline_comment();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsepound_sign_comment();\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseblock_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c656) {\n      s1 = peg$c656;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c657); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      if (input.substr(peg$currPos, 2) === peg$c658) {\n        s5 = peg$c658;\n        peg$currPos += 2;\n      } else {\n        s5 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c659); }\n      }\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        if (input.substr(peg$currPos, 2) === peg$c658) {\n          s5 = peg$c658;\n          peg$currPos += 2;\n        } else {\n          s5 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c659); }\n        }\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.substr(peg$currPos, 2) === peg$c658) {\n          s3 = peg$c658;\n          peg$currPos += 2;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c659); }\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseline_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 2) === peg$c660) {\n      s1 = peg$c660;\n      peg$currPos += 2;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c661); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsepound_sign_comment() {\n    var s0, s1, s2, s3, s4, s5;\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 35) {\n      s1 = peg$c662;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c663); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$currPos;\n      peg$silentFails++;\n      s5 = peg$parseEOL();\n      peg$silentFails--;\n      if (s5 === peg$FAILED) {\n        s4 = void 0;\n      } else {\n        peg$currPos = s4;\n        s4 = peg$FAILED;\n      }\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parsechar();\n        if (s5 !== peg$FAILED) {\n          s4 = [s4, s5];\n          s3 = s4;\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$currPos;\n        peg$silentFails++;\n        s5 = peg$parseEOL();\n        peg$silentFails--;\n        if (s5 === peg$FAILED) {\n          s4 = void 0;\n        } else {\n          peg$currPos = s4;\n          s4 = peg$FAILED;\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parsechar();\n          if (s5 !== peg$FAILED) {\n            s4 = [s4, s5];\n            s3 = s4;\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsechar() {\n    var s0;\n\n    if (input.length > peg$currPos) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c664); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseinterval_unit() {\n    var s0;\n\n    s0 = peg$parseKW_UNIT_YEAR();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parseKW_UNIT_MONTH();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parseKW_UNIT_DAY();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parseKW_UNIT_HOUR();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseKW_UNIT_MINUTE();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseKW_UNIT_SECOND();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewhitespace() {\n    var s0;\n\n    if (peg$c665.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c666); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOL() {\n    var s0, s1;\n\n    s0 = peg$parseEOF();\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c289.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c290); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c289.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c290); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parseEOF() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    peg$silentFails++;\n    if (input.length > peg$currPos) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c664); }\n    }\n    peg$silentFails--;\n    if (s1 === peg$FAILED) {\n      s0 = void 0;\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_list() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedata_type_alias();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$currPos;\n      s4 = peg$parse__();\n      if (s4 !== peg$FAILED) {\n        s5 = peg$parseCOMMA();\n        if (s5 !== peg$FAILED) {\n          s6 = peg$parse__();\n          if (s6 !== peg$FAILED) {\n            s7 = peg$parsedata_type_alias();\n            if (s7 !== peg$FAILED) {\n              s4 = [s4, s5, s6, s7];\n              s3 = s4;\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s3;\n        s3 = peg$FAILED;\n      }\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$currPos;\n        s4 = peg$parse__();\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseCOMMA();\n          if (s5 !== peg$FAILED) {\n            s6 = peg$parse__();\n            if (s6 !== peg$FAILED) {\n              s7 = peg$parsedata_type_alias();\n              if (s7 !== peg$FAILED) {\n                s4 = [s4, s5, s6, s7];\n                s3 = s4;\n              } else {\n                peg$currPos = s3;\n                s3 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s3;\n              s3 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s3;\n            s3 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s3;\n          s3 = peg$FAILED;\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c17(s1, s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type_alias() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parseident_name();\n    if (s2 !== peg$FAILED) {\n      peg$savedPos = peg$currPos;\n      s3 = peg$c667(s2);\n      if (s3) {\n        s3 = peg$FAILED;\n      } else {\n        s3 = void 0;\n      }\n      if (s3 !== peg$FAILED) {\n        peg$savedPos = s1;\n        s2 = peg$c668(s2);\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedata_type();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c669(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedata_type() {\n    var s0;\n\n    s0 = peg$parsestruct_type();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsearray_type();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsecharacter_string_type();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parsenumeric_type();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parsedatetime_type();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parsebool_byte_geography_type();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecharacter_string_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRING();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c670(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsenumeric_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_NUMERIC();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_INT_64();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_FLOAT_64();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c670(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsedatetime_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_DATE();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_DATETIME();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_TIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIMESTAMP();\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLPAREN();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = [];\n            if (peg$c303.test(input.charAt(peg$currPos))) {\n              s6 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s6 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c304); }\n            }\n            if (s6 !== peg$FAILED) {\n              while (s6 !== peg$FAILED) {\n                s5.push(s6);\n                if (peg$c303.test(input.charAt(peg$currPos))) {\n                  s6 = input.charAt(peg$currPos);\n                  peg$currPos++;\n                } else {\n                  s6 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c304); }\n                }\n              }\n            } else {\n              s5 = peg$FAILED;\n            }\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRPAREN();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c671(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseKW_DATE();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_DATETIME();\n        if (s1 === peg$FAILED) {\n          s1 = peg$parseKW_TIME();\n          if (s1 === peg$FAILED) {\n            s1 = peg$parseKW_TIMESTAMP();\n          }\n        }\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c670(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsebool_byte_geography_type() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_BYTES();\n    if (s1 === peg$FAILED) {\n      s1 = peg$parseKW_BOOL();\n      if (s1 === peg$FAILED) {\n        s1 = peg$parseKW_GEOGRAPHY();\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c670(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsearray_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_ARRAY();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c672(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsestruct_type() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    s1 = peg$parseKW_STRUCT();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parse__();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseLANGLE();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parse__();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsedata_type_list();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parse__();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseRANGLE();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c672(s1, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n\n    const reservedMap = {\n      'ARRAY': true,\n      'ALTER': true,\n      'ALL': true,\n      'ADD': true,\n      'AND': true,\n      'AS': true,\n      'ASC': true,\n\n      'BETWEEN': true,\n      'BY': true,\n\n      'CALL': true,\n      'CASE': true,\n      'CREATE': true,\n      'CROSS': true,\n      'CONTAINS': true,\n      'CURRENT_DATE': true,\n      'CURRENT_TIME': true,\n      'CURRENT_TIMESTAMP': true,\n      'CURRENT_USER': true,\n\n      'DELETE': true,\n      'DESC': true,\n      'DISTINCT': true,\n      'DROP': true,\n\n      'ELSE': true,\n      'END': true,\n      'EXISTS': true,\n      'EXPLAIN': true,\n\n      'FALSE': true,\n      'FROM': true,\n      'FULL': true,\n      'FOR': true,\n\n      'GROUP': true,\n\n      'HAVING': true,\n\n      'IN': true,\n      'INNER': true,\n      'INSERT': true,\n      'INTO': true,\n      'IS': true,\n\n      'JOIN': true,\n      'JSON': true,\n\n      'KEY': true,\n\n      'LEFT': true,\n      'LIKE': true,\n      'LIMIT': true,\n      'LOW_PRIORITY': true, // for lock table\n\n      'NOT': true,\n      'NULL': true,\n\n      'ON': true,\n      'OR': true,\n      'ORDER': true,\n      'OUTER': true,\n\n      'PARTITION': true,\n      'PIVOT': true,\n\n      'RECURSIVE': true,\n      'RENAME': true,\n      'READ': true, // for lock table\n      'RIGHT': true,\n\n      'SELECT': true,\n      'SESSION_USER': true,\n      'SET': true,\n      'SHOW': true,\n      'SYSTEM_USER': true,\n\n      'TABLE': true,\n      'THEN': true,\n      'TRUE': true,\n      'TRUNCATE': true,\n      'TYPE': true,   // reserved (MySQL)\n\n      'UNION': true,\n      'UPDATE': true,\n      'USING': true,\n\n      'VALUES': true,\n\n      'WINDOW': true,\n      'WITH': true,\n      'WHEN': true,\n      'WHERE': true,\n      'WRITE': true, // for lock table\n\n      'GLOBAL': true,\n      'SESSION': true,\n      'LOCAL': true,\n      'PERSIST': true,\n      'PERSIST_ONLY': true,\n      'UNNEST': true,\n    };\n\n    const DATA_TYPES = {\n      'BOOL': true,\n      'BYTE': true,\n      'DATE': true,\n      'DATETIME': true,\n      'FLOAT64': true,\n      'INT64': true,\n      'NUMERIC': true,\n      'STRING': true,\n      'TIME': true,\n      'TIMESTAMP': true,\n      'ARRAY': true,\n      'STRUCT': true,\n    }\n\n    function createUnaryExpr(op, e) {\n      return {\n        type: 'unary_expr',\n        operator: op,\n        expr: e\n      };\n    }\n\n    function createBinaryExpr(op, left, right) {\n      return {\n        type: 'binary_expr',\n        operator: op,\n        left: left,\n        right: right\n      };\n    }\n\n    function isBigInt(numberStr) {\n      const previousMaxSafe = BigInt(Number.MAX_SAFE_INTEGER)\n      const num = BigInt(numberStr)\n      if (num < previousMaxSafe) return false\n      return true\n    }\n\n    function createList(head, tail, po = 3) {\n      const result = [head];\n      for (let i = 0; i < tail.length; i++) {\n        delete tail[i][po].tableList\n        delete tail[i][po].columnList\n        result.push(tail[i][po]);\n      }\n      return result;\n    }\n\n    function createBinaryExprChain(head, tail) {\n      let result = head;\n      for (let i = 0; i < tail.length; i++) {\n        result = createBinaryExpr(tail[i][1], result, tail[i][3]);\n      }\n      return result;\n    }\n\n    function queryTableAlias(tableName) {\n      const alias = tableAlias[tableName]\n      if (alias) return alias\n      if (tableName) return tableName\n      return null\n    }\n\n    function columnListTableAlias(columnList) {\n      const newColumnsList = new Set()\n      const symbolChar = '::'\n      for(let column of columnList.keys()) {\n        const columnInfo = column.split(symbolChar)\n        if (!columnInfo) {\n          newColumnsList.add(column)\n          break\n        }\n        if (columnInfo && columnInfo[1]) columnInfo[1] = queryTableAlias(columnInfo[1])\n        newColumnsList.add(columnInfo.join(symbolChar))\n      }\n      return Array.from(newColumnsList)\n    }\n\n    function refreshColumnList(columnList) {\n      const columns = columnListTableAlias(columnList)\n      columnList.clear()\n      columns.forEach(col => columnList.add(col))\n    }\n\n    const cmpPrefixMap = {\n      '+': true,\n      '-': true,\n      '*': true,\n      '/': true,\n      '>': true,\n      '<': true,\n      '!': true,\n      '=': true,\n\n      //between\n      'B': true,\n      'b': true,\n      //for is or in\n      'I': true,\n      'i': true,\n      //for like\n      'L': true,\n      'l': true,\n      //for not\n      'N': true,\n      'n': true\n    };\n\n    // used for dependency analysis\n    let varList = [];\n\n    const tableList = new Set();\n    const columnList = new Set();\n    const tableAlias = {};\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n","import Parser from './src/parser'\nimport * as util from './src/util'\n\nexport {\n  Parser,\n  util,\n}\n\nif (global && global.window) {\n  global.window.NodeSQLParser = {\n    Parser,\n    util,\n  }\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","var bigInt = (function (undefined) {\r\n    \"use strict\";\r\n\r\n    var BASE = 1e7,\r\n        LOG_BASE = 7,\r\n        MAX_INT = 9007199254740992,\r\n        MAX_INT_ARR = smallToArray(MAX_INT),\r\n        DEFAULT_ALPHABET = \"0123456789abcdefghijklmnopqrstuvwxyz\";\r\n\r\n    var supportsNativeBigInt = typeof BigInt === \"function\";\r\n\r\n    function Integer(v, radix, alphabet, caseSensitive) {\r\n        if (typeof v === \"undefined\") return Integer[0];\r\n        if (typeof radix !== \"undefined\") return +radix === 10 && !alphabet ? parseValue(v) : parseBase(v, radix, alphabet, caseSensitive);\r\n        return parseValue(v);\r\n    }\r\n\r\n    function BigInteger(value, sign) {\r\n        this.value = value;\r\n        this.sign = sign;\r\n        this.isSmall = false;\r\n    }\r\n    BigInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function SmallInteger(value) {\r\n        this.value = value;\r\n        this.sign = value < 0;\r\n        this.isSmall = true;\r\n    }\r\n    SmallInteger.prototype = Object.create(Integer.prototype);\r\n\r\n    function NativeBigInt(value) {\r\n        this.value = value;\r\n    }\r\n    NativeBigInt.prototype = Object.create(Integer.prototype);\r\n\r\n    function isPrecise(n) {\r\n        return -MAX_INT < n && n < MAX_INT;\r\n    }\r\n\r\n    function smallToArray(n) { // For performance reasons doesn't reference BASE, need to change this function if BASE changes\r\n        if (n < 1e7)\r\n            return [n];\r\n        if (n < 1e14)\r\n            return [n % 1e7, Math.floor(n / 1e7)];\r\n        return [n % 1e7, Math.floor(n / 1e7) % 1e7, Math.floor(n / 1e14)];\r\n    }\r\n\r\n    function arrayToSmall(arr) { // If BASE changes this function may need to change\r\n        trim(arr);\r\n        var length = arr.length;\r\n        if (length < 4 && compareAbs(arr, MAX_INT_ARR) < 0) {\r\n            switch (length) {\r\n                case 0: return 0;\r\n                case 1: return arr[0];\r\n                case 2: return arr[0] + arr[1] * BASE;\r\n                default: return arr[0] + (arr[1] + arr[2] * BASE) * BASE;\r\n            }\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    function trim(v) {\r\n        var i = v.length;\r\n        while (v[--i] === 0);\r\n        v.length = i + 1;\r\n    }\r\n\r\n    function createArray(length) { // function shamelessly stolen from Yaffle's library https://github.com/Yaffle/BigInteger\r\n        var x = new Array(length);\r\n        var i = -1;\r\n        while (++i < length) {\r\n            x[i] = 0;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    function truncate(n) {\r\n        if (n > 0) return Math.floor(n);\r\n        return Math.ceil(n);\r\n    }\r\n\r\n    function add(a, b) { // assumes a and b are arrays with a.length >= b.length\r\n        var l_a = a.length,\r\n            l_b = b.length,\r\n            r = new Array(l_a),\r\n            carry = 0,\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l_b; i++) {\r\n            sum = a[i] + b[i] + carry;\r\n            carry = sum >= base ? 1 : 0;\r\n            r[i] = sum - carry * base;\r\n        }\r\n        while (i < l_a) {\r\n            sum = a[i] + carry;\r\n            carry = sum === base ? 1 : 0;\r\n            r[i++] = sum - carry * base;\r\n        }\r\n        if (carry > 0) r.push(carry);\r\n        return r;\r\n    }\r\n\r\n    function addAny(a, b) {\r\n        if (a.length >= b.length) return add(a, b);\r\n        return add(b, a);\r\n    }\r\n\r\n    function addSmall(a, carry) { // assumes a is array, carry is number with 0 <= carry < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            sum, i;\r\n        for (i = 0; i < l; i++) {\r\n            sum = a[i] - base + carry;\r\n            carry = Math.floor(sum / base);\r\n            r[i] = sum - carry * base;\r\n            carry += 1;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall) {\r\n            return new BigInteger(addSmall(a, Math.abs(b)), this.sign);\r\n        }\r\n        return new BigInteger(addAny(a, b), this.sign);\r\n    };\r\n    BigInteger.prototype.plus = BigInteger.prototype.add;\r\n\r\n    SmallInteger.prototype.add = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.subtract(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            if (isPrecise(a + b)) return new SmallInteger(a + b);\r\n            b = smallToArray(Math.abs(b));\r\n        }\r\n        return new BigInteger(addSmall(b, Math.abs(a)), a < 0);\r\n    };\r\n    SmallInteger.prototype.plus = SmallInteger.prototype.add;\r\n\r\n    NativeBigInt.prototype.add = function (v) {\r\n        return new NativeBigInt(this.value + parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.plus = NativeBigInt.prototype.add;\r\n\r\n    function subtract(a, b) { // assumes a and b are arrays with a >= b\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            r = new Array(a_l),\r\n            borrow = 0,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < b_l; i++) {\r\n            difference = a[i] - borrow - b[i];\r\n            if (difference < 0) {\r\n                difference += base;\r\n                borrow = 1;\r\n            } else borrow = 0;\r\n            r[i] = difference;\r\n        }\r\n        for (i = b_l; i < a_l; i++) {\r\n            difference = a[i] - borrow;\r\n            if (difference < 0) difference += base;\r\n            else {\r\n                r[i++] = difference;\r\n                break;\r\n            }\r\n            r[i] = difference;\r\n        }\r\n        for (; i < a_l; i++) {\r\n            r[i] = a[i];\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function subtractAny(a, b, sign) {\r\n        var value;\r\n        if (compareAbs(a, b) >= 0) {\r\n            value = subtract(a, b);\r\n        } else {\r\n            value = subtract(b, a);\r\n            sign = !sign;\r\n        }\r\n        value = arrayToSmall(value);\r\n        if (typeof value === \"number\") {\r\n            if (sign) value = -value;\r\n            return new SmallInteger(value);\r\n        }\r\n        return new BigInteger(value, sign);\r\n    }\r\n\r\n    function subtractSmall(a, b, sign) { // assumes a is array, b is number with 0 <= b < MAX_INT\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            carry = -b,\r\n            base = BASE,\r\n            i, difference;\r\n        for (i = 0; i < l; i++) {\r\n            difference = a[i] + carry;\r\n            carry = Math.floor(difference / base);\r\n            difference %= base;\r\n            r[i] = difference < 0 ? difference + base : difference;\r\n        }\r\n        r = arrayToSmall(r);\r\n        if (typeof r === \"number\") {\r\n            if (sign) r = -r;\r\n            return new SmallInteger(r);\r\n        } return new BigInteger(r, sign);\r\n    }\r\n\r\n    BigInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        if (this.sign !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var a = this.value, b = n.value;\r\n        if (n.isSmall)\r\n            return subtractSmall(a, Math.abs(b), this.sign);\r\n        return subtractAny(a, b, this.sign);\r\n    };\r\n    BigInteger.prototype.minus = BigInteger.prototype.subtract;\r\n\r\n    SmallInteger.prototype.subtract = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value;\r\n        if (a < 0 !== n.sign) {\r\n            return this.add(n.negate());\r\n        }\r\n        var b = n.value;\r\n        if (n.isSmall) {\r\n            return new SmallInteger(a - b);\r\n        }\r\n        return subtractSmall(b, Math.abs(a), a >= 0);\r\n    };\r\n    SmallInteger.prototype.minus = SmallInteger.prototype.subtract;\r\n\r\n    NativeBigInt.prototype.subtract = function (v) {\r\n        return new NativeBigInt(this.value - parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.minus = NativeBigInt.prototype.subtract;\r\n\r\n    BigInteger.prototype.negate = function () {\r\n        return new BigInteger(this.value, !this.sign);\r\n    };\r\n    SmallInteger.prototype.negate = function () {\r\n        var sign = this.sign;\r\n        var small = new SmallInteger(-this.value);\r\n        small.sign = !sign;\r\n        return small;\r\n    };\r\n    NativeBigInt.prototype.negate = function () {\r\n        return new NativeBigInt(-this.value);\r\n    }\r\n\r\n    BigInteger.prototype.abs = function () {\r\n        return new BigInteger(this.value, false);\r\n    };\r\n    SmallInteger.prototype.abs = function () {\r\n        return new SmallInteger(Math.abs(this.value));\r\n    };\r\n    NativeBigInt.prototype.abs = function () {\r\n        return new NativeBigInt(this.value >= 0 ? this.value : -this.value);\r\n    }\r\n\r\n\r\n    function multiplyLong(a, b) {\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            l = a_l + b_l,\r\n            r = createArray(l),\r\n            base = BASE,\r\n            product, carry, i, a_i, b_j;\r\n        for (i = 0; i < a_l; ++i) {\r\n            a_i = a[i];\r\n            for (var j = 0; j < b_l; ++j) {\r\n                b_j = b[j];\r\n                product = a_i * b_j + r[i + j];\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n                r[i + j + 1] += carry;\r\n            }\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    function multiplySmall(a, b) { // assumes a is array, b is number with |b| < BASE\r\n        var l = a.length,\r\n            r = new Array(l),\r\n            base = BASE,\r\n            carry = 0,\r\n            product, i;\r\n        for (i = 0; i < l; i++) {\r\n            product = a[i] * b + carry;\r\n            carry = Math.floor(product / base);\r\n            r[i] = product - carry * base;\r\n        }\r\n        while (carry > 0) {\r\n            r[i++] = carry % base;\r\n            carry = Math.floor(carry / base);\r\n        }\r\n        return r;\r\n    }\r\n\r\n    function shiftLeft(x, n) {\r\n        var r = [];\r\n        while (n-- > 0) r.push(0);\r\n        return r.concat(x);\r\n    }\r\n\r\n    function multiplyKaratsuba(x, y) {\r\n        var n = Math.max(x.length, y.length);\r\n\r\n        if (n <= 30) return multiplyLong(x, y);\r\n        n = Math.ceil(n / 2);\r\n\r\n        var b = x.slice(n),\r\n            a = x.slice(0, n),\r\n            d = y.slice(n),\r\n            c = y.slice(0, n);\r\n\r\n        var ac = multiplyKaratsuba(a, c),\r\n            bd = multiplyKaratsuba(b, d),\r\n            abcd = multiplyKaratsuba(addAny(a, b), addAny(c, d));\r\n\r\n        var product = addAny(addAny(ac, shiftLeft(subtract(subtract(abcd, ac), bd), n)), shiftLeft(bd, 2 * n));\r\n        trim(product);\r\n        return product;\r\n    }\r\n\r\n    // The following function is derived from a surface fit of a graph plotting the performance difference\r\n    // between long multiplication and karatsuba multiplication versus the lengths of the two arrays.\r\n    function useKaratsuba(l1, l2) {\r\n        return -0.012 * l1 - 0.012 * l2 + 0.000015 * l1 * l2 > 0;\r\n    }\r\n\r\n    BigInteger.prototype.multiply = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value, b = n.value,\r\n            sign = this.sign !== n.sign,\r\n            abs;\r\n        if (n.isSmall) {\r\n            if (b === 0) return Integer[0];\r\n            if (b === 1) return this;\r\n            if (b === -1) return this.negate();\r\n            abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                return new BigInteger(multiplySmall(a, abs), sign);\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        if (useKaratsuba(a.length, b.length)) // Karatsuba is only faster for certain array sizes\r\n            return new BigInteger(multiplyKaratsuba(a, b), sign);\r\n        return new BigInteger(multiplyLong(a, b), sign);\r\n    };\r\n\r\n    BigInteger.prototype.times = BigInteger.prototype.multiply;\r\n\r\n    function multiplySmallAndArray(a, b, sign) { // a >= 0\r\n        if (a < BASE) {\r\n            return new BigInteger(multiplySmall(b, a), sign);\r\n        }\r\n        return new BigInteger(multiplyLong(b, smallToArray(a)), sign);\r\n    }\r\n    SmallInteger.prototype._multiplyBySmall = function (a) {\r\n        if (isPrecise(a.value * this.value)) {\r\n            return new SmallInteger(a.value * this.value);\r\n        }\r\n        return multiplySmallAndArray(Math.abs(a.value), smallToArray(Math.abs(this.value)), this.sign !== a.sign);\r\n    };\r\n    BigInteger.prototype._multiplyBySmall = function (a) {\r\n        if (a.value === 0) return Integer[0];\r\n        if (a.value === 1) return this;\r\n        if (a.value === -1) return this.negate();\r\n        return multiplySmallAndArray(Math.abs(a.value), this.value, this.sign !== a.sign);\r\n    };\r\n    SmallInteger.prototype.multiply = function (v) {\r\n        return parseValue(v)._multiplyBySmall(this);\r\n    };\r\n    SmallInteger.prototype.times = SmallInteger.prototype.multiply;\r\n\r\n    NativeBigInt.prototype.multiply = function (v) {\r\n        return new NativeBigInt(this.value * parseValue(v).value);\r\n    }\r\n    NativeBigInt.prototype.times = NativeBigInt.prototype.multiply;\r\n\r\n    function square(a) {\r\n        //console.assert(2 * BASE * BASE < MAX_INT);\r\n        var l = a.length,\r\n            r = createArray(l + l),\r\n            base = BASE,\r\n            product, carry, i, a_i, a_j;\r\n        for (i = 0; i < l; i++) {\r\n            a_i = a[i];\r\n            carry = 0 - a_i * a_i;\r\n            for (var j = i; j < l; j++) {\r\n                a_j = a[j];\r\n                product = 2 * (a_i * a_j) + r[i + j] + carry;\r\n                carry = Math.floor(product / base);\r\n                r[i + j] = product - carry * base;\r\n            }\r\n            r[i + l] = carry;\r\n        }\r\n        trim(r);\r\n        return r;\r\n    }\r\n\r\n    BigInteger.prototype.square = function () {\r\n        return new BigInteger(square(this.value), false);\r\n    };\r\n\r\n    SmallInteger.prototype.square = function () {\r\n        var value = this.value * this.value;\r\n        if (isPrecise(value)) return new SmallInteger(value);\r\n        return new BigInteger(square(smallToArray(Math.abs(this.value))), false);\r\n    };\r\n\r\n    NativeBigInt.prototype.square = function (v) {\r\n        return new NativeBigInt(this.value * this.value);\r\n    }\r\n\r\n    function divMod1(a, b) { // Left over from previous version. Performs faster than divMod2 on smaller input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            base = BASE,\r\n            result = createArray(b.length),\r\n            divisorMostSignificantDigit = b[b_l - 1],\r\n            // normalization\r\n            lambda = Math.ceil(base / (2 * divisorMostSignificantDigit)),\r\n            remainder = multiplySmall(a, lambda),\r\n            divisor = multiplySmall(b, lambda),\r\n            quotientDigit, shift, carry, borrow, i, l, q;\r\n        if (remainder.length <= a_l) remainder.push(0);\r\n        divisor.push(0);\r\n        divisorMostSignificantDigit = divisor[b_l - 1];\r\n        for (shift = a_l - b_l; shift >= 0; shift--) {\r\n            quotientDigit = base - 1;\r\n            if (remainder[shift + b_l] !== divisorMostSignificantDigit) {\r\n                quotientDigit = Math.floor((remainder[shift + b_l] * base + remainder[shift + b_l - 1]) / divisorMostSignificantDigit);\r\n            }\r\n            // quotientDigit <= base - 1\r\n            carry = 0;\r\n            borrow = 0;\r\n            l = divisor.length;\r\n            for (i = 0; i < l; i++) {\r\n                carry += quotientDigit * divisor[i];\r\n                q = Math.floor(carry / base);\r\n                borrow += remainder[shift + i] - (carry - q * base);\r\n                carry = q;\r\n                if (borrow < 0) {\r\n                    remainder[shift + i] = borrow + base;\r\n                    borrow = -1;\r\n                } else {\r\n                    remainder[shift + i] = borrow;\r\n                    borrow = 0;\r\n                }\r\n            }\r\n            while (borrow !== 0) {\r\n                quotientDigit -= 1;\r\n                carry = 0;\r\n                for (i = 0; i < l; i++) {\r\n                    carry += remainder[shift + i] - base + divisor[i];\r\n                    if (carry < 0) {\r\n                        remainder[shift + i] = carry + base;\r\n                        carry = 0;\r\n                    } else {\r\n                        remainder[shift + i] = carry;\r\n                        carry = 1;\r\n                    }\r\n                }\r\n                borrow += carry;\r\n            }\r\n            result[shift] = quotientDigit;\r\n        }\r\n        // denormalization\r\n        remainder = divModSmall(remainder, lambda)[0];\r\n        return [arrayToSmall(result), arrayToSmall(remainder)];\r\n    }\r\n\r\n    function divMod2(a, b) { // Implementation idea shamelessly stolen from Silent Matt's library http://silentmatt.com/biginteger/\r\n        // Performs faster than divMod1 on larger input sizes.\r\n        var a_l = a.length,\r\n            b_l = b.length,\r\n            result = [],\r\n            part = [],\r\n            base = BASE,\r\n            guess, xlen, highx, highy, check;\r\n        while (a_l) {\r\n            part.unshift(a[--a_l]);\r\n            trim(part);\r\n            if (compareAbs(part, b) < 0) {\r\n                result.push(0);\r\n                continue;\r\n            }\r\n            xlen = part.length;\r\n            highx = part[xlen - 1] * base + part[xlen - 2];\r\n            highy = b[b_l - 1] * base + b[b_l - 2];\r\n            if (xlen > b_l) {\r\n                highx = (highx + 1) * base;\r\n            }\r\n            guess = Math.ceil(highx / highy);\r\n            do {\r\n                check = multiplySmall(b, guess);\r\n                if (compareAbs(check, part) <= 0) break;\r\n                guess--;\r\n            } while (guess);\r\n            result.push(guess);\r\n            part = subtract(part, check);\r\n        }\r\n        result.reverse();\r\n        return [arrayToSmall(result), arrayToSmall(part)];\r\n    }\r\n\r\n    function divModSmall(value, lambda) {\r\n        var length = value.length,\r\n            quotient = createArray(length),\r\n            base = BASE,\r\n            i, q, remainder, divisor;\r\n        remainder = 0;\r\n        for (i = length - 1; i >= 0; --i) {\r\n            divisor = remainder * base + value[i];\r\n            q = truncate(divisor / lambda);\r\n            remainder = divisor - q * lambda;\r\n            quotient[i] = q | 0;\r\n        }\r\n        return [quotient, remainder | 0];\r\n    }\r\n\r\n    function divModAny(self, v) {\r\n        var value, n = parseValue(v);\r\n        if (supportsNativeBigInt) {\r\n            return [new NativeBigInt(self.value / n.value), new NativeBigInt(self.value % n.value)];\r\n        }\r\n        var a = self.value, b = n.value;\r\n        var quotient;\r\n        if (b === 0) throw new Error(\"Cannot divide by zero\");\r\n        if (self.isSmall) {\r\n            if (n.isSmall) {\r\n                return [new SmallInteger(truncate(a / b)), new SmallInteger(a % b)];\r\n            }\r\n            return [Integer[0], self];\r\n        }\r\n        if (n.isSmall) {\r\n            if (b === 1) return [self, Integer[0]];\r\n            if (b == -1) return [self.negate(), Integer[0]];\r\n            var abs = Math.abs(b);\r\n            if (abs < BASE) {\r\n                value = divModSmall(a, abs);\r\n                quotient = arrayToSmall(value[0]);\r\n                var remainder = value[1];\r\n                if (self.sign) remainder = -remainder;\r\n                if (typeof quotient === \"number\") {\r\n                    if (self.sign !== n.sign) quotient = -quotient;\r\n                    return [new SmallInteger(quotient), new SmallInteger(remainder)];\r\n                }\r\n                return [new BigInteger(quotient, self.sign !== n.sign), new SmallInteger(remainder)];\r\n            }\r\n            b = smallToArray(abs);\r\n        }\r\n        var comparison = compareAbs(a, b);\r\n        if (comparison === -1) return [Integer[0], self];\r\n        if (comparison === 0) return [Integer[self.sign === n.sign ? 1 : -1], Integer[0]];\r\n\r\n        // divMod1 is faster on smaller input sizes\r\n        if (a.length + b.length <= 200)\r\n            value = divMod1(a, b);\r\n        else value = divMod2(a, b);\r\n\r\n        quotient = value[0];\r\n        var qSign = self.sign !== n.sign,\r\n            mod = value[1],\r\n            mSign = self.sign;\r\n        if (typeof quotient === \"number\") {\r\n            if (qSign) quotient = -quotient;\r\n            quotient = new SmallInteger(quotient);\r\n        } else quotient = new BigInteger(quotient, qSign);\r\n        if (typeof mod === \"number\") {\r\n            if (mSign) mod = -mod;\r\n            mod = new SmallInteger(mod);\r\n        } else mod = new BigInteger(mod, mSign);\r\n        return [quotient, mod];\r\n    }\r\n\r\n    BigInteger.prototype.divmod = function (v) {\r\n        var result = divModAny(this, v);\r\n        return {\r\n            quotient: result[0],\r\n            remainder: result[1]\r\n        };\r\n    };\r\n    NativeBigInt.prototype.divmod = SmallInteger.prototype.divmod = BigInteger.prototype.divmod;\r\n\r\n\r\n    BigInteger.prototype.divide = function (v) {\r\n        return divModAny(this, v)[0];\r\n    };\r\n    NativeBigInt.prototype.over = NativeBigInt.prototype.divide = function (v) {\r\n        return new NativeBigInt(this.value / parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.over = SmallInteger.prototype.divide = BigInteger.prototype.over = BigInteger.prototype.divide;\r\n\r\n    BigInteger.prototype.mod = function (v) {\r\n        return divModAny(this, v)[1];\r\n    };\r\n    NativeBigInt.prototype.mod = NativeBigInt.prototype.remainder = function (v) {\r\n        return new NativeBigInt(this.value % parseValue(v).value);\r\n    };\r\n    SmallInteger.prototype.remainder = SmallInteger.prototype.mod = BigInteger.prototype.remainder = BigInteger.prototype.mod;\r\n\r\n    BigInteger.prototype.pow = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value,\r\n            value, x, y;\r\n        if (b === 0) return Integer[1];\r\n        if (a === 0) return Integer[0];\r\n        if (a === 1) return Integer[1];\r\n        if (a === -1) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.sign) {\r\n            return Integer[0];\r\n        }\r\n        if (!n.isSmall) throw new Error(\"The exponent \" + n.toString() + \" is too large.\");\r\n        if (this.isSmall) {\r\n            if (isPrecise(value = Math.pow(a, b)))\r\n                return new SmallInteger(truncate(value));\r\n        }\r\n        x = this;\r\n        y = Integer[1];\r\n        while (true) {\r\n            if (b & 1 === 1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === 0) break;\r\n            b /= 2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    };\r\n    SmallInteger.prototype.pow = BigInteger.prototype.pow;\r\n\r\n    NativeBigInt.prototype.pow = function (v) {\r\n        var n = parseValue(v);\r\n        var a = this.value, b = n.value;\r\n        var _0 = BigInt(0), _1 = BigInt(1), _2 = BigInt(2);\r\n        if (b === _0) return Integer[1];\r\n        if (a === _0) return Integer[0];\r\n        if (a === _1) return Integer[1];\r\n        if (a === BigInt(-1)) return n.isEven() ? Integer[1] : Integer[-1];\r\n        if (n.isNegative()) return new NativeBigInt(_0);\r\n        var x = this;\r\n        var y = Integer[1];\r\n        while (true) {\r\n            if ((b & _1) === _1) {\r\n                y = y.times(x);\r\n                --b;\r\n            }\r\n            if (b === _0) break;\r\n            b /= _2;\r\n            x = x.square();\r\n        }\r\n        return y;\r\n    }\r\n\r\n    BigInteger.prototype.modPow = function (exp, mod) {\r\n        exp = parseValue(exp);\r\n        mod = parseValue(mod);\r\n        if (mod.isZero()) throw new Error(\"Cannot take modPow with modulus 0\");\r\n        var r = Integer[1],\r\n            base = this.mod(mod);\r\n        if (exp.isNegative()) {\r\n            exp = exp.multiply(Integer[-1]);\r\n            base = base.modInv(mod);\r\n        }\r\n        while (exp.isPositive()) {\r\n            if (base.isZero()) return Integer[0];\r\n            if (exp.isOdd()) r = r.multiply(base).mod(mod);\r\n            exp = exp.divide(2);\r\n            base = base.square().mod(mod);\r\n        }\r\n        return r;\r\n    };\r\n    NativeBigInt.prototype.modPow = SmallInteger.prototype.modPow = BigInteger.prototype.modPow;\r\n\r\n    function compareAbs(a, b) {\r\n        if (a.length !== b.length) {\r\n            return a.length > b.length ? 1 : -1;\r\n        }\r\n        for (var i = a.length - 1; i >= 0; i--) {\r\n            if (a[i] !== b[i]) return a[i] > b[i] ? 1 : -1;\r\n        }\r\n        return 0;\r\n    }\r\n\r\n    BigInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) return 1;\r\n        return compareAbs(a, b);\r\n    };\r\n    SmallInteger.prototype.compareAbs = function (v) {\r\n        var n = parseValue(v),\r\n            a = Math.abs(this.value),\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            b = Math.abs(b);\r\n            return a === b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        return -1;\r\n    };\r\n    NativeBigInt.prototype.compareAbs = function (v) {\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        a = a >= 0 ? a : -a;\r\n        b = b >= 0 ? b : -b;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n\r\n    BigInteger.prototype.compare = function (v) {\r\n        // See discussion about comparison with Infinity:\r\n        // https://github.com/peterolson/BigInteger.js/issues/61\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (this.sign !== n.sign) {\r\n            return n.sign ? 1 : -1;\r\n        }\r\n        if (n.isSmall) {\r\n            return this.sign ? -1 : 1;\r\n        }\r\n        return compareAbs(a, b) * (this.sign ? -1 : 1);\r\n    };\r\n    BigInteger.prototype.compareTo = BigInteger.prototype.compare;\r\n\r\n    SmallInteger.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n\r\n        var n = parseValue(v),\r\n            a = this.value,\r\n            b = n.value;\r\n        if (n.isSmall) {\r\n            return a == b ? 0 : a > b ? 1 : -1;\r\n        }\r\n        if (a < 0 !== n.sign) {\r\n            return a < 0 ? -1 : 1;\r\n        }\r\n        return a < 0 ? 1 : -1;\r\n    };\r\n    SmallInteger.prototype.compareTo = SmallInteger.prototype.compare;\r\n\r\n    NativeBigInt.prototype.compare = function (v) {\r\n        if (v === Infinity) {\r\n            return -1;\r\n        }\r\n        if (v === -Infinity) {\r\n            return 1;\r\n        }\r\n        var a = this.value;\r\n        var b = parseValue(v).value;\r\n        return a === b ? 0 : a > b ? 1 : -1;\r\n    }\r\n    NativeBigInt.prototype.compareTo = NativeBigInt.prototype.compare;\r\n\r\n    BigInteger.prototype.equals = function (v) {\r\n        return this.compare(v) === 0;\r\n    };\r\n    NativeBigInt.prototype.eq = NativeBigInt.prototype.equals = SmallInteger.prototype.eq = SmallInteger.prototype.equals = BigInteger.prototype.eq = BigInteger.prototype.equals;\r\n\r\n    BigInteger.prototype.notEquals = function (v) {\r\n        return this.compare(v) !== 0;\r\n    };\r\n    NativeBigInt.prototype.neq = NativeBigInt.prototype.notEquals = SmallInteger.prototype.neq = SmallInteger.prototype.notEquals = BigInteger.prototype.neq = BigInteger.prototype.notEquals;\r\n\r\n    BigInteger.prototype.greater = function (v) {\r\n        return this.compare(v) > 0;\r\n    };\r\n    NativeBigInt.prototype.gt = NativeBigInt.prototype.greater = SmallInteger.prototype.gt = SmallInteger.prototype.greater = BigInteger.prototype.gt = BigInteger.prototype.greater;\r\n\r\n    BigInteger.prototype.lesser = function (v) {\r\n        return this.compare(v) < 0;\r\n    };\r\n    NativeBigInt.prototype.lt = NativeBigInt.prototype.lesser = SmallInteger.prototype.lt = SmallInteger.prototype.lesser = BigInteger.prototype.lt = BigInteger.prototype.lesser;\r\n\r\n    BigInteger.prototype.greaterOrEquals = function (v) {\r\n        return this.compare(v) >= 0;\r\n    };\r\n    NativeBigInt.prototype.geq = NativeBigInt.prototype.greaterOrEquals = SmallInteger.prototype.geq = SmallInteger.prototype.greaterOrEquals = BigInteger.prototype.geq = BigInteger.prototype.greaterOrEquals;\r\n\r\n    BigInteger.prototype.lesserOrEquals = function (v) {\r\n        return this.compare(v) <= 0;\r\n    };\r\n    NativeBigInt.prototype.leq = NativeBigInt.prototype.lesserOrEquals = SmallInteger.prototype.leq = SmallInteger.prototype.lesserOrEquals = BigInteger.prototype.leq = BigInteger.prototype.lesserOrEquals;\r\n\r\n    BigInteger.prototype.isEven = function () {\r\n        return (this.value[0] & 1) === 0;\r\n    };\r\n    SmallInteger.prototype.isEven = function () {\r\n        return (this.value & 1) === 0;\r\n    };\r\n    NativeBigInt.prototype.isEven = function () {\r\n        return (this.value & BigInt(1)) === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isOdd = function () {\r\n        return (this.value[0] & 1) === 1;\r\n    };\r\n    SmallInteger.prototype.isOdd = function () {\r\n        return (this.value & 1) === 1;\r\n    };\r\n    NativeBigInt.prototype.isOdd = function () {\r\n        return (this.value & BigInt(1)) === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isPositive = function () {\r\n        return !this.sign;\r\n    };\r\n    SmallInteger.prototype.isPositive = function () {\r\n        return this.value > 0;\r\n    };\r\n    NativeBigInt.prototype.isPositive = SmallInteger.prototype.isPositive;\r\n\r\n    BigInteger.prototype.isNegative = function () {\r\n        return this.sign;\r\n    };\r\n    SmallInteger.prototype.isNegative = function () {\r\n        return this.value < 0;\r\n    };\r\n    NativeBigInt.prototype.isNegative = SmallInteger.prototype.isNegative;\r\n\r\n    BigInteger.prototype.isUnit = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isUnit = function () {\r\n        return Math.abs(this.value) === 1;\r\n    };\r\n    NativeBigInt.prototype.isUnit = function () {\r\n        return this.abs().value === BigInt(1);\r\n    }\r\n\r\n    BigInteger.prototype.isZero = function () {\r\n        return false;\r\n    };\r\n    SmallInteger.prototype.isZero = function () {\r\n        return this.value === 0;\r\n    };\r\n    NativeBigInt.prototype.isZero = function () {\r\n        return this.value === BigInt(0);\r\n    }\r\n\r\n    BigInteger.prototype.isDivisibleBy = function (v) {\r\n        var n = parseValue(v);\r\n        if (n.isZero()) return false;\r\n        if (n.isUnit()) return true;\r\n        if (n.compareAbs(2) === 0) return this.isEven();\r\n        return this.mod(n).isZero();\r\n    };\r\n    NativeBigInt.prototype.isDivisibleBy = SmallInteger.prototype.isDivisibleBy = BigInteger.prototype.isDivisibleBy;\r\n\r\n    function isBasicPrime(v) {\r\n        var n = v.abs();\r\n        if (n.isUnit()) return false;\r\n        if (n.equals(2) || n.equals(3) || n.equals(5)) return true;\r\n        if (n.isEven() || n.isDivisibleBy(3) || n.isDivisibleBy(5)) return false;\r\n        if (n.lesser(49)) return true;\r\n        // we don't know if it's prime: let the other functions figure it out\r\n    }\r\n\r\n    function millerRabinTest(n, a) {\r\n        var nPrev = n.prev(),\r\n            b = nPrev,\r\n            r = 0,\r\n            d, t, i, x;\r\n        while (b.isEven()) b = b.divide(2), r++;\r\n        next: for (i = 0; i < a.length; i++) {\r\n            if (n.lesser(a[i])) continue;\r\n            x = bigInt(a[i]).modPow(b, n);\r\n            if (x.isUnit() || x.equals(nPrev)) continue;\r\n            for (d = r - 1; d != 0; d--) {\r\n                x = x.square().mod(n);\r\n                if (x.isUnit()) return false;\r\n                if (x.equals(nPrev)) continue next;\r\n            }\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Set \"strict\" to true to force GRH-supported lower bound of 2*log(N)^2\r\n    BigInteger.prototype.isPrime = function (strict) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var bits = n.bitLength();\r\n        if (bits <= 64)\r\n            return millerRabinTest(n, [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37]);\r\n        var logN = Math.log(2) * bits.toJSNumber();\r\n        var t = Math.ceil((strict === true) ? (2 * Math.pow(logN, 2)) : logN);\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt(i + 2));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isPrime = SmallInteger.prototype.isPrime = BigInteger.prototype.isPrime;\r\n\r\n    BigInteger.prototype.isProbablePrime = function (iterations, rng) {\r\n        var isPrime = isBasicPrime(this);\r\n        if (isPrime !== undefined) return isPrime;\r\n        var n = this.abs();\r\n        var t = iterations === undefined ? 5 : iterations;\r\n        for (var a = [], i = 0; i < t; i++) {\r\n            a.push(bigInt.randBetween(2, n.minus(2), rng));\r\n        }\r\n        return millerRabinTest(n, a);\r\n    };\r\n    NativeBigInt.prototype.isProbablePrime = SmallInteger.prototype.isProbablePrime = BigInteger.prototype.isProbablePrime;\r\n\r\n    BigInteger.prototype.modInv = function (n) {\r\n        var t = bigInt.zero, newT = bigInt.one, r = parseValue(n), newR = this.abs(), q, lastT, lastR;\r\n        while (!newR.isZero()) {\r\n            q = r.divide(newR);\r\n            lastT = t;\r\n            lastR = r;\r\n            t = newT;\r\n            r = newR;\r\n            newT = lastT.subtract(q.multiply(newT));\r\n            newR = lastR.subtract(q.multiply(newR));\r\n        }\r\n        if (!r.isUnit()) throw new Error(this.toString() + \" and \" + n.toString() + \" are not co-prime\");\r\n        if (t.compare(0) === -1) {\r\n            t = t.add(n);\r\n        }\r\n        if (this.isNegative()) {\r\n            return t.negate();\r\n        }\r\n        return t;\r\n    };\r\n\r\n    NativeBigInt.prototype.modInv = SmallInteger.prototype.modInv = BigInteger.prototype.modInv;\r\n\r\n    BigInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return subtractSmall(value, 1, this.sign);\r\n        }\r\n        return new BigInteger(addSmall(value, 1), this.sign);\r\n    };\r\n    SmallInteger.prototype.next = function () {\r\n        var value = this.value;\r\n        if (value + 1 < MAX_INT) return new SmallInteger(value + 1);\r\n        return new BigInteger(MAX_INT_ARR, false);\r\n    };\r\n    NativeBigInt.prototype.next = function () {\r\n        return new NativeBigInt(this.value + BigInt(1));\r\n    }\r\n\r\n    BigInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (this.sign) {\r\n            return new BigInteger(addSmall(value, 1), true);\r\n        }\r\n        return subtractSmall(value, 1, this.sign);\r\n    };\r\n    SmallInteger.prototype.prev = function () {\r\n        var value = this.value;\r\n        if (value - 1 > -MAX_INT) return new SmallInteger(value - 1);\r\n        return new BigInteger(MAX_INT_ARR, true);\r\n    };\r\n    NativeBigInt.prototype.prev = function () {\r\n        return new NativeBigInt(this.value - BigInt(1));\r\n    }\r\n\r\n    var powersOfTwo = [1];\r\n    while (2 * powersOfTwo[powersOfTwo.length - 1] <= BASE) powersOfTwo.push(2 * powersOfTwo[powersOfTwo.length - 1]);\r\n    var powers2Length = powersOfTwo.length, highestPower2 = powersOfTwo[powers2Length - 1];\r\n\r\n    function shift_isSmall(n) {\r\n        return Math.abs(n) <= BASE;\r\n    }\r\n\r\n    BigInteger.prototype.shiftLeft = function (v) {\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftRight(-n);\r\n        var result = this;\r\n        if (result.isZero()) return result;\r\n        while (n >= powers2Length) {\r\n            result = result.multiply(highestPower2);\r\n            n -= powers2Length - 1;\r\n        }\r\n        return result.multiply(powersOfTwo[n]);\r\n    };\r\n    NativeBigInt.prototype.shiftLeft = SmallInteger.prototype.shiftLeft = BigInteger.prototype.shiftLeft;\r\n\r\n    BigInteger.prototype.shiftRight = function (v) {\r\n        var remQuo;\r\n        var n = parseValue(v).toJSNumber();\r\n        if (!shift_isSmall(n)) {\r\n            throw new Error(String(n) + \" is too large for shifting.\");\r\n        }\r\n        if (n < 0) return this.shiftLeft(-n);\r\n        var result = this;\r\n        while (n >= powers2Length) {\r\n            if (result.isZero() || (result.isNegative() && result.isUnit())) return result;\r\n            remQuo = divModAny(result, highestPower2);\r\n            result = remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n            n -= powers2Length - 1;\r\n        }\r\n        remQuo = divModAny(result, powersOfTwo[n]);\r\n        return remQuo[1].isNegative() ? remQuo[0].prev() : remQuo[0];\r\n    };\r\n    NativeBigInt.prototype.shiftRight = SmallInteger.prototype.shiftRight = BigInteger.prototype.shiftRight;\r\n\r\n    function bitwise(x, y, fn) {\r\n        y = parseValue(y);\r\n        var xSign = x.isNegative(), ySign = y.isNegative();\r\n        var xRem = xSign ? x.not() : x,\r\n            yRem = ySign ? y.not() : y;\r\n        var xDigit = 0, yDigit = 0;\r\n        var xDivMod = null, yDivMod = null;\r\n        var result = [];\r\n        while (!xRem.isZero() || !yRem.isZero()) {\r\n            xDivMod = divModAny(xRem, highestPower2);\r\n            xDigit = xDivMod[1].toJSNumber();\r\n            if (xSign) {\r\n                xDigit = highestPower2 - 1 - xDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            yDivMod = divModAny(yRem, highestPower2);\r\n            yDigit = yDivMod[1].toJSNumber();\r\n            if (ySign) {\r\n                yDigit = highestPower2 - 1 - yDigit; // two's complement for negative numbers\r\n            }\r\n\r\n            xRem = xDivMod[0];\r\n            yRem = yDivMod[0];\r\n            result.push(fn(xDigit, yDigit));\r\n        }\r\n        var sum = fn(xSign ? 1 : 0, ySign ? 1 : 0) !== 0 ? bigInt(-1) : bigInt(0);\r\n        for (var i = result.length - 1; i >= 0; i -= 1) {\r\n            sum = sum.multiply(highestPower2).add(bigInt(result[i]));\r\n        }\r\n        return sum;\r\n    }\r\n\r\n    BigInteger.prototype.not = function () {\r\n        return this.negate().prev();\r\n    };\r\n    NativeBigInt.prototype.not = SmallInteger.prototype.not = BigInteger.prototype.not;\r\n\r\n    BigInteger.prototype.and = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a & b; });\r\n    };\r\n    NativeBigInt.prototype.and = SmallInteger.prototype.and = BigInteger.prototype.and;\r\n\r\n    BigInteger.prototype.or = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a | b; });\r\n    };\r\n    NativeBigInt.prototype.or = SmallInteger.prototype.or = BigInteger.prototype.or;\r\n\r\n    BigInteger.prototype.xor = function (n) {\r\n        return bitwise(this, n, function (a, b) { return a ^ b; });\r\n    };\r\n    NativeBigInt.prototype.xor = SmallInteger.prototype.xor = BigInteger.prototype.xor;\r\n\r\n    var LOBMASK_I = 1 << 30, LOBMASK_BI = (BASE & -BASE) * (BASE & -BASE) | LOBMASK_I;\r\n    function roughLOB(n) { // get lowestOneBit (rough)\r\n        // SmallInteger: return Min(lowestOneBit(n), 1 << 30)\r\n        // BigInteger: return Min(lowestOneBit(n), 1 << 14) [BASE=1e7]\r\n        var v = n.value,\r\n            x = typeof v === \"number\" ? v | LOBMASK_I :\r\n                typeof v === \"bigint\" ? v | BigInt(LOBMASK_I) :\r\n                    v[0] + v[1] * BASE | LOBMASK_BI;\r\n        return x & -x;\r\n    }\r\n\r\n    function integerLogarithm(value, base) {\r\n        if (base.compareTo(value) <= 0) {\r\n            var tmp = integerLogarithm(value, base.square(base));\r\n            var p = tmp.p;\r\n            var e = tmp.e;\r\n            var t = p.multiply(base);\r\n            return t.compareTo(value) <= 0 ? { p: t, e: e * 2 + 1 } : { p: p, e: e * 2 };\r\n        }\r\n        return { p: bigInt(1), e: 0 };\r\n    }\r\n\r\n    BigInteger.prototype.bitLength = function () {\r\n        var n = this;\r\n        if (n.compareTo(bigInt(0)) < 0) {\r\n            n = n.negate().subtract(bigInt(1));\r\n        }\r\n        if (n.compareTo(bigInt(0)) === 0) {\r\n            return bigInt(0);\r\n        }\r\n        return bigInt(integerLogarithm(n, bigInt(2)).e).add(bigInt(1));\r\n    }\r\n    NativeBigInt.prototype.bitLength = SmallInteger.prototype.bitLength = BigInteger.prototype.bitLength;\r\n\r\n    function max(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.greater(b) ? a : b;\r\n    }\r\n    function min(a, b) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        return a.lesser(b) ? a : b;\r\n    }\r\n    function gcd(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        if (a.equals(b)) return a;\r\n        if (a.isZero()) return b;\r\n        if (b.isZero()) return a;\r\n        var c = Integer[1], d, t;\r\n        while (a.isEven() && b.isEven()) {\r\n            d = min(roughLOB(a), roughLOB(b));\r\n            a = a.divide(d);\r\n            b = b.divide(d);\r\n            c = c.multiply(d);\r\n        }\r\n        while (a.isEven()) {\r\n            a = a.divide(roughLOB(a));\r\n        }\r\n        do {\r\n            while (b.isEven()) {\r\n                b = b.divide(roughLOB(b));\r\n            }\r\n            if (a.greater(b)) {\r\n                t = b; b = a; a = t;\r\n            }\r\n            b = b.subtract(a);\r\n        } while (!b.isZero());\r\n        return c.isUnit() ? a : a.multiply(c);\r\n    }\r\n    function lcm(a, b) {\r\n        a = parseValue(a).abs();\r\n        b = parseValue(b).abs();\r\n        return a.divide(gcd(a, b)).multiply(b);\r\n    }\r\n    function randBetween(a, b, rng) {\r\n        a = parseValue(a);\r\n        b = parseValue(b);\r\n        var usedRNG = rng || Math.random;\r\n        var low = min(a, b), high = max(a, b);\r\n        var range = high.subtract(low).add(1);\r\n        if (range.isSmall) return low.add(Math.floor(usedRNG() * range));\r\n        var digits = toBase(range, BASE).value;\r\n        var result = [], restricted = true;\r\n        for (var i = 0; i < digits.length; i++) {\r\n            var top = restricted ? digits[i] : BASE;\r\n            var digit = truncate(usedRNG() * top);\r\n            result.push(digit);\r\n            if (digit < top) restricted = false;\r\n        }\r\n        return low.add(Integer.fromArray(result, BASE, false));\r\n    }\r\n\r\n    var parseBase = function (text, base, alphabet, caseSensitive) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        text = String(text);\r\n        if (!caseSensitive) {\r\n            text = text.toLowerCase();\r\n            alphabet = alphabet.toLowerCase();\r\n        }\r\n        var length = text.length;\r\n        var i;\r\n        var absBase = Math.abs(base);\r\n        var alphabetValues = {};\r\n        for (i = 0; i < alphabet.length; i++) {\r\n            alphabetValues[alphabet[i]] = i;\r\n        }\r\n        for (i = 0; i < length; i++) {\r\n            var c = text[i];\r\n            if (c === \"-\") continue;\r\n            if (c in alphabetValues) {\r\n                if (alphabetValues[c] >= absBase) {\r\n                    if (c === \"1\" && absBase === 1) continue;\r\n                    throw new Error(c + \" is not a valid digit in base \" + base + \".\");\r\n                }\r\n            }\r\n        }\r\n        base = parseValue(base);\r\n        var digits = [];\r\n        var isNegative = text[0] === \"-\";\r\n        for (i = isNegative ? 1 : 0; i < text.length; i++) {\r\n            var c = text[i];\r\n            if (c in alphabetValues) digits.push(parseValue(alphabetValues[c]));\r\n            else if (c === \"<\") {\r\n                var start = i;\r\n                do { i++; } while (text[i] !== \">\" && i < text.length);\r\n                digits.push(parseValue(text.slice(start + 1, i)));\r\n            }\r\n            else throw new Error(c + \" is not a valid character\");\r\n        }\r\n        return parseBaseFromArray(digits, base, isNegative);\r\n    };\r\n\r\n    function parseBaseFromArray(digits, base, isNegative) {\r\n        var val = Integer[0], pow = Integer[1], i;\r\n        for (i = digits.length - 1; i >= 0; i--) {\r\n            val = val.add(digits[i].times(pow));\r\n            pow = pow.times(base);\r\n        }\r\n        return isNegative ? val.negate() : val;\r\n    }\r\n\r\n    function stringify(digit, alphabet) {\r\n        alphabet = alphabet || DEFAULT_ALPHABET;\r\n        if (digit < alphabet.length) {\r\n            return alphabet[digit];\r\n        }\r\n        return \"<\" + digit + \">\";\r\n    }\r\n\r\n    function toBase(n, base) {\r\n        base = bigInt(base);\r\n        if (base.isZero()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            throw new Error(\"Cannot convert nonzero numbers to base 0.\");\r\n        }\r\n        if (base.equals(-1)) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n            if (n.isNegative())\r\n                return {\r\n                    value: [].concat.apply([], Array.apply(null, Array(-n.toJSNumber()))\r\n                        .map(Array.prototype.valueOf, [1, 0])\r\n                    ),\r\n                    isNegative: false\r\n                };\r\n\r\n            var arr = Array.apply(null, Array(n.toJSNumber() - 1))\r\n                .map(Array.prototype.valueOf, [0, 1]);\r\n            arr.unshift([1]);\r\n            return {\r\n                value: [].concat.apply([], arr),\r\n                isNegative: false\r\n            };\r\n        }\r\n\r\n        var neg = false;\r\n        if (n.isNegative() && base.isPositive()) {\r\n            neg = true;\r\n            n = n.abs();\r\n        }\r\n        if (base.isUnit()) {\r\n            if (n.isZero()) return { value: [0], isNegative: false };\r\n\r\n            return {\r\n                value: Array.apply(null, Array(n.toJSNumber()))\r\n                    .map(Number.prototype.valueOf, 1),\r\n                isNegative: neg\r\n            };\r\n        }\r\n        var out = [];\r\n        var left = n, divmod;\r\n        while (left.isNegative() || left.compareAbs(base) >= 0) {\r\n            divmod = left.divmod(base);\r\n            left = divmod.quotient;\r\n            var digit = divmod.remainder;\r\n            if (digit.isNegative()) {\r\n                digit = base.minus(digit).abs();\r\n                left = left.next();\r\n            }\r\n            out.push(digit.toJSNumber());\r\n        }\r\n        out.push(left.toJSNumber());\r\n        return { value: out.reverse(), isNegative: neg };\r\n    }\r\n\r\n    function toBaseString(n, base, alphabet) {\r\n        var arr = toBase(n, base);\r\n        return (arr.isNegative ? \"-\" : \"\") + arr.value.map(function (x) {\r\n            return stringify(x, alphabet);\r\n        }).join('');\r\n    }\r\n\r\n    BigInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    SmallInteger.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    NativeBigInt.prototype.toArray = function (radix) {\r\n        return toBase(this, radix);\r\n    };\r\n\r\n    BigInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix !== 10) return toBaseString(this, radix, alphabet);\r\n        var v = this.value, l = v.length, str = String(v[--l]), zeros = \"0000000\", digit;\r\n        while (--l >= 0) {\r\n            digit = String(v[l]);\r\n            str += zeros.slice(digit.length) + digit;\r\n        }\r\n        var sign = this.sign ? \"-\" : \"\";\r\n        return sign + str;\r\n    };\r\n\r\n    SmallInteger.prototype.toString = function (radix, alphabet) {\r\n        if (radix === undefined) radix = 10;\r\n        if (radix != 10) return toBaseString(this, radix, alphabet);\r\n        return String(this.value);\r\n    };\r\n\r\n    NativeBigInt.prototype.toString = SmallInteger.prototype.toString;\r\n\r\n    NativeBigInt.prototype.toJSON = BigInteger.prototype.toJSON = SmallInteger.prototype.toJSON = function () { return this.toString(); }\r\n\r\n    BigInteger.prototype.valueOf = function () {\r\n        return parseInt(this.toString(), 10);\r\n    };\r\n    BigInteger.prototype.toJSNumber = BigInteger.prototype.valueOf;\r\n\r\n    SmallInteger.prototype.valueOf = function () {\r\n        return this.value;\r\n    };\r\n    SmallInteger.prototype.toJSNumber = SmallInteger.prototype.valueOf;\r\n    NativeBigInt.prototype.valueOf = NativeBigInt.prototype.toJSNumber = function () {\r\n        return parseInt(this.toString(), 10);\r\n    }\r\n\r\n    function parseStringValue(v) {\r\n        if (isPrecise(+v)) {\r\n            var x = +v;\r\n            if (x === truncate(x))\r\n                return supportsNativeBigInt ? new NativeBigInt(BigInt(x)) : new SmallInteger(x);\r\n            throw new Error(\"Invalid integer: \" + v);\r\n        }\r\n        var sign = v[0] === \"-\";\r\n        if (sign) v = v.slice(1);\r\n        var split = v.split(/e/i);\r\n        if (split.length > 2) throw new Error(\"Invalid integer: \" + split.join(\"e\"));\r\n        if (split.length === 2) {\r\n            var exp = split[1];\r\n            if (exp[0] === \"+\") exp = exp.slice(1);\r\n            exp = +exp;\r\n            if (exp !== truncate(exp) || !isPrecise(exp)) throw new Error(\"Invalid integer: \" + exp + \" is not a valid exponent.\");\r\n            var text = split[0];\r\n            var decimalPlace = text.indexOf(\".\");\r\n            if (decimalPlace >= 0) {\r\n                exp -= text.length - decimalPlace - 1;\r\n                text = text.slice(0, decimalPlace) + text.slice(decimalPlace + 1);\r\n            }\r\n            if (exp < 0) throw new Error(\"Cannot include negative exponent part for integers\");\r\n            text += (new Array(exp + 1)).join(\"0\");\r\n            v = text;\r\n        }\r\n        var isValid = /^([0-9][0-9]*)$/.test(v);\r\n        if (!isValid) throw new Error(\"Invalid integer: \" + v);\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(sign ? \"-\" + v : v));\r\n        }\r\n        var r = [], max = v.length, l = LOG_BASE, min = max - l;\r\n        while (max > 0) {\r\n            r.push(+v.slice(min, max));\r\n            min -= l;\r\n            if (min < 0) min = 0;\r\n            max -= l;\r\n        }\r\n        trim(r);\r\n        return new BigInteger(r, sign);\r\n    }\r\n\r\n    function parseNumberValue(v) {\r\n        if (supportsNativeBigInt) {\r\n            return new NativeBigInt(BigInt(v));\r\n        }\r\n        if (isPrecise(v)) {\r\n            if (v !== truncate(v)) throw new Error(v + \" is not an integer.\");\r\n            return new SmallInteger(v);\r\n        }\r\n        return parseStringValue(v.toString());\r\n    }\r\n\r\n    function parseValue(v) {\r\n        if (typeof v === \"number\") {\r\n            return parseNumberValue(v);\r\n        }\r\n        if (typeof v === \"string\") {\r\n            return parseStringValue(v);\r\n        }\r\n        if (typeof v === \"bigint\") {\r\n            return new NativeBigInt(v);\r\n        }\r\n        return v;\r\n    }\r\n    // Pre-define numbers in range [-999,999]\r\n    for (var i = 0; i < 1000; i++) {\r\n        Integer[i] = parseValue(i);\r\n        if (i > 0) Integer[-i] = parseValue(-i);\r\n    }\r\n    // Backwards compatibility\r\n    Integer.one = Integer[1];\r\n    Integer.zero = Integer[0];\r\n    Integer.minusOne = Integer[-1];\r\n    Integer.max = max;\r\n    Integer.min = min;\r\n    Integer.gcd = gcd;\r\n    Integer.lcm = lcm;\r\n    Integer.isInstance = function (x) { return x instanceof BigInteger || x instanceof SmallInteger || x instanceof NativeBigInt; };\r\n    Integer.randBetween = randBetween;\r\n\r\n    Integer.fromArray = function (digits, base, isNegative) {\r\n        return parseBaseFromArray(digits.map(parseValue), parseValue(base || 10), isNegative);\r\n    };\r\n\r\n    return Integer;\r\n})();\r\n\r\n// Node.js check\r\nif (typeof module !== \"undefined\" && module.hasOwnProperty(\"exports\")) {\r\n    module.exports = bigInt;\r\n}\r\n\r\n//amd check\r\nif (typeof define === \"function\" && define.amd) {\r\n    define( function () {\r\n        return bigInt;\r\n    });\r\n}\r\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n"],"sourceRoot":""}