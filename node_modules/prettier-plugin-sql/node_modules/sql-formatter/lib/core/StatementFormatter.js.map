{"version":3,"sources":["../../src/core/StatementFormatter.ts"],"names":["StatementFormatter","cfg","params","asTokenFactory","EOF_TOKEN","indentation","Indentation","inlineBlock","InlineBlock","expressionWidth","aliasAs","AliasAs","query","WhitespaceBuilder","statement","tokens","index","length","token","previousReservedToken","type","TokenType","RESERVED_COMMAND","previousCommandToken","LINE_COMMENT","formatLineComment","BLOCK_COMMENT","formatBlockComment","currentNewline","checkNewline","formatCommand","RESERVED_BINARY_COMMAND","formatBinaryCommand","RESERVED_DEPENDENT_CLAUSE","formatDependentClause","RESERVED_JOIN_CONDITION","formatJoinCondition","RESERVED_LOGICAL_OPERATOR","formatLogicalOperator","RESERVED_KEYWORD","formatKeyword","BLOCK_START","formatBlockStart","BLOCK_END","formatBlockEnd","RESERVED_CASE_START","formatCaseStart","RESERVED_CASE_END","formatCaseEnd","PLACEHOLDER","formatPlaceholder","OPERATOR","formatOperator","formatWord","toString","shouldAddBefore","add","show","WS","SPACE","shouldAddAfter","nextTokens","tokensUntilNextCommandOrQueryEnd","isWithinSelect","some","isToken","CASE","multilineLists","inlineWidth","countClauses","tokensString","map","value","join","whitespaceBefore","count","openBlocks","tail","slice","findIndex","undefined","NEWLINE","INDENT","indentComment","comment","replace","getIndent","decreaseTopLevel","tokenLookAhead","increaseTopLevel","isJoin","test","AS","shouldRemove","formatComma","formatQuerySeparator","includes","NO_SPACE","denseOperators","tokenLookBehind","AND","BETWEEN","logicalOperatorNewline","preserveWhitespaceFor","newlineBeforeOpenParen","NO_NEWLINE","beginIfPossible","isActive","increaseBlockLevel","end","formatMultilineBlockEnd","decreaseBlockLevel","SINGLE_INDENT","newlineBeforeCloseParen","get","LIMIT","getPreviousReservedToken","newlineBeforeSemicolon","isTabularToken","showToken","indentStyle","keywordCase","text","toLowerCase","SELECT","n"],"mappings":"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","sourcesContent":["import type { FormatOptions } from 'src/types';\nimport { equalizeWhitespace } from 'src/utils';\n\nimport Indentation from './Indentation';\nimport InlineBlock from './InlineBlock';\nimport Params from './Params';\nimport { isReserved, isCommand, isToken, type Token, TokenType, EOF_TOKEN } from './token';\nimport toTabularFormat from './tabularStyle';\nimport AliasAs from './AliasAs';\nimport AsTokenFactory from './AsTokenFactory';\nimport { type Statement } from './Parser';\nimport { indentString, isTabularStyle } from './config';\nimport WhitespaceBuilder, { WS } from './WhitespaceBuilder';\n\n/** Formats single SQL statement */\nexport default class StatementFormatter {\n  private cfg: FormatOptions;\n  private indentation: Indentation;\n  private inlineBlock: InlineBlock;\n  private aliasAs: AliasAs;\n  private params: Params;\n  private asTokenFactory: AsTokenFactory;\n  private query: WhitespaceBuilder;\n\n  private currentNewline = true;\n  private previousReservedToken: Token = EOF_TOKEN;\n  private previousCommandToken: Token = EOF_TOKEN;\n  private tokens: Token[] = [];\n  private index = -1;\n\n  constructor(cfg: FormatOptions, params: Params, asTokenFactory: AsTokenFactory) {\n    this.cfg = cfg;\n    this.indentation = new Indentation(indentString(cfg));\n    this.inlineBlock = new InlineBlock(this.cfg.expressionWidth);\n    this.aliasAs = new AliasAs(this.cfg.aliasAs, this);\n    this.params = params;\n    this.asTokenFactory = asTokenFactory;\n    this.query = new WhitespaceBuilder(this.indentation);\n  }\n\n  public format(statement: Statement): string {\n    this.tokens = statement.tokens;\n\n    for (this.index = 0; this.index < this.tokens.length; this.index++) {\n      const token = this.tokens[this.index];\n\n      // if token is a Reserved Keyword, Command, Binary Command, Dependent Clause, Logical Operator, CASE, END\n      if (isReserved(token)) {\n        this.previousReservedToken = token;\n        if (token.type === TokenType.RESERVED_COMMAND) {\n          this.previousCommandToken = token;\n        }\n      }\n\n      if (token.type === TokenType.LINE_COMMENT) {\n        this.formatLineComment(token);\n      } else if (token.type === TokenType.BLOCK_COMMENT) {\n        this.formatBlockComment(token);\n      } else if (token.type === TokenType.RESERVED_COMMAND) {\n        this.currentNewline = this.checkNewline(token);\n        this.formatCommand(token);\n      } else if (token.type === TokenType.RESERVED_BINARY_COMMAND) {\n        this.formatBinaryCommand(token);\n      } else if (token.type === TokenType.RESERVED_DEPENDENT_CLAUSE) {\n        this.formatDependentClause(token);\n      } else if (token.type === TokenType.RESERVED_JOIN_CONDITION) {\n        this.formatJoinCondition(token);\n      } else if (token.type === TokenType.RESERVED_LOGICAL_OPERATOR) {\n        this.formatLogicalOperator(token);\n      } else if (token.type === TokenType.RESERVED_KEYWORD) {\n        this.formatKeyword(token);\n      } else if (token.type === TokenType.BLOCK_START) {\n        this.formatBlockStart(token);\n      } else if (token.type === TokenType.BLOCK_END) {\n        this.formatBlockEnd(token);\n      } else if (token.type === TokenType.RESERVED_CASE_START) {\n        this.formatCaseStart(token);\n      } else if (token.type === TokenType.RESERVED_CASE_END) {\n        this.formatCaseEnd(token);\n      } else if (token.type === TokenType.PLACEHOLDER) {\n        this.formatPlaceholder(token);\n      } else if (token.type === TokenType.OPERATOR) {\n        this.formatOperator(token);\n      } else {\n        this.formatWord(token);\n      }\n    }\n    return this.query.toString();\n  }\n\n  /**\n   * Formats word tokens + any potential AS tokens for aliases\n   */\n  private formatWord(token: Token) {\n    if (this.aliasAs.shouldAddBefore(token)) {\n      this.query.add(this.show(this.asTokenFactory.token()), WS.SPACE);\n    }\n\n    this.query.add(this.show(token), WS.SPACE);\n\n    if (this.aliasAs.shouldAddAfter()) {\n      this.query.add(this.show(this.asTokenFactory.token()), WS.SPACE);\n    }\n  }\n\n  /**\n   * Checks if a newline should currently be inserted\n   */\n  private checkNewline(token: Token): boolean {\n    const nextTokens = this.tokensUntilNextCommandOrQueryEnd();\n\n    // auto break if SELECT includes CASE statements\n    if (this.isWithinSelect() && nextTokens.some(isToken.CASE)) {\n      return true;\n    }\n\n    switch (this.cfg.multilineLists) {\n      case 'always':\n        return true;\n      case 'avoid':\n        return false;\n      case 'expressionWidth':\n        return this.inlineWidth(token, nextTokens) > this.cfg.expressionWidth;\n      default: // multilineLists mode is a number\n        return (\n          this.countClauses(nextTokens) > this.cfg.multilineLists ||\n          this.inlineWidth(token, nextTokens) > this.cfg.expressionWidth\n        );\n    }\n  }\n\n  private inlineWidth(token: Token, tokens: Token[]): number {\n    const tokensString = tokens.map(({ value }) => (value === ',' ? value + ' ' : value)).join('');\n    return `${token.whitespaceBefore}${token.value} ${tokensString}`.length;\n  }\n\n  /**\n   * Counts comma-separated clauses (doesn't count commas inside blocks)\n   * Note: There's always at least one clause.\n   */\n  private countClauses(tokens: Token[]): number {\n    let count = 1;\n    let openBlocks = 0;\n    for (const { type, value } of tokens) {\n      if (value === ',' && openBlocks === 0) {\n        count++;\n      }\n      if (type === TokenType.BLOCK_START) {\n        openBlocks++;\n      }\n      if (type === TokenType.BLOCK_END) {\n        openBlocks--;\n      }\n    }\n    return count;\n  }\n\n  /** get all tokens between current token and next Reserved Command or query end */\n  private tokensUntilNextCommandOrQueryEnd(): Token[] {\n    const tail = this.tokens.slice(this.index + 1);\n    return tail.slice(\n      0,\n      tail.length ? tail.findIndex(token => isCommand(token) || token.value === ';') : undefined\n    );\n  }\n\n  /** Formats a line comment onto query */\n  private formatLineComment(token: Token) {\n    this.query.add(this.show(token), WS.NEWLINE, WS.INDENT);\n  }\n\n  /** Formats a block comment onto query */\n  private formatBlockComment(token: Token) {\n    this.query.add(WS.NEWLINE, WS.INDENT, this.indentComment(token.value), WS.NEWLINE, WS.INDENT);\n  }\n\n  /** Aligns comment to current indentation level */\n  private indentComment(comment: string): string {\n    return comment.replace(/\\n[ \\t]*/gu, '\\n' + this.indentation.getIndent() + ' ');\n  }\n\n  /**\n   * Formats a Reserved Command onto query, increasing indentation level where necessary\n   */\n  private formatCommand(token: Token) {\n    this.indentation.decreaseTopLevel();\n\n    this.query.add(WS.NEWLINE, WS.INDENT);\n\n    // indent tabular formats, except when preceding a (\n    if (isTabularStyle(this.cfg)) {\n      if (this.tokenLookAhead().value !== '(') {\n        this.indentation.increaseTopLevel();\n      }\n    } else {\n      this.indentation.increaseTopLevel();\n    }\n\n    if (this.currentNewline && !isTabularStyle(this.cfg)) {\n      this.query.add(this.show(token), WS.NEWLINE, WS.INDENT);\n    } else {\n      this.query.add(this.show(token), WS.SPACE);\n    }\n  }\n\n  /**\n   * Formats a Reserved Binary Command onto query, joining neighbouring tokens\n   */\n  private formatBinaryCommand(token: Token) {\n    const isJoin = /JOIN/i.test(token.value); // check if token contains JOIN\n    if (!isJoin || isTabularStyle(this.cfg)) {\n      // decrease for boolean set operators or in tabular mode\n      this.indentation.decreaseTopLevel();\n    }\n    if (isJoin) {\n      this.query.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n    } else {\n      this.query.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.NEWLINE, WS.INDENT);\n    }\n  }\n\n  /**\n   * Formats a Reserved Keyword onto query, skipping AS if disabled\n   */\n  private formatKeyword(token: Token) {\n    if (isToken.AS(token) && this.aliasAs.shouldRemove()) {\n      return;\n    }\n\n    this.query.add(this.show(token), WS.SPACE);\n  }\n\n  /**\n   * Formats a Reserved Dependent Clause token onto query, supporting the keyword that precedes it\n   */\n  private formatDependentClause(token: Token) {\n    this.query.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n  }\n\n  // Formats ON and USING keywords\n  private formatJoinCondition(token: Token) {\n    this.query.add(this.show(token), WS.SPACE);\n  }\n\n  /**\n   * Formats an Operator onto query, following rules for specific characters\n   */\n  private formatOperator(token: Token) {\n    // special operator\n    if (token.value === ',') {\n      this.formatComma(token);\n      return;\n    } else if (token.value === ';') {\n      this.formatQuerySeparator(token);\n      return;\n    } else if (['$', '['].includes(token.value)) {\n      this.query.add(this.show(token));\n      return;\n    } else if ([':', ']'].includes(token.value)) {\n      this.query.add(WS.NO_SPACE, this.show(token), WS.SPACE);\n      return;\n    } else if (['.', '{', '}', '`'].includes(token.value)) {\n      this.query.add(WS.NO_SPACE, this.show(token));\n      return;\n    }\n\n    // other operators\n    // in dense operators mode do not trim whitespace if SELECT *\n    if (this.cfg.denseOperators && this.tokenLookBehind().type !== TokenType.RESERVED_COMMAND) {\n      this.query.add(WS.NO_SPACE, this.show(token));\n    } else {\n      this.query.add(this.show(token), WS.SPACE);\n    }\n  }\n\n  /**\n   * Formats a Logical Operator onto query, joining boolean conditions\n   */\n  private formatLogicalOperator(token: Token) {\n    // ignore AND when BETWEEN x [AND] y\n    if (isToken.AND(token) && isToken.BETWEEN(this.tokenLookBehind(2))) {\n      this.query.add(this.show(token), WS.SPACE);\n      return;\n    }\n\n    if (isTabularStyle(this.cfg)) {\n      this.indentation.decreaseTopLevel();\n    }\n\n    if (this.cfg.logicalOperatorNewline === 'before') {\n      if (this.currentNewline) {\n        this.query.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n      } else {\n        this.query.add(this.show(token), WS.SPACE);\n      }\n    } else {\n      // eslint-disable-next-line no-lonely-if\n      if (this.currentNewline) {\n        this.query.add(this.show(token), WS.NEWLINE, WS.INDENT);\n      } else {\n        this.query.add(this.show(token));\n      }\n    }\n  }\n\n  private formatBlockStart(token: Token) {\n    // Take out the preceding space unless there was whitespace there in the original query\n    // or another opening parens or line comment\n    const preserveWhitespaceFor = [\n      TokenType.BLOCK_START,\n      TokenType.LINE_COMMENT,\n      TokenType.OPERATOR,\n    ];\n    if (\n      token.whitespaceBefore?.length === 0 &&\n      !preserveWhitespaceFor.includes(this.tokenLookBehind().type)\n    ) {\n      this.query.add(WS.NO_SPACE, this.show(token));\n    } else if (!this.cfg.newlineBeforeOpenParen) {\n      this.query.add(WS.NO_NEWLINE, WS.SPACE, this.show(token));\n    } else {\n      this.query.add(this.show(token));\n    }\n    this.inlineBlock.beginIfPossible(this.tokens, this.index);\n\n    if (!this.inlineBlock.isActive()) {\n      this.indentation.increaseBlockLevel();\n      this.query.add(WS.NEWLINE, WS.INDENT);\n    }\n  }\n\n  private formatBlockEnd(token: Token) {\n    if (this.inlineBlock.isActive()) {\n      this.inlineBlock.end();\n      this.query.add(WS.NO_SPACE, this.show(token), WS.SPACE);\n    } else {\n      this.formatMultilineBlockEnd(token);\n    }\n  }\n\n  private formatCaseStart(token: Token) {\n    this.indentation.increaseBlockLevel();\n    if (this.cfg.multilineLists === 'always') {\n      this.query.add(this.show(token), WS.NEWLINE, WS.INDENT);\n    } else {\n      this.query.add(this.show(token), WS.SPACE);\n    }\n  }\n\n  private formatCaseEnd(token: Token) {\n    this.formatMultilineBlockEnd(token);\n  }\n\n  private formatMultilineBlockEnd(token: Token) {\n    this.indentation.decreaseBlockLevel();\n\n    if (isTabularStyle(this.cfg)) {\n      // +1 extra indentation step for the closing paren\n      this.query.add(WS.NEWLINE, WS.INDENT, WS.SINGLE_INDENT, this.show(token), WS.SPACE);\n    } else if (this.cfg.newlineBeforeCloseParen) {\n      this.query.add(WS.NEWLINE, WS.INDENT, this.show(token), WS.SPACE);\n    } else {\n      this.query.add(WS.NO_NEWLINE, WS.SPACE, this.show(token), WS.SPACE);\n    }\n  }\n\n  /**\n   * Formats a Placeholder item onto query, to be replaced with the value of the placeholder\n   */\n  formatPlaceholder(token: Token) {\n    this.query.add(this.params.get(token), WS.SPACE);\n  }\n\n  /**\n   * Formats a comma Operator onto query, ending line unless in an Inline Block\n   */\n  private formatComma(token: Token) {\n    if (\n      !this.inlineBlock.isActive() &&\n      !isToken.LIMIT(this.getPreviousReservedToken()) &&\n      this.currentNewline\n    ) {\n      this.query.add(WS.NO_SPACE, this.show(token), WS.NEWLINE, WS.INDENT);\n    } else {\n      this.query.add(WS.NO_SPACE, this.show(token), WS.SPACE);\n    }\n  }\n\n  private formatQuerySeparator(token: Token) {\n    if (this.cfg.newlineBeforeSemicolon) {\n      this.query.add(WS.NEWLINE, this.show(token));\n    } else {\n      this.query.add(WS.NO_SPACE, this.show(token));\n    }\n  }\n\n  private show(token: Token): string {\n    if (this.isTabularToken(token)) {\n      return toTabularFormat(this.showToken(token), this.cfg.indentStyle);\n    } else {\n      return this.showToken(token);\n    }\n  }\n\n  // These token types can be formatted in tabular style\n  private isTabularToken(token: Token): boolean {\n    return (\n      token.type === TokenType.RESERVED_LOGICAL_OPERATOR ||\n      token.type === TokenType.RESERVED_DEPENDENT_CLAUSE ||\n      token.type === TokenType.RESERVED_COMMAND ||\n      token.type === TokenType.RESERVED_BINARY_COMMAND\n    );\n  }\n\n  // don't call this directly, always use show() instead.\n  private showToken(token: Token): string {\n    if (isReserved(token)) {\n      switch (this.cfg.keywordCase) {\n        case 'preserve':\n          return equalizeWhitespace(token.text);\n        case 'upper':\n          return token.value;\n        case 'lower':\n          return token.value.toLowerCase();\n      }\n    } else {\n      return token.value;\n    }\n  }\n\n  /** Returns the latest encountered reserved keyword token */\n  public getPreviousReservedToken(): Token {\n    return this.previousReservedToken;\n  }\n\n  /** True when currently within SELECT command */\n  public isWithinSelect(): boolean {\n    return isToken.SELECT(this.previousCommandToken);\n  }\n\n  /** Fetches nth previous token from the token stream */\n  public tokenLookBehind(n = 1): Token {\n    return this.tokens[this.index - n] || EOF_TOKEN;\n  }\n\n  /** Fetches nth next token from the token stream */\n  public tokenLookAhead(n = 1): Token {\n    return this.tokens[this.index + n] || EOF_TOKEN;\n  }\n}\n"],"file":"StatementFormatter.js"}